// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"1DRQe":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "3a51e79e8e3a5060";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"kaksi":[function(require,module,exports) {
//const fs = require('fs')
const dataForge = require("292f557eaad0d1e2");
const dataForgeFs = require("a9dff9726e1e0c06");
const df = dataForgeFs.readFileSync("measurements.csv").parseCSV();
const df1 = new dataForge.DataFrame(df).setIndex("Measurements");
//const text = fs.readFileSync("Measurements1.csv", "utf-8")
//const data = dataForge.fromCSV(text)
//console.log(df.toArray())
//console.log(df.head(5).toString())
//console.log(df.toString())
console.log(df1.toString());
//console.log(df1.at("OG"))
console.log(df1.getSeries("Size_40").at("OB"));
let date_OB = 0;
let date_DI = 0;
let date_VB = 0;
let date_OT = 0;
let n = "Size_40";
let m = "OB";
function measurements(n) {
    date_OB = df1.getSeries(n).at("OB");
    date_VB = df1.getSeries(n).at("VB");
    date_OT = df1.getSeries(n).at("OT");
    return date_OB, date_VB, date_OT;
}
date_OB, date_VB, date_OT = measurements(n);
console.log("OB = ", date_OB, ", VB = ", date_VB, ", OT =", date_OT);
function choose_size(value) {
    document.getElementById("tag").innerHTML = value;
    document.getElementById("tag1").innerHTML = df1.getSeries(value).at("VB");
    document.getElementById("tag2").innerHTML = df1.getSeries(value).at("OT");
}
choose_size(date_OB, date_VB, date_OT);

},{"292f557eaad0d1e2":"kMziK","a9dff9726e1e0c06":"fVrKm"}],"kMziK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DataFrame", ()=>DataFrame);
parcelHelpers.export(exports, "Index", ()=>Index);
parcelHelpers.export(exports, "Series", ()=>Series);
parcelHelpers.export(exports, "concatSeries", ()=>concat);
parcelHelpers.export(exports, "fromCSV", ()=>fromCSV);
parcelHelpers.export(exports, "fromJSON", ()=>fromJSON);
parcelHelpers.export(exports, "fromJSON5", ()=>fromJSON5);
parcelHelpers.export(exports, "fromObject", ()=>fromObject);
parcelHelpers.export(exports, "matrix", ()=>matrix);
parcelHelpers.export(exports, "range", ()=>range);
parcelHelpers.export(exports, "replicate", ()=>replicate);
parcelHelpers.export(exports, "zipSeries", ()=>zip);
var _easyTable = require("easy-table");
var _easyTableDefault = parcelHelpers.interopDefault(_easyTable);
var _esm = require("dayjs/esm");
var _esmDefault = parcelHelpers.interopDefault(_esm);
var _typy = require("typy");
var _typyDefault = parcelHelpers.interopDefault(_typy);
var _json5 = require("json5");
var _json5Default = parcelHelpers.interopDefault(_json5);
var _papaparse = require("papaparse");
var _papaparseDefault = parcelHelpers.interopDefault(_papaparse);
var _customParseFormat = require("dayjs/esm/plugin/customParseFormat");
var _customParseFormatDefault = parcelHelpers.interopDefault(_customParseFormat);
var _numeral = require("numeral");
var _numeralDefault = parcelHelpers.interopDefault(_numeral);
var Buffer = require("3a2015660cc06b91").Buffer;
var process = require("2c37ca11564a19db");
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
//
// An iterator that returns no values.
//
var EmptyIterator = /** @class */ function() {
    function EmptyIterator() {}
    EmptyIterator.prototype.next = function() {
        return {
            done: true,
            value: null
        };
    };
    return EmptyIterator;
}();
//
var EmptyIterable = /** @class */ function() {
    function EmptyIterable() {}
    EmptyIterable.prototype[Symbol.iterator] = function() {
        return new EmptyIterator();
    };
    return EmptyIterable;
}();
//
// An iterator that simply counts up from zero.
// This creates the default index in Data-Forge.
//
var CountIterator = /** @class */ function() {
    function CountIterator() {
        this.index = 0;
    }
    CountIterator.prototype.next = function() {
        return {
            done: false,
            value: this.index++
        };
    };
    return CountIterator;
}();
//
var CountIterable = /** @class */ function() {
    function CountIterable() {}
    CountIterable.prototype[Symbol.iterator] = function() {
        return new CountIterator();
    };
    return CountIterable;
}();
//
var MultiIterator = /** @class */ function() {
    function MultiIterator(iterators) {
        this.iterators = iterators;
    }
    MultiIterator.prototype.next = function() {
        if (this.iterators.length === 0) return {
            done: true,
            value: []
        };
        var multiResult = [];
        try {
            for(var _a = __values(this.iterators), _b = _a.next(); !_b.done; _b = _a.next()){
                var iterator = _b.value;
                var result = iterator.next();
                if (result.done) return {
                    done: true,
                    value: []
                };
                multiResult.push(result.value);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        var e_1, _c;
        return {
            done: false,
            value: multiResult
        };
    };
    return MultiIterator;
}();
//
var MultiIterable = /** @class */ function() {
    function MultiIterable(iterables) {
        this.iterables = iterables;
    }
    MultiIterable.prototype[Symbol.iterator] = function() {
        var iterators = [];
        try {
            for(var _a = __values(this.iterables), _b = _a.next(); !_b.done; _b = _a.next()){
                var iterable = _b.value;
                iterators.push(iterable[Symbol.iterator]());
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        var e_1, _c;
        return new MultiIterator(iterators);
    };
    return MultiIterable;
}();
//
// An iterator that applies a selector function to each item.
//
var SelectIterator = /** @class */ function() {
    function SelectIterator(iterator, selector) {
        this.index = 0;
        this.iterator = iterator;
        this.selector = selector;
    }
    SelectIterator.prototype.next = function() {
        var result = this.iterator.next();
        if (result.done) // https://github.com/Microsoft/TypeScript/issues/8938
        return {
            done: true
        }; // <= explicit cast here!;
        return {
            done: false,
            value: this.selector(result.value, this.index++)
        };
    };
    return SelectIterator;
}();
//
var SelectIterable = /** @class */ function() {
    function SelectIterable(iterable, selector) {
        this.iterable = iterable;
        this.selector = selector;
    }
    SelectIterable.prototype[Symbol.iterator] = function() {
        var iterator = this.iterable[Symbol.iterator]();
        return new SelectIterator(iterator, this.selector);
    };
    return SelectIterable;
}();
//
// An iterator that applies a selector function to each item.
//
var SelectManyIterator = /** @class */ function() {
    function SelectManyIterator(iterator, selector) {
        this.index = 0;
        this.iterator = iterator;
        this.selector = selector;
        this.outputIterator = null;
    }
    SelectManyIterator.prototype.next = function() {
        // eslint-disable-next-line no-constant-condition
        while(true){
            if (this.outputIterator === null) {
                var result = this.iterator.next();
                if (result.done) // https://github.com/Microsoft/TypeScript/issues/8938
                return {
                    done: true
                }; // <= explicit cast here!;
                var outputIterable = this.selector(result.value, this.index++);
                this.outputIterator = outputIterable[Symbol.iterator]();
            }
            var outputResult = this.outputIterator.next();
            if (outputResult.done) {
                this.outputIterator = null;
                continue;
            } else return outputResult;
        }
    };
    return SelectManyIterator;
}();
//
var SelectManyIterable = /** @class */ function() {
    function SelectManyIterable(iterable, selector) {
        this.iterable = iterable;
        this.selector = selector;
    }
    SelectManyIterable.prototype[Symbol.iterator] = function() {
        var iterator = this.iterable[Symbol.iterator]();
        return new SelectManyIterator(iterator, this.selector);
    };
    return SelectManyIterable;
}();
//
// An iterator that a sequence of elements while a predicate function returns true.
//
var TakeIterator = /** @class */ function() {
    function TakeIterator(childIterator, numElements) {
        this.childIterator = childIterator;
        this.numElements = numElements;
    }
    TakeIterator.prototype.next = function() {
        if (this.numElements <= 0) // https://github.com/Microsoft/TypeScript/issues/8938
        return {
            done: true
        }; // <= explicit cast here!;
        --this.numElements;
        return this.childIterator.next();
    };
    return TakeIterator;
}();
//
var TakeIterable = /** @class */ function() {
    function TakeIterable(childIterable, numElements) {
        this.childIterable = childIterable;
        this.numElements = numElements;
    }
    TakeIterable.prototype[Symbol.iterator] = function() {
        var childIterator = this.childIterable[Symbol.iterator]();
        return new TakeIterator(childIterator, this.numElements);
    };
    return TakeIterable;
}();
//
// An iterator that takes a sequence of elements while a predicate function returns true.
//
var TakeWhileIterator = /** @class */ function() {
    function TakeWhileIterator(childIterator, predicate) {
        this.done = false;
        this.childIterator = childIterator;
        this.predicate = predicate;
    }
    TakeWhileIterator.prototype.next = function() {
        if (!this.done) {
            var result = this.childIterator.next();
            if (result.done) this.done = true;
            else if (this.predicate(result.value)) return result;
            else this.done = true;
        }
        // https://github.com/Microsoft/TypeScript/issues/8938
        return {
            done: true
        }; // <= explicit cast here!;
    };
    return TakeWhileIterator;
}();
//
var TakeWhileIterable = /** @class */ function() {
    function TakeWhileIterable(childIterable, predicate) {
        this.childIterable = childIterable;
        this.predicate = predicate;
    }
    TakeWhileIterable.prototype[Symbol.iterator] = function() {
        var childIterator = this.childIterable[Symbol.iterator]();
        return new TakeWhileIterator(childIterator, this.predicate);
    };
    return TakeWhileIterable;
}();
//
// An iterator that takes elements from a child iterator based on a predicate function.
//
var WhereIterator = /** @class */ function() {
    function WhereIterator(childIterator, predicate) {
        this.childIterator = childIterator;
        this.predicate = predicate;
    }
    WhereIterator.prototype.next = function() {
        // eslint-disable-next-line no-constant-condition
        while(true){
            var result = this.childIterator.next();
            if (result.done) return result;
            if (this.predicate(result.value)) // It matches the predicate.
            return result;
        }
    };
    return WhereIterator;
}();
//
var WhereIterable = /** @class */ function() {
    function WhereIterable(childIterable, predicate) {
        this.childIterable = childIterable;
        this.predicate = predicate;
    }
    WhereIterable.prototype[Symbol.iterator] = function() {
        var childIterator = this.childIterable[Symbol.iterator]();
        return new WhereIterator(childIterator, this.predicate);
    };
    return WhereIterable;
}();
//
// An iterator that concatenates multiple iterables.
//
var ConcatIterator = /** @class */ function() {
    function ConcatIterator(iterables) {
        this.curIterator = null;
        this.iterables = iterables;
        this.iterator = iterables[Symbol.iterator]();
        this.moveToNextIterable();
    }
    //
    // Move onto the next iterable.
    //
    ConcatIterator.prototype.moveToNextIterable = function() {
        var nextIterable = this.iterator.next();
        if (nextIterable.done) this.curIterator = null;
        else this.curIterator = nextIterable.value[Symbol.iterator]();
    };
    ConcatIterator.prototype.next = function() {
        // eslint-disable-next-line no-constant-condition
        while(true){
            if (this.curIterator == null) // Finished iterating all sub-iterators.
            // https://github.com/Microsoft/TypeScript/issues/8938
            return {
                done: true
            }; // <= explicit cast here!;
            var result = this.curIterator.next();
            if (!result.done) return result; // Found a valid result from the current iterable.    
            // Find the next non empty iterable.
            this.moveToNextIterable();
        }
    };
    return ConcatIterator;
}();
//
var ConcatIterable = /** @class */ function() {
    function ConcatIterable(iterables) {
        this.iterables = iterables;
    }
    ConcatIterable.prototype[Symbol.iterator] = function() {
        return new ConcatIterator(this.iterables);
    };
    return ConcatIterable;
}();
//
var SeriesWindowIterator = /** @class */ function() {
    function SeriesWindowIterator(iterable, period, whichIndex) {
        this.iterable = iterable;
        this.period = period;
        this.whichIndex = whichIndex;
    }
    SeriesWindowIterator.prototype.next = function() {
        if (!this.iterator) this.iterator = this.iterable[Symbol.iterator]();
        var curWindow = [];
        for(var i = 0; i < this.period; ++i){
            var curPos = this.iterator.next();
            if (curPos.done) break;
            curWindow.push(curPos.value);
        }
        if (curWindow.length === 0) // Underlying iterator doesn't have required number of elements.
        return {
            done: true
        };
        var window = new Series({
            pairs: curWindow
        });
        return {
            //TODO: The way the index is figured out could have much better performance.
            value: [
                this.whichIndex === WhichIndex.Start ? window.getIndex().first() : window.getIndex().last(),
                window
            ],
            done: false
        };
    };
    return SeriesWindowIterator;
}();
//
var SeriesWindowIterable = /** @class */ function() {
    function SeriesWindowIterable(iterable, period, whichIndex) {
        this.iterable = iterable;
        this.period = period;
        this.whichIndex = whichIndex;
    }
    SeriesWindowIterable.prototype[Symbol.iterator] = function() {
        return new SeriesWindowIterator(this.iterable, this.period, this.whichIndex);
    };
    return SeriesWindowIterable;
}();
//
// An iterator that iterates the elements of an array.
//
var ArrayIterator = /** @class */ function() {
    function ArrayIterator(arr) {
        this.index = 0;
        this.arr = arr;
    }
    ArrayIterator.prototype.next = function() {
        if (this.index < this.arr.length) return {
            done: false,
            value: this.arr[this.index++]
        };
        else // https://github.com/Microsoft/TypeScript/issues/8938
        return {
            done: true
        }; // <= explicit cast here!;
    };
    return ArrayIterator;
}();
//
var ReverseIterable = /** @class */ function() {
    function ReverseIterable(iterable) {
        this.iterable = iterable;
    }
    ReverseIterable.prototype[Symbol.iterator] = function() {
        var working = [];
        try {
            for(var _a = __values(this.iterable), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                working.push(value);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        working.reverse();
        var e_1, _c;
        return new ArrayIterator(working);
    };
    return ReverseIterable;
}();
var ZipIterator = /** @class */ function() {
    function ZipIterator(iterables, zipper) {
        this.iterators = iterables.map(function(iterable) {
            return iterable[Symbol.iterator]();
        });
        this.zipper = zipper;
    }
    ZipIterator.prototype.next = function() {
        var results = this.iterators.map(function(iterator) {
            return iterator.next();
        });
        try {
            for(var results_1 = __values(results), results_1_1 = results_1.next(); !results_1_1.done; results_1_1 = results_1.next()){
                var result = results_1_1.value;
                if (result.done) // If any are done we are all done.
                // https://github.com/Microsoft/TypeScript/issues/8938
                return {
                    done: true
                }; // <= explicit cast here!;                
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (results_1_1 && !results_1_1.done && (_a = results_1.return)) _a.call(results_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        var zippedValues = results.map(function(result) {
            return result.value;
        });
        var zipperInput = new Series(zippedValues);
        var e_1, _a;
        return {
            done: false,
            value: this.zipper(zipperInput)
        };
    };
    return ZipIterator;
}();
//
var ZipIterable = /** @class */ function() {
    function ZipIterable(iterables, zipper) {
        this.iterables = iterables;
        this.zipper = zipper;
    }
    ZipIterable.prototype[Symbol.iterator] = function() {
        return new ZipIterator(this.iterables, this.zipper);
    };
    return ZipIterable;
}();
//
// An iterator that iterates the only distinct elements of another iterable.
//
var DistinctIterator = /** @class */ function() {
    function DistinctIterator(iterable, selector) {
        this.valuesAlreadySeen = new Set();
        this.iterator = iterable[Symbol.iterator]();
        this.selector = selector;
    }
    DistinctIterator.prototype.next = function() {
        // eslint-disable-next-line no-constant-condition
        while(true){
            var result = this.iterator.next();
            if (result.done) return {
                done: true
            };
            var potentialOutput = void 0;
            if (this.selector) potentialOutput = this.selector(result.value);
            else potentialOutput = result.value;
            if (this.valuesAlreadySeen.has(potentialOutput)) continue;
            this.valuesAlreadySeen.add(potentialOutput);
            return {
                done: false,
                value: result.value
            };
        }
    };
    return DistinctIterator;
}();
//
var DistinctIterable = /** @class */ function() {
    function DistinctIterable(iterable, selector) {
        this.iterable = iterable;
        this.selector = selector;
    }
    DistinctIterable.prototype[Symbol.iterator] = function() {
        return new DistinctIterator(this.iterable, this.selector);
    };
    return DistinctIterable;
}();
//
var SeriesRollingWindowIterator = /** @class */ function() {
    function SeriesRollingWindowIterator(iterable, period, whichIndex) {
        this.iterable = iterable;
        this.period = period;
        this.whichIndex = whichIndex;
    }
    SeriesRollingWindowIterator.prototype.next = function() {
        if (!this.curWindow) {
            this.curWindow = [];
            this.iterator = this.iterable[Symbol.iterator]();
            for(var i = 0; i < this.period; ++i){
                var curPos = this.iterator.next();
                if (curPos.done) // Underlying iterator doesn't have required number of elements.
                return {
                    done: true
                };
                this.curWindow.push(curPos.value);
            }
        } else {
            this.curWindow.shift(); // Remove first item from window.
            var curPos = this.iterator.next();
            if (curPos.done) // Underlying iterator doesn't have enough elements left.
            return {
                done: true
            };
            this.curWindow.push(curPos.value); // Add next item to window.
        }
        var window = new Series({
            pairs: this.curWindow
        });
        return {
            //TODO: The way the index is figured out could have much better performance.
            value: [
                this.whichIndex === WhichIndex.Start ? window.getIndex().first() : window.getIndex().last(),
                window
            ],
            done: false
        };
    };
    return SeriesRollingWindowIterator;
}();
//
var SeriesRollingWindowIterable = /** @class */ function() {
    function SeriesRollingWindowIterable(iterable, period, whichIndex) {
        this.iterable = iterable;
        this.period = period;
        this.whichIndex = whichIndex;
    }
    SeriesRollingWindowIterable.prototype[Symbol.iterator] = function() {
        return new SeriesRollingWindowIterator(this.iterable, this.period, this.whichIndex);
    };
    return SeriesRollingWindowIterable;
}();
//
var SeriesVariableWindowIterator = /** @class */ function() {
    function SeriesVariableWindowIterator(iterable, comparer) {
        this.iterator = iterable[Symbol.iterator]();
        this.nextValue = this.iterator.next();
        this.comparer = comparer;
    }
    SeriesVariableWindowIterator.prototype.next = function() {
        if (this.nextValue.done) // Nothing more to read.
        // https://github.com/Microsoft/TypeScript/issues/8938
        return {
            done: true
        }; // <= explicit cast here!;
        var pairs = [
            this.nextValue.value
        ];
        var prevValue = this.nextValue.value;
        // Pull values until there is one that doesn't compare.
        // eslint-disable-next-line no-constant-condition
        while(true){
            this.nextValue = this.iterator.next();
            if (this.nextValue.done) break; // No more values.
            if (!this.comparer(prevValue[1], this.nextValue.value[1])) {
                prevValue = this.nextValue.value;
                break; // Doesn't compare. Start a new window.
            }
            pairs.push(this.nextValue.value);
            prevValue = this.nextValue.value;
        }
        var window = new Series({
            pairs: pairs
        });
        return {
            value: window,
            done: false
        };
    };
    return SeriesVariableWindowIterator;
}();
//
var SeriesVariableWindowIterable = /** @class */ function() {
    function SeriesVariableWindowIterable(iterable, comparer) {
        this.iterable = iterable;
        this.comparer = comparer;
    }
    SeriesVariableWindowIterable.prototype[Symbol.iterator] = function() {
        return new SeriesVariableWindowIterator(this.iterable, this.comparer);
    };
    return SeriesVariableWindowIterable;
}();
//
var Direction;
(function(Direction) {
    Direction[Direction["Ascending"] = 0] = "Ascending";
    Direction[Direction["Descending"] = 1] = "Descending";
})(Direction || (Direction = {}));
var SortOperation = /** @class */ function() {
    function SortOperation(values, sortSpec) {
        this.values = values;
        this.sortSpec = sortSpec;
        this.keys = [];
    }
    SortOperation.prototype.genKeys = function() {
        if (this.keys.length > 0) // Already cached.
        return;
        var index = 0;
        try {
            for(var _a = __values(this.values), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                this.keys.push(this.sortSpec.selector(value, index));
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        var e_1, _c;
    };
    SortOperation.prototype.compare = function(indexA, indexB) {
        this.genKeys();
        var keyA = this.keys[indexA];
        var keyB = this.keys[indexB];
        var comparison = -1;
        if (keyA === keyB) comparison = 0;
        else if (keyA > keyB) comparison = 1;
        return this.sortSpec.direction === Direction.Descending ? -comparison : comparison;
    };
    return SortOperation;
}();
var OrderedIterable = /** @class */ function() {
    function OrderedIterable(iterable, sortSpec) {
        this.iterable = iterable;
        this.sortSpec = sortSpec;
    }
    OrderedIterable.prototype[Symbol.iterator] = function() {
        var indexes = [];
        var values = [];
        var index = 0;
        try {
            for(var _a = __values(this.iterable), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                indexes.push(index);
                values.push(value);
                ++index;
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
        var sortOperations = [];
        try {
            for(var _d = __values(this.sortSpec), _e = _d.next(); !_e.done; _e = _d.next()){
                var sortSpec = _e.value;
                sortOperations.push(new SortOperation(values, sortSpec));
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
        sortOperations[0].genKeys();
        indexes.sort(function(indexA, indexB) {
            try {
                for(var sortOperations_1 = __values(sortOperations), sortOperations_1_1 = sortOperations_1.next(); !sortOperations_1_1.done; sortOperations_1_1 = sortOperations_1.next()){
                    var sortOperation = sortOperations_1_1.value;
                    var comparison = sortOperation.compare(indexA, indexB);
                    if (comparison !== 0) return comparison;
                }
            } catch (e_4_1) {
                e_4 = {
                    error: e_4_1
                };
            } finally{
                try {
                    if (sortOperations_1_1 && !sortOperations_1_1.done && (_a = sortOperations_1.return)) _a.call(sortOperations_1);
                } finally{
                    if (e_4) throw e_4.error;
                }
            }
            var e_4, _a;
            return 0;
        });
        var sortedValues = [];
        try {
            for(var indexes_1 = __values(indexes), indexes_1_1 = indexes_1.next(); !indexes_1_1.done; indexes_1_1 = indexes_1.next()){
                var index_1 = indexes_1_1.value;
                sortedValues.push(values[index_1]);
            }
        } catch (e_5_1) {
            e_5 = {
                error: e_5_1
            };
        } finally{
            try {
                if (indexes_1_1 && !indexes_1_1.done && (_g = indexes_1.return)) _g.call(indexes_1);
            } finally{
                if (e_5) throw e_5.error;
            }
        }
        var e_2, _c, e_3, _f, e_5, _g;
        return new ArrayIterator(sortedValues);
    };
    return OrderedIterable;
}();
//
// An iterator to extact an element from an array.
//
var ExtractElementIterator = /** @class */ function() {
    function ExtractElementIterator(iterator, extractIndex) {
        this.iterator = iterator;
        this.extractIndex = extractIndex;
    }
    ExtractElementIterator.prototype.next = function() {
        var result = this.iterator.next();
        if (result.done) return result;
        else return {
            done: false,
            value: result.value[this.extractIndex]
        };
    };
    return ExtractElementIterator;
}();
//
var ExtractElementIterable = /** @class */ function() {
    function ExtractElementIterable(arrayIterable, extractIndex) {
        this.arrayIterable = arrayIterable;
        this.extractIndex = extractIndex;
    }
    ExtractElementIterable.prototype[Symbol.iterator] = function() {
        var arrayIterator = this.arrayIterable[Symbol.iterator]();
        return new ExtractElementIterator(arrayIterator, this.extractIndex);
    };
    return ExtractElementIterable;
}();
//
// An iterator that skips a number of values.
//
var SkipIterator = /** @class */ function() {
    function SkipIterator(iterator, numValues) {
        this.iterator = iterator;
        this.numValues = numValues;
    }
    SkipIterator.prototype.next = function() {
        while(--this.numValues >= 0){
            var result = this.iterator.next();
            if (result.done) return result;
        }
        return this.iterator.next();
    };
    return SkipIterator;
}();
//
var SkipIterable = /** @class */ function() {
    function SkipIterable(iterable, numValues) {
        this.iterable = iterable;
        this.numValues = numValues;
    }
    SkipIterable.prototype[Symbol.iterator] = function() {
        var iterator = this.iterable[Symbol.iterator]();
        return new SkipIterator(iterator, this.numValues);
    };
    return SkipIterable;
}();
//
// An iterator that skips a sequence of elements while a predicate function returns true.
//
var SkipWhileIterator = /** @class */ function() {
    function SkipWhileIterator(childIterator, predicate) {
        this.doneSkipping = false;
        this.childIterator = childIterator;
        this.predicate = predicate;
    }
    SkipWhileIterator.prototype.next = function() {
        // eslint-disable-next-line no-constant-condition
        while(true){
            var result = this.childIterator.next();
            if (result.done) return result; // Done.
            if (!this.doneSkipping && this.predicate(result.value)) continue; // Skip it.
            // It matches, stop skipping.
            this.doneSkipping = true;
            return result;
        }
    };
    return SkipWhileIterator;
}();
//
var SkipWhileIterable = /** @class */ function() {
    function SkipWhileIterable(childIterable, predicate) {
        this.childIterable = childIterable;
        this.predicate = predicate;
    }
    SkipWhileIterable.prototype[Symbol.iterator] = function() {
        var childIterator = this.childIterable[Symbol.iterator]();
        return new SkipWhileIterator(childIterator, this.predicate);
    };
    return SkipWhileIterable;
}();
//
var DataFrameWindowIterator = /** @class */ function() {
    function DataFrameWindowIterator(columnNames, iterable, period) {
        this.columnNames = columnNames;
        this.iterable = iterable;
        this.period = period;
    }
    DataFrameWindowIterator.prototype.next = function() {
        if (!this.iterator) this.iterator = this.iterable[Symbol.iterator]();
        var curWindow = [];
        for(var i = 0; i < this.period; ++i){
            var curPos = this.iterator.next();
            if (curPos.done) break;
            curWindow.push(curPos.value);
        }
        if (curWindow.length === 0) // Underlying iterator doesn't have required number of elements.
        return {
            done: true
        };
        var window = new DataFrame({
            columnNames: this.columnNames,
            pairs: curWindow
        });
        return {
            value: window,
            done: false
        };
    };
    return DataFrameWindowIterator;
}();
//
var DataFrameWindowIterable = /** @class */ function() {
    function DataFrameWindowIterable(columnNames, iterable, period) {
        this.columnNames = columnNames;
        this.iterable = iterable;
        this.period = period;
    }
    DataFrameWindowIterable.prototype[Symbol.iterator] = function() {
        return new DataFrameWindowIterator(this.columnNames, this.iterable, this.period);
    };
    return DataFrameWindowIterable;
}();
//
// An iterator that iterates the rows of a CSV file.
//
var CsvRowsIterator = /** @class */ function() {
    function CsvRowsIterator(columnNames, rowsIterable) {
        this.index = 0;
        this.columnNames = Array.from(columnNames);
        this.rowsIterator = rowsIterable[Symbol.iterator]();
    }
    CsvRowsIterator.prototype.next = function() {
        var result = this.rowsIterator.next();
        if (result.done) // https://github.com/Microsoft/TypeScript/issues/8938
        return {
            done: true
        }; // <= explicit cast here!;
        var row = result.value;
        var value = {};
        for(var cellIndex = 0; cellIndex < this.columnNames.length; ++cellIndex){
            var columnName = this.columnNames[cellIndex];
            value[columnName] = row[cellIndex];
        }
        return {
            done: false,
            value: value
        };
    };
    return CsvRowsIterator;
}();
//
var CsvRowsIterable = /** @class */ function() {
    function CsvRowsIterable(columnNames, rows) {
        this.columnNames = columnNames;
        this.rows = rows;
    }
    CsvRowsIterable.prototype[Symbol.iterator] = function() {
        return new CsvRowsIterator(this.columnNames, this.rows);
    };
    return CsvRowsIterable;
}();
//
var DataFrameRollingWindowIterator = /** @class */ function() {
    function DataFrameRollingWindowIterator(columnNames, iterable, period) {
        this.columnNames = columnNames;
        this.iterable = iterable;
        this.period = period;
    }
    DataFrameRollingWindowIterator.prototype.next = function() {
        if (!this.curWindow) {
            this.curWindow = [];
            this.iterator = this.iterable[Symbol.iterator]();
            for(var i = 0; i < this.period; ++i){
                var curPos = this.iterator.next();
                if (curPos.done) // Underlying iterator doesn't have required number of elements.
                return {
                    done: true
                };
                this.curWindow.push(curPos.value);
            }
        } else {
            this.curWindow.shift(); // Remove first item from window.
            var curPos = this.iterator.next();
            if (curPos.done) // Underlying iterator doesn't have enough elements left.
            return {
                done: true
            };
            this.curWindow.push(curPos.value); // Add next item to window.
        }
        var window = new DataFrame({
            columnNames: this.columnNames,
            pairs: this.curWindow
        });
        return {
            value: window,
            done: false
        };
    };
    return DataFrameRollingWindowIterator;
}();
//
var DataFrameRollingWindowIterable = /** @class */ function() {
    function DataFrameRollingWindowIterable(columnNames, iterable, period) {
        this.columnNames = columnNames;
        this.iterable = iterable;
        this.period = period;
    }
    DataFrameRollingWindowIterable.prototype[Symbol.iterator] = function() {
        return new DataFrameRollingWindowIterator(this.columnNames, this.iterable, this.period);
    };
    return DataFrameRollingWindowIterable;
}();
//
var DataFrameVariableWindowIterator = /** @class */ function() {
    function DataFrameVariableWindowIterator(columnNames, iterable, comparer) {
        this.columnNames = columnNames;
        this.iterator = iterable[Symbol.iterator]();
        this.nextValue = this.iterator.next();
        this.comparer = comparer;
    }
    DataFrameVariableWindowIterator.prototype.next = function() {
        if (this.nextValue.done) // Nothing more to read.
        // https://github.com/Microsoft/TypeScript/issues/8938
        return {
            done: true
        }; // <= explicit cast here!;
        var pairs = [
            this.nextValue.value
        ];
        var prevValue = this.nextValue.value;
        // Pull values until there is one that doesn't compare.
        // eslint-disable-next-line no-constant-condition
        while(true){
            this.nextValue = this.iterator.next();
            if (this.nextValue.done) break; // No more values.
            if (!this.comparer(prevValue[1], this.nextValue.value[1])) {
                prevValue = this.nextValue.value;
                break; // Doesn't compare. Start a new window.
            }
            pairs.push(this.nextValue.value);
            prevValue = this.nextValue.value;
        }
        var window = new DataFrame({
            columnNames: this.columnNames,
            pairs: pairs
        });
        return {
            value: window,
            done: false
        };
    };
    return DataFrameVariableWindowIterator;
}();
//
var DataFrameVariableWindowIterable = /** @class */ function() {
    function DataFrameVariableWindowIterable(columnNames, iterable, comparer) {
        this.columnNames = columnNames;
        this.iterable = iterable;
        this.comparer = comparer;
    }
    DataFrameVariableWindowIterable.prototype[Symbol.iterator] = function() {
        return new DataFrameVariableWindowIterator(this.columnNames, this.iterable, this.comparer);
    };
    return DataFrameVariableWindowIterable;
}();
//
// An iterator that iterates the elements of an iterable multiple times.
// Implementation similar to https://numpy.org/doc/stable/reference/generated/numpy.repeat.html
//
var RepeatIterator = /** @class */ function() {
    function RepeatIterator(iterable, count) {
        this.repetition = 0;
        this.iterator = iterable[Symbol.iterator]();
        this.count = count;
        this.result = this.iterator.next();
    }
    RepeatIterator.prototype.next = function() {
        if (this.count == 0) return {
            done: true
        };
        if (this.repetition == this.count) {
            this.result = this.iterator.next();
            this.repetition = 0;
        }
        this.repetition += 1;
        if (this.result.done) // https://github.com/Microsoft/TypeScript/issues/8938
        return {
            done: true
        }; // <= explicit cast here!;
        return {
            done: false,
            value: this.result.value
        };
    };
    return RepeatIterator;
}();
//
var RepeatIterable = /** @class */ function() {
    function RepeatIterable(iterable, count) {
        this.iterable = iterable;
        this.count = count;
    }
    RepeatIterable.prototype[Symbol.iterator] = function() {
        return new RepeatIterator(this.iterable, this.count);
    };
    return RepeatIterable;
}();
//
// An iterator that iterates the elements of an iterable multiple times.
// Implementation similar to - https://numpy.org/doc/stable/reference/generated/numpy.tile.html
//
var TileIterator = /** @class */ function() {
    function TileIterator(iterable, count) {
        this.count = 0;
        this.repetition = 0;
        this.firstIteration = true;
        this.iterable = iterable;
        this.iterator = iterable[Symbol.iterator]();
        this.count = count;
    }
    TileIterator.prototype.next = function() {
        var result = this.iterator.next();
        // Return done for empty iterable
        if (this.firstIteration && result.done) return {
            done: true
        };
        this.firstIteration = false;
        if (result.done) {
            this.repetition += 1;
            // Reinitialize iterator once iterated completely
            this.iterator = this.iterable[Symbol.iterator]();
            result = this.iterator.next();
        }
        if (this.repetition < this.count) return {
            done: false,
            value: result.value
        };
        else // https://github.com/Microsoft/TypeScript/issues/8938
        return {
            done: true
        }; // <= explicit cast here!;
    };
    return TileIterator;
}();
//
var TileIterable = /** @class */ function() {
    function TileIterable(iterable, count) {
        this.iterable = iterable;
        this.count = count;
    }
    TileIterable.prototype[Symbol.iterator] = function() {
        return new TileIterator(this.iterable, this.count);
    };
    return TileIterable;
}();
//
// An iterator that produces a contiguous flattened array generated from each set of elements in child iterables.
// Implementation similar to https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html with order 'C'
//
// Note that numpy does not work with arrays of varying lengths. However, the dataforge implementation ignores
// that requirement due to the iterator architecture. Moreover, since the RavelIterator is only used internally
// such cases will not occur.
//
var RavelIterator = /** @class */ function() {
    function RavelIterator(iterables) {
        this.iteratorIndex = 0;
        this.iterators = iterables.map(function(iterable) {
            return iterable[Symbol.iterator]();
        });
    }
    RavelIterator.prototype.next = function() {
        if (this.iterators.length > 0) {
            var result = this.iterators[this.iteratorIndex].next();
            while(result.done){
                this.iteratorIndex += 1;
                if (this.iteratorIndex < this.iterators.length) result = this.iterators[this.iteratorIndex].next();
                else // https://github.com/Microsoft/TypeScript/issues/8938
                return {
                    done: true
                }; // <= explicit cast here!;
            }
            return {
                done: false,
                value: result.value
            };
        }
        // Return done if empty array passed
        return {
            done: true
        };
    };
    return RavelIterator;
}();
//
var RavelIterable = /** @class */ function() {
    function RavelIterable(iterables) {
        this.iterables = iterables;
    }
    RavelIterable.prototype[Symbol.iterator] = function() {
        return new RavelIterator(this.iterables);
    };
    return RavelIterable;
}();
//
var ColumnNamesIterator = /** @class */ function() {
    function ColumnNamesIterator(values, considerAllRows) {
        this.columnNamesIterator = null;
        this.values = values;
        this.considerAllRows = considerAllRows;
    }
    ColumnNamesIterator.prototype.next = function() {
        if (this.columnNamesIterator === null) {
            if (this.considerAllRows) {
                var combinedFields = {};
                try {
                    // Check all items.
                    for(var _a = __values(this.values), _b = _a.next(); !_b.done; _b = _a.next()){
                        var value = _b.value;
                        try {
                            for(var _c = __values(Object.keys(value)), _d = _c.next(); !_d.done; _d = _c.next()){
                                var fieldName = _d.value;
                                combinedFields[fieldName] = true;
                            }
                        } catch (e_1_1) {
                            e_1 = {
                                error: e_1_1
                            };
                        } finally{
                            try {
                                if (_d && !_d.done && (_e = _c.return)) _e.call(_c);
                            } finally{
                                if (e_1) throw e_1.error;
                            }
                        }
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally{
                    try {
                        if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                    } finally{
                        if (e_2) throw e_2.error;
                    }
                }
                this.columnNamesIterator = new ArrayIterator(Object.keys(combinedFields));
            } else {
                // Just check the first item.
                var valuesIterator = this.values[Symbol.iterator]();
                var firstResult = valuesIterator.next();
                if (firstResult.done) return {
                    done: true,
                    value: ""
                };
                this.columnNamesIterator = new ArrayIterator(Object.keys(firstResult.value));
            }
        }
        var e_2, _f, e_1, _e;
        return this.columnNamesIterator.next();
    };
    return ColumnNamesIterator;
}();
//
var ColumnNamesIterable = /** @class */ function() {
    function ColumnNamesIterable(values, considerAllRows) {
        this.values = values;
        this.considerAllRows = considerAllRows;
    }
    ColumnNamesIterable.prototype[Symbol.iterator] = function() {
        return new ColumnNamesIterator(this.values, this.considerAllRows);
    };
    return ColumnNamesIterable;
}();
//
// Helper function to only return distinct items.
//
function makeDistinct(items, selector) {
    var set = {};
    var output = [];
    try {
        for(var items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()){
            var item = items_1_1.value;
            var key = selector && selector(item) || item;
            if (!set[key]) {
                // Haven't yet seen this key.
                set[key] = true;
                output.push(item);
            }
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    var e_1, _a;
    return output;
}
//
// Helper function to map an array of objects.
//
function toMap(items, keySelector, valueSelector) {
    var output = {};
    try {
        for(var items_2 = __values(items), items_2_1 = items_2.next(); !items_2_1.done; items_2_1 = items_2.next()){
            var item = items_2_1.value;
            var key = keySelector(item);
            output[key] = valueSelector(item);
        }
    } catch (e_2_1) {
        e_2 = {
            error: e_2_1
        };
    } finally{
        try {
            if (items_2_1 && !items_2_1.done && (_a = items_2.return)) _a.call(items_2);
        } finally{
            if (e_2) throw e_2.error;
        }
    }
    var e_2, _a;
    return output;
}
//
// Helper function to map an array of objects.
//
function toMap2(items, keySelector, valueSelector) {
    var output = new Map();
    try {
        for(var items_3 = __values(items), items_3_1 = items_3.next(); !items_3_1.done; items_3_1 = items_3.next()){
            var item = items_3_1.value;
            output.set(keySelector(item), valueSelector(item));
        }
    } catch (e_3_1) {
        e_3 = {
            error: e_3_1
        };
    } finally{
        try {
            if (items_3_1 && !items_3_1.done && (_a = items_3.return)) _a.call(items_3);
        } finally{
            if (e_3) throw e_3.error;
        }
    }
    var e_3, _a;
    return output;
}
//
// Determine the type of a value.
//
function determineType(value) {
    if (value === undefined) return "undefined";
    else if (isNumber(value)) return "number";
    else if (isString(value)) return "string";
    else if (value instanceof Date) return "date";
    else if (isBoolean(value)) return "boolean";
    else return "unsupported";
}
function isObject(v) {
    return (0, _typyDefault.default)(v).isObject && !isDate(v);
}
function isFunction(v) {
    return (0, _typyDefault.default)(v).isFunction;
}
function isString(v) {
    return (0, _typyDefault.default)(v).isString;
}
function isDate(v) {
    return Object.prototype.toString.call(v) === "[object Date]";
}
function isBoolean(v) {
    return (0, _typyDefault.default)(v).isBoolean;
}
function isNumber(v) {
    return (0, _typyDefault.default)(v).isNumber;
}
function isArray(v) {
    return (0, _typyDefault.default)(v).isArray;
}
function isUndefined(v) {
    return v === undefined;
}
//
// An iterator that iterates the a "cached iterator" iterable.
//
var CachedIterator = /** @class */ function() {
    function CachedIterator(iterable) {
        this.iterable = iterable;
        this.index = 0;
    }
    CachedIterator.prototype.next = function() {
        return this.iterable._next(this.index++);
    };
    return CachedIterator;
}();
//
var CachedIteratorIterable = /** @class */ function() {
    function CachedIteratorIterable(iterator) {
        this.iterator = iterator;
        this.cached = [];
    }
    CachedIteratorIterable.prototype[Symbol.iterator] = function() {
        return new CachedIterator(this);
    };
    //
    // Gets from the cache or populates the cache.
    //
    CachedIteratorIterable.prototype._next = function(index) {
        if (index >= this.cached.length) {
            // Beyond the cache.
            var result = this.iterator.next();
            if (result.done) // Finished.
            return {
                done: true
            }; // <= explicit cast here!;
            // Cache result and return it.
            this.cached.push(result.value);
        }
        return {
            done: false,
            value: this.cached[index]
        };
    };
    return CachedIteratorIterable;
}();
/**
 * Class that represents a dataframe.
 * A dataframe contains an indexed sequence of data records.
 * Think of it as a spreadsheet or CSV file in memory.
 *
 * Each data record contains multiple named fields, the value of each field represents one row in a column of data.
 * Each column of data is a named {@link Series}.
 * You think of a dataframe a collection of named data series.
 *
 * @typeparam IndexT The type to use for the index.
 * @typeparam ValueT The type to use for each row/data record.
 */ var DataFrame = /** @class */ function() {
    /**
     * Create a dataframe.
     *
     * @param config This can be an array, a configuration object or a function that lazily produces a configuration object.
     *
     * It can be an array that specifies the data records that the dataframe contains.
     *
     * It can be a {@link IDataFrameConfig} that defines the data and configuration of the dataframe.
     *
     * Or it can be a function that lazily produces a {@link IDataFrameConfig}.
     *
     * @example
     * <pre>
     *
     * const df = new DataFrame();
     * </pre>
     *
     * @example
     * <pre>
     *
     * const df = new DataFrame([ { A: 10 }, { A: 20 }, { A: 30 }, { A: 40 }]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const df = new DataFrame({ index: [1, 2, 3, 4], values: [ { A: 10 }, { A: 20 }, { A: 30 }, { A: 40 }] });
     * </pre>
     *
     * @example
     * <pre>
     *
     * const lazyInit = () => ({ index: [1, 2, 3, 4], values: [ { A: 10 }, { A: 20 }, { A: 30 }, { A: 40 }] });
     * const df = new DataFrame(lazyInit);
     * </pre>
     */ function DataFrame(config) {
        //
        // Function to lazy evaluate the configuration of the dataframe.
        //
        this.configFn = null;
        //
        // The content of the dataframe.
        // When this is null it means the dataframe is yet to be lazy initialised.
        //
        this.content = null;
        // 
        // Indexed content of the dataframe.
        // 
        this.indexedContent = null;
        if (config) {
            var configAsAny = config;
            if (configAsAny.getTypeCode !== undefined) {
                var typeCode = configAsAny.getTypeCode();
                if (typeCode === "dataframe" || typeCode === "series") {
                    if (configAsAny.content !== undefined) this.content = configAsAny.content;
                    else this.configFn = configAsAny.configFn;
                    return;
                }
            }
            if (isFunction(config)) this.configFn = config;
            else if (DataFrame.isIterator(config)) this.content = DataFrame.initFromIterator(config);
            else if (DataFrame.isIterable(config)) this.content = DataFrame.initFromIterable(config);
            else this.content = DataFrame.initFromConfig(config);
        } else this.content = DataFrame.initEmpty();
    }
    //
    // Initialise a series from an iterator (or generator object).
    //
    DataFrame.initFromIterator = function(iterator) {
        return DataFrame.initFromIterable(new CachedIteratorIterable(iterator));
    };
    //
    // Initialise dataframe content from an iterable of values.
    //
    DataFrame.initFromIterable = function(arr) {
        var firstResult = arr[Symbol.iterator]().next();
        var columnNames = !firstResult.done ? Object.keys(firstResult.value) : [];
        return {
            index: DataFrame.defaultCountIterable,
            values: arr,
            pairs: new MultiIterable([
                DataFrame.defaultCountIterable,
                arr
            ]),
            isBaked: true,
            columnNames: columnNames,
            isCaseSensitive: false
        };
    };
    //
    // Initialise an empty dataframe.
    //
    DataFrame.initEmpty = function() {
        return {
            index: DataFrame.defaultEmptyIterable,
            values: DataFrame.defaultEmptyIterable,
            pairs: DataFrame.defaultEmptyIterable,
            isBaked: true,
            columnNames: [],
            isCaseSensitive: false
        };
    };
    //
    // Initialise dataframe column names.
    //
    DataFrame.initColumnNames = function(inputColumnNames, isCaseSensitive) {
        var outputColumnNames = [];
        var columnNamesMap = {};
        // Convert column names to strings.
        var columnNames = Array.from(inputColumnNames).map(function(columnName) {
            return columnName.toString();
        });
        try {
            // Search for duplicate column names.
            for(var columnNames_1 = __values(columnNames), columnNames_1_1 = columnNames_1.next(); !columnNames_1_1.done; columnNames_1_1 = columnNames_1.next()){
                var columnName = columnNames_1_1.value;
                var columnNameLwr = isCaseSensitive !== undefined && isCaseSensitive ? columnName : columnName.toLowerCase();
                if (columnNamesMap[columnNameLwr] === undefined) columnNamesMap[columnNameLwr] = 1;
                else columnNamesMap[columnNameLwr] += 1;
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (columnNames_1_1 && !columnNames_1_1.done && (_a = columnNames_1.return)) _a.call(columnNames_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        var columnNoMap = {};
        try {
            for(var columnNames_2 = __values(columnNames), columnNames_2_1 = columnNames_2.next(); !columnNames_2_1.done; columnNames_2_1 = columnNames_2.next()){
                var columnName = columnNames_2_1.value;
                var columnNameLwr = isCaseSensitive !== undefined && isCaseSensitive ? columnName : columnName.toLowerCase();
                if (columnNamesMap[columnNameLwr] > 1) {
                    var curColumnNo = 1;
                    // There are duplicates of this column.
                    if (columnNoMap[columnNameLwr] !== undefined) curColumnNo = columnNoMap[columnNameLwr];
                    outputColumnNames.push(columnName + "." + curColumnNo);
                    columnNoMap[columnNameLwr] = curColumnNo + 1;
                } else // No duplicates.
                outputColumnNames.push(columnName);
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (columnNames_2_1 && !columnNames_2_1.done && (_b = columnNames_2.return)) _b.call(columnNames_2);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
        var e_1, _a, e_2, _b;
        return outputColumnNames;
    };
    //
    // Returns true if the input is an iterator.
    //
    DataFrame.isIterator = function(input) {
        return isObject(input) && isFunction(input.next);
    };
    //
    // Returns true if the input is an iterable.
    //
    DataFrame.isIterable = function(input) {
        return isArray(input) || isObject(input) && isFunction(input[Symbol.iterator]);
    };
    //
    // Check that a value is an interable.
    //
    DataFrame.checkIterable = function(input, fieldName) {
        if (DataFrame.isIterable(input)) ;
        else // Not ok
        throw new Error("Expected '" + fieldName + "' field of DataFrame config object to be an array of values or an iterable of values.");
    };
    //
    // Initialise dataframe content from a config object.
    //
    DataFrame.initFromConfig = function(config) {
        var index;
        var values;
        var pairs;
        var isBaked = false;
        var columnNames;
        if (config.pairs) {
            if (DataFrame.isIterator(config.pairs)) pairs = new CachedIteratorIterable(config.pairs);
            else {
                DataFrame.checkIterable(config.pairs, "pairs");
                pairs = config.pairs;
            }
        }
        if (config.columns) {
            var columnsConfig = config.columns;
            if (DataFrame.isIterator(columnsConfig)) columnsConfig = new CachedIteratorIterable(columnsConfig);
            if (DataFrame.isIterable(columnsConfig)) {
                var iterableColumnsConfig = columnsConfig;
                columnNames = Array.from(iterableColumnsConfig).map(function(column) {
                    return column.name;
                });
                columnsConfig = toMap(iterableColumnsConfig, function(column) {
                    return column.name;
                }, function(column) {
                    return column.series;
                });
            } else {
                if (!isObject(columnsConfig)) throw new Error("Expected 'columns' member of 'config' parameter to DataFrame constructor to be an object with fields that define columns.");
                columnNames = Object.keys(columnsConfig);
            }
            var columnIterables = [];
            try {
                for(var columnNames_3 = __values(columnNames), columnNames_3_1 = columnNames_3.next(); !columnNames_3_1.done; columnNames_3_1 = columnNames_3.next()){
                    var columnName = columnNames_3_1.value;
                    var columnConfig = columnsConfig[columnName];
                    if (DataFrame.isIterator(columnConfig)) columnConfig = new CachedIteratorIterable(columnConfig);
                    else DataFrame.checkIterable(columnConfig, columnName);
                    columnIterables.push(columnConfig);
                }
            } catch (e_3_1) {
                e_3 = {
                    error: e_3_1
                };
            } finally{
                try {
                    if (columnNames_3_1 && !columnNames_3_1.done && (_a = columnNames_3.return)) _a.call(columnNames_3);
                } finally{
                    if (e_3) throw e_3.error;
                }
            }
            values = new CsvRowsIterable(columnNames, new MultiIterable(columnIterables));
        } else {
            if (config.columnNames) {
                if (DataFrame.isIterator(config.columnNames)) columnNames = new CachedIteratorIterable(config.columnNames);
                else columnNames = config.columnNames;
                columnNames = this.initColumnNames(columnNames, config.caseSensitive);
            }
            if (config.rows) {
                if (!config.columnNames) columnNames = new SelectIterable(new CountIterable(), function(c) {
                    return "Column." + c.toString();
                });
                var rows = void 0;
                if (DataFrame.isIterator(config.rows)) rows = new CachedIteratorIterable(config.rows);
                else {
                    DataFrame.checkIterable(config.rows, "rows");
                    rows = config.rows;
                }
                values = new CsvRowsIterable(columnNames, rows); // Convert data from rows to columns.
            } else if (config.values) {
                if (DataFrame.isIterator(config.values)) values = new CachedIteratorIterable(config.values);
                else {
                    DataFrame.checkIterable(config.values, "values");
                    values = config.values;
                }
                if (!config.columnNames) columnNames = new ColumnNamesIterable(values, config.considerAllRows || false);
            } else if (pairs) {
                values = new ExtractElementIterable(pairs, 1);
                if (!config.columnNames) columnNames = new ColumnNamesIterable(values, config.considerAllRows || false);
            } else {
                values = DataFrame.defaultEmptyIterable;
                if (!config.columnNames) columnNames = DataFrame.defaultEmptyIterable;
            }
        }
        if (config.index) {
            if (DataFrame.isIterator(config.index)) index = new CachedIteratorIterable(config.index);
            else {
                DataFrame.checkIterable(config.index, "index");
                index = config.index;
            }
        } else if (pairs) index = new ExtractElementIterable(pairs, 0);
        else index = DataFrame.defaultCountIterable;
        if (!pairs) pairs = new MultiIterable([
            index,
            values
        ]);
        if (config.baked !== undefined) isBaked = config.baked;
        var e_3, _a;
        return {
            index: index,
            values: values,
            pairs: pairs,
            isBaked: isBaked,
            columnNames: columnNames,
            isCaseSensitive: config.caseSensitive || false
        };
    };
    //
    // Ensure the dataframe content has been initialised.
    //
    DataFrame.prototype.lazyInit = function() {
        if (this.content === null && this.configFn !== null) this.content = DataFrame.initFromConfig(this.configFn());
    };
    //
    // Ensure the dataframe content is lazy initialised and return it.
    //
    DataFrame.prototype.getContent = function() {
        this.lazyInit();
        return this.content;
    };
    // 
    // Lazy builds content index, does basic hash lookup.
    //
    DataFrame.prototype.getRowByIndex = function(index) {
        if (!this.indexedContent) {
            this.indexedContent = new Map();
            try {
                for(var _a = __values(this.getContent().pairs), _b = _a.next(); !_b.done; _b = _a.next()){
                    var pair = _b.value;
                    this.indexedContent.set(pair[0], pair[1]);
                }
            } catch (e_4_1) {
                e_4 = {
                    error: e_4_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_4) throw e_4.error;
                }
            }
        }
        var e_4, _c;
        return this.indexedContent.get(index);
    };
    /**
     * Get an iterator to enumerate the rows of the dataframe.
     * Enumerating the iterator forces lazy evaluation to complete.
     * This function is automatically called by `for...of`.
     *
     * @return An iterator for the dataframe.
     *
     * @example
     * <pre>
     *
     * for (const row of df) {
     *     // ... do something with the row ...
     * }
     * </pre>
     */ DataFrame.prototype[Symbol.iterator] = function() {
        return this.getContent().values[Symbol.iterator]();
    };
    /**
     * Get the names of the columns in the dataframe.
     *
     * @return Returns an array of the column names in the dataframe.
     *
     * @example
     * <pre>
     *
     * console.log(df.getColumnNames());
     * </pre>
     */ DataFrame.prototype.getColumnNames = function() {
        return Array.from(this.getContent().columnNames);
    };
    /**
     * Retreive the collection of all columns in the dataframe.
     *
     * @return Returns a {@link Series} containing the names of the columns in the dataframe.
     *
     * @example
     * <pre>
     *
     * for (const column in df.getColumns()) {
     *      console.log("Column name: ");
     *      console.log(column.name);
     *
     *      console.log("Data:");
     *      console.log(column.series.toArray());
     * }
     * </pre>
     */ DataFrame.prototype.getColumns = function() {
        var _this = this;
        return new Series(function() {
            var columnNames = _this.getColumnNames();
            return {
                values: columnNames.map(function(columnName) {
                    var series = _this.getSeries(columnName).skipWhile(function(value) {
                        return value === undefined || value === null;
                    });
                    var firstValue = series.any() ? series.first() : undefined;
                    return {
                        name: columnName,
                        type: determineType(firstValue),
                        series: series
                    };
                })
            };
        });
    };
    /**
     * Returns true if the dataframe is case sensitive or false if case insensitive.
     *
     * @return true if the dataframe is case sensitive, otherwise false.
     */ DataFrame.prototype.isCaseSensitive = function() {
        return this.getContent().isCaseSensitive;
    };
    /**
     * Cast the value of the dataframe to a new type.
     * This operation has no effect but to retype the value that the dataframe contains.
     *
     * @return The same dataframe, but with the type changed.
     *
     * @example
     * <pre>
     *
     * const castDf = df.cast<SomeOtherType>();
     * </pre>
     */ DataFrame.prototype.cast = function() {
        return this;
    };
    /**
     * Get the index for the dataframe.
     *
     * @return The {@link Index} for the dataframe.
     *
     * @example
     * <pre>
     *
     * const index = df.getIndex();
     * </pre>
     */ DataFrame.prototype.getIndex = function() {
        var _this = this;
        return new Index(function() {
            return {
                values: _this.getContent().index
            };
        });
    };
    /**
     * Set a named column as the {@link Index} of the dataframe.
     *
     * @param columnName Name of the column to use as the new {@link Index} of the returned dataframe.
     *
     * @return Returns a new dataframe with the values of the specified column as the new {@link Index}.
     *
     * @example
     * <pre>
     *
     * const indexedDf = df.setIndex("SomeColumn");
     * </pre>
     */ DataFrame.prototype.setIndex = function(columnName) {
        if (!isString(columnName)) throw new Error("Expected 'columnName' parameter to 'DataFrame.setIndex' to be a string that specifies the name of the column to set as the index for the dataframe.");
        return this.withIndex(this.getSeries(columnName));
    };
    /**
     * Apply a new {@link Index} to the dataframe.
     *
     * @param newIndex The new array or iterable to be the new {@link Index} of the dataframe. Can also be a selector to choose the {@link Index} for each row in the dataframe.
     *
     * @return Returns a new dataframe or dataframe with the specified {@link Index} attached.
     *
     * @example
     * <pre>
     *
     * const indexedDf = df.withIndex([10, 20, 30]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const indexedDf = df.withIndex(df.getSeries("SomeColumn"));
     * </pre>
     *
     * @example
     * <pre>
     *
     * const indexedDf = df.withIndex(row => row.SomeColumn);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const indexedDf = df.withIndex(row => row.SomeColumn + 20);
     * </pre>
     */ DataFrame.prototype.withIndex = function(newIndex) {
        var _this = this;
        if (isFunction(newIndex)) return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: content.columnNames,
                values: content.values,
                index: _this.deflate(newIndex)
            };
        });
        else {
            DataFrame.checkIterable(newIndex, "newIndex");
            return new DataFrame(function() {
                var content = _this.getContent();
                return {
                    columnNames: content.columnNames,
                    values: content.values,
                    index: newIndex
                };
            });
        }
    };
    /**
     * Resets the {@link Index} of the dataframe back to the default zero-based sequential integer index.
     *
     * @return Returns a new dataframe with the {@link Index} reset to the default zero-based index.
     *
     * @example
     * <pre>
     *
     * const dfWithResetIndex = df.resetIndex();
     * </pre>
     */ DataFrame.prototype.resetIndex = function() {
        var _this = this;
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: content.columnNames,
                values: content.values
            };
        });
    };
    /**
     * Extract a {@link Series} from a named column in the dataframe.
     *
     * @param columnName Specifies the name of the column that contains the {@link Series} to retreive.
     *
     * @return Returns the {@link Series} extracted from the named column in the dataframe.
     *
     * @example
     * <pre>
     *
     * const series = df.getSeries("SomeColumn");
     * </pre>
     */ DataFrame.prototype.getSeries = function(columnName) {
        var _this = this;
        if (!isString(columnName)) throw new Error("Expected 'columnName' parameter to 'DataFrame.getSeries' function to be a string that specifies the name of the column to retreive.");
        return new Series(function() {
            return {
                values: new SelectIterable(_this.getContent().values, function(row) {
                    return row[columnName];
                }),
                index: _this.getContent().index
            };
        });
    };
    /**
     * Determine if the dataframe contains a {@link Series} the specified named column.
     *
     * @param columnName Name of the column to check for.
     *
     * @return Returns true if the dataframe contains the requested {@link Series}, otherwise returns false.
     *
     * @example
     * <pre>
     *
     * if (df.hasSeries("SomeColumn")) {
     *      // ... the dataframe contains a series with the specified column name ...
     * }
     * </pre>
     */ DataFrame.prototype.hasSeries = function(columnName) {
        var columnNameLwr = columnName.toLowerCase();
        try {
            for(var _a = __values(this.getColumnNames()), _b = _a.next(); !_b.done; _b = _a.next()){
                var existingColumnName = _b.value;
                if (existingColumnName.toLowerCase() === columnNameLwr) return true;
            }
        } catch (e_5_1) {
            e_5 = {
                error: e_5_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_5) throw e_5.error;
            }
        }
        var e_5, _c;
        return false;
    };
    /**
     * Verify the existence of a name column and extracts the {@link Series} for it.
     * Throws an exception if the requested column doesn't exist.
     *
     * @param columnName Name of the column to extract.
     *
     * @return Returns the {@link Series} for the column if it exists, otherwise it throws an exception.
     *
     * @example
     * <pre>
     *
     * try {
     *      const series = df.expectSeries("SomeColumn");
     *      // ... do something with the series ...
     * }
     * catch (err) {
     *      // ... the dataframe doesn't contain the column "SomeColumn" ...
     * }
     * </pre>
     */ DataFrame.prototype.expectSeries = function(columnName) {
        if (!this.hasSeries(columnName)) throw new Error("Expected dataframe to contain series with column name: '" + columnName + "'.");
        return this.getSeries(columnName);
    };
    /**
     * Create a new dataframe with a replaced or additional column specified by the passed-in series.
     *
     * @param columnNameOrSpec The name of the column to add or replace or a {@link IColumnGenSpec} that defines the columns to add.
     * @param series When columnNameOrSpec is a string that identifies the column to add, this specifies the {@link Series} to add to the dataframe or a function that produces a series (given a dataframe).
     *
     * @return Returns a new dataframe replacing or adding a particular named column.
     *
     * @example
     * <pre>
     *
     * const modifiedDf = df.withSeries("ANewColumn", new Series([1, 2, 3]));
     * </pre>
     *
     * @example
     * <pre>
     *
     * const modifiedDf = df.withSeries("ANewColumn", df =>
     *      df.getSeries("SourceData").select(aTransformation)
     * );
     * </pre>
     *
     * @example
     * <pre>
     *
     * const modifiedDf = df.withSeries({
     *      ANewColumn: new Series([1, 2, 3]),
     *      SomeOtherColumn: new Series([10, 20, 30])
     * });
     * <pre>
     *
     * @example
     * <pre>
     *
     * const modifiedDf = df.withSeries({
     *      ANewColumn: df => df.getSeries("SourceData").select(aTransformation))
     * });
     * <pre>
     */ DataFrame.prototype.withSeries = function(columnNameOrSpec, series) {
        var _this = this;
        if (!isObject(columnNameOrSpec)) {
            if (!isString(columnNameOrSpec)) throw new Error("Expected 'columnNameOrSpec' parameter to 'DataFrame.withSeries' function to be a string that specifies the column to set or replace.");
            if (!isFunction(series)) {
                if (!isObject(series)) throw new Error("Expected 'series' parameter to 'DataFrame.withSeries' to be a Series object or a function that takes a dataframe and produces a Series.");
            }
        } else {
            if (!isUndefined(series)) throw new Error("Expected 'series' parameter to 'DataFrame.withSeries' to not be set when 'columnNameOrSpec is an object.");
        }
        if (isObject(columnNameOrSpec)) {
            var columnSpec = columnNameOrSpec;
            var columnNames = Object.keys(columnSpec);
            var workingDataFrame = this;
            try {
                for(var columnNames_4 = __values(columnNames), columnNames_4_1 = columnNames_4.next(); !columnNames_4_1.done; columnNames_4_1 = columnNames_4.next()){
                    var columnName_1 = columnNames_4_1.value;
                    workingDataFrame = workingDataFrame.withSeries(columnName_1, columnSpec[columnName_1]);
                }
            } catch (e_6_1) {
                e_6 = {
                    error: e_6_1
                };
            } finally{
                try {
                    if (columnNames_4_1 && !columnNames_4_1.done && (_a = columnNames_4.return)) _a.call(columnNames_4);
                } finally{
                    if (e_6) throw e_6.error;
                }
            }
            return workingDataFrame.cast();
        }
        var columnName = columnNameOrSpec;
        if (this.none()) {
            var importSeries = void 0;
            if (isFunction(series)) importSeries = series(this);
            else importSeries = series;
            return importSeries.inflate(function(value) {
                var row = {};
                row[columnName] = value;
                return row;
            }).cast();
        }
        var e_6, _a;
        return new DataFrame(function() {
            var importSeries;
            if (isFunction(series)) importSeries = series(_this);
            else importSeries = series;
            var seriesValueMap = toMap2(importSeries.toPairs(), function(pair) {
                return pair[0];
            }, function(pair) {
                return pair[1];
            });
            var newColumnNames = makeDistinct(_this.getColumnNames().concat([
                columnName
            ]));
            return {
                columnNames: newColumnNames,
                index: _this.getContent().index,
                pairs: new SelectIterable(_this.getContent().pairs, function(pair) {
                    var index = pair[0];
                    var value = pair[1];
                    var modified = Object.assign({}, value);
                    modified[columnName] = seriesValueMap.get(index);
                    return [
                        index,
                        modified
                    ];
                })
            };
        });
    };
    /**
     * Merge multiple dataframes into a single dataframe.
     * Rows are merged by indexed.
     * Same named columns in subsequent dataframes override columns earlier dataframes.
     *
     * @param dataFrames An array or series of dataframes to merge.
     *
     * @returns The merged data frame.
     *
     * @example
     * <pre>
     *
     * const mergedDF = DataFrame.merge([df1, df2, etc]);
     * </pre>
     */ DataFrame.merge = function(dataFrames) {
        var resultIsCaseSensitive = false;
        var rowMap = new Map();
        try {
            for(var dataFrames_1 = __values(dataFrames), dataFrames_1_1 = dataFrames_1.next(); !dataFrames_1_1.done; dataFrames_1_1 = dataFrames_1.next()){
                var dataFrame = dataFrames_1_1.value;
                if (dataFrame.isCaseSensitive()) resultIsCaseSensitive = true;
                try {
                    for(var _a = __values(dataFrame.toPairs()), _b = _a.next(); !_b.done; _b = _a.next()){
                        var pair = _b.value;
                        var index = pair[0];
                        if (!rowMap.has(index)) {
                            var clone = Object.assign({}, pair[1]);
                            rowMap.set(index, clone);
                        } else rowMap.set(index, Object.assign(rowMap.get(index), pair[1]));
                    }
                } catch (e_7_1) {
                    e_7 = {
                        error: e_7_1
                    };
                } finally{
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    } finally{
                        if (e_7) throw e_7.error;
                    }
                }
            }
        } catch (e_8_1) {
            e_8 = {
                error: e_8_1
            };
        } finally{
            try {
                if (dataFrames_1_1 && !dataFrames_1_1.done && (_d = dataFrames_1.return)) _d.call(dataFrames_1);
            } finally{
                if (e_8) throw e_8.error;
            }
        }
        var allColumnNames = Array.from(dataFrames).map(function(dataFrame) {
            return dataFrame.getColumnNames();
        }).reduce(function(prev, next) {
            return prev.concat(next);
        }, []);
        var newColumnNames = makeDistinct(allColumnNames);
        var mergedPairs = Array.from(rowMap.keys()).map(function(index) {
            return [
                index,
                rowMap.get(index)
            ];
        });
        mergedPairs.sort(function(a, b) {
            if (a[0] === b[0]) return 0;
            else if (a[0] > b[0]) return 1;
            else return -1;
        });
        var e_8, _d, e_7, _c;
        return new DataFrame({
            columnNames: newColumnNames,
            pairs: mergedPairs,
            caseSensitive: resultIsCaseSensitive
        });
    };
    /**
     * Merge one or more dataframes into this dataframe.
     * Rows are merged by indexed.
     * Same named columns in subsequent dataframes override columns in earlier dataframes.
     *
     * @param otherDataFrames... One or more dataframes to merge into this dataframe.
     *
     * @returns The merged data frame.
     *
     * @example
     * <pre>
     *
     * const mergedDF = df1.merge(df2);
     * </pre>
     *
     * <pre>
     *
     * const mergedDF = df1.merge(df2, df3, etc);
     * </pre>
     */ DataFrame.prototype.merge = function() {
        var otherDataFrames = [];
        for(var _i = 0; _i < arguments.length; _i++)otherDataFrames[_i] = arguments[_i];
        return DataFrame.merge([
            this
        ].concat(otherDataFrames));
    };
    /**
     * Add a series to the dataframe, but only if it doesn't already exist.
     *
     * @param columnNameOrSpec The name of the series to add or a {@link IColumnGenSpec} that specifies the columns to add.
     * @param series If columnNameOrSpec is a string that specifies the name of the series to add, this specifies the actual {@link Series} to add or a selector that generates the series given the dataframe.
     *
     * @return Returns a new dataframe with the specified series added, if the series didn't already exist. Otherwise if the requested series already exists the same dataframe is returned.
     *
     * @example
     * <pre>
     *
     * const updatedDf = df.ensureSeries("ANewColumn", new Series([1, 2, 3]));
     * </pre>
     *
     * @example
     * <pre>
     *
     * const updatedDf = df.ensureSeries("ANewColumn", df =>
     *      df.getSeries("AnExistingSeries").select(aTransformation)
     * );
     * </pre>
     *
     * @example
     * <pre>
     *
     * const modifiedDf = df.ensureSeries({
     *      ANewColumn: new Series([1, 2, 3]),
     *      SomeOtherColumn: new Series([10, 20, 30])
     * });
     * <pre>
     *
     * @example
     * <pre>
     *
     * const modifiedDf = df.ensureSeries({
     *      ANewColumn: df => df.getSeries("SourceData").select(aTransformation))
     * });
     * <pre>
     */ DataFrame.prototype.ensureSeries = function(columnNameOrSpec, series) {
        if (!isObject(columnNameOrSpec)) {
            if (!isString(columnNameOrSpec)) throw new Error("Expected 'columnNameOrSpec' parameter to 'DataFrame.ensureSeries' function to be a string that specifies the column to set or replace.");
            if (!isFunction(series)) {
                if (!isObject(series)) throw new Error("Expected 'series' parameter to 'DataFrame.ensureSeries' to be a Series object or a function that takes a dataframe and produces a Series.");
            }
        } else {
            if (!isUndefined(series)) throw new Error("Expected 'series' parameter to 'DataFrame.ensureSeries' to not be set when 'columnNameOrSpec is an object.");
        }
        if (isObject(columnNameOrSpec)) {
            var columnSpec = columnNameOrSpec;
            var columnNames = Object.keys(columnNameOrSpec);
            var workingDataFrame = this;
            try {
                for(var columnNames_5 = __values(columnNames), columnNames_5_1 = columnNames_5.next(); !columnNames_5_1.done; columnNames_5_1 = columnNames_5.next()){
                    var columnName_2 = columnNames_5_1.value;
                    workingDataFrame = workingDataFrame.ensureSeries(columnName_2, columnSpec[columnName_2]);
                }
            } catch (e_9_1) {
                e_9 = {
                    error: e_9_1
                };
            } finally{
                try {
                    if (columnNames_5_1 && !columnNames_5_1.done && (_a = columnNames_5.return)) _a.call(columnNames_5);
                } finally{
                    if (e_9) throw e_9.error;
                }
            }
            return workingDataFrame;
        }
        var columnName = columnNameOrSpec;
        if (this.hasSeries(columnName)) return this; // Already have the series.
        else return this.withSeries(columnName, series);
        var e_9, _a;
    };
    /**
     * Create a new dataframe with just a subset of columns.
     *
     * @param columnNames Array of column names to include in the new dataframe.
     *
     * @return Returns a dataframe with a subset of columns from the original dataframe.
     *
     * @example
     * <pre>
     * const subsetDf = df.subset(["ColumnA", "ColumnB"]);
     * </pre>
     */ DataFrame.prototype.subset = function(columnNames) {
        var _this = this;
        if (!isArray(columnNames)) throw new Error("Expected 'columnNames' parameter to 'DataFrame.subset' to be an array of column names to keep.");
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: columnNames,
                index: content.index,
                values: new SelectIterable(content.values, function(value) {
                    var output = {};
                    try {
                        for(var columnNames_6 = __values(columnNames), columnNames_6_1 = columnNames_6.next(); !columnNames_6_1.done; columnNames_6_1 = columnNames_6.next()){
                            var columnName = columnNames_6_1.value;
                            output[columnName] = value[columnName];
                        }
                    } catch (e_10_1) {
                        e_10 = {
                            error: e_10_1
                        };
                    } finally{
                        try {
                            if (columnNames_6_1 && !columnNames_6_1.done && (_a = columnNames_6.return)) _a.call(columnNames_6);
                        } finally{
                            if (e_10) throw e_10.error;
                        }
                    }
                    var e_10, _a;
                    return output;
                }),
                pairs: new SelectIterable(content.pairs, function(pair) {
                    var output = {};
                    var value = pair[1];
                    try {
                        for(var columnNames_7 = __values(columnNames), columnNames_7_1 = columnNames_7.next(); !columnNames_7_1.done; columnNames_7_1 = columnNames_7.next()){
                            var columnName = columnNames_7_1.value;
                            output[columnName] = value[columnName];
                        }
                    } catch (e_11_1) {
                        e_11 = {
                            error: e_11_1
                        };
                    } finally{
                        try {
                            if (columnNames_7_1 && !columnNames_7_1.done && (_a = columnNames_7.return)) _a.call(columnNames_7);
                        } finally{
                            if (e_11) throw e_11.error;
                        }
                    }
                    var e_11, _a;
                    return [
                        pair[0],
                        output
                    ];
                })
            };
        });
    };
    /**
     * Create a new dataframe with the requested column or columns dropped.
     *
     * @param columnOrColumns Specifies the column name (a string) or columns (array of strings) to drop.
     *
     * @return Returns a new dataframe with a particular named column or columns removed.
     *
     * @example
     * <pre>
     * const modifiedDf = df.dropSeries("SomeColumn");
     * </pre>
     *
     * @example
     * <pre>
     * const modifiedDf = df.dropSeries(["ColumnA", "ColumnB"]);
     * </pre>
     */ DataFrame.prototype.dropSeries = function(columnOrColumns) {
        var _this = this;
        if (!isArray(columnOrColumns)) {
            if (!isString(columnOrColumns)) throw new Error("'DataFrame.dropSeries' expected either a string or an array or strings.");
            columnOrColumns = [
                columnOrColumns
            ]; // Convert to array for coding convenience.
        }
        return new DataFrame(function() {
            var content = _this.getContent();
            var newColumnNames = [];
            try {
                for(var _a = __values(content.columnNames), _b = _a.next(); !_b.done; _b = _a.next()){
                    var columnName = _b.value;
                    if (columnOrColumns.indexOf(columnName) === -1) newColumnNames.push(columnName); // This column is not being dropped.
                }
            } catch (e_12_1) {
                e_12 = {
                    error: e_12_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_12) throw e_12.error;
                }
            }
            var e_12, _c;
            return {
                columnNames: newColumnNames,
                index: content.index,
                values: new SelectIterable(content.values, function(value) {
                    var clone = Object.assign({}, value);
                    try {
                        for(var columnOrColumns_1 = __values(columnOrColumns), columnOrColumns_1_1 = columnOrColumns_1.next(); !columnOrColumns_1_1.done; columnOrColumns_1_1 = columnOrColumns_1.next()){
                            var droppedColumnName = columnOrColumns_1_1.value;
                            delete clone[droppedColumnName];
                        }
                    } catch (e_13_1) {
                        e_13 = {
                            error: e_13_1
                        };
                    } finally{
                        try {
                            if (columnOrColumns_1_1 && !columnOrColumns_1_1.done && (_a = columnOrColumns_1.return)) _a.call(columnOrColumns_1);
                        } finally{
                            if (e_13) throw e_13.error;
                        }
                    }
                    var e_13, _a;
                    return clone;
                }),
                pairs: new SelectIterable(content.pairs, function(pair) {
                    var clone = Object.assign({}, pair[1]);
                    try {
                        for(var columnOrColumns_2 = __values(columnOrColumns), columnOrColumns_2_1 = columnOrColumns_2.next(); !columnOrColumns_2_1.done; columnOrColumns_2_1 = columnOrColumns_2.next()){
                            var droppedColumnName = columnOrColumns_2_1.value;
                            delete clone[droppedColumnName];
                        }
                    } catch (e_14_1) {
                        e_14 = {
                            error: e_14_1
                        };
                    } finally{
                        try {
                            if (columnOrColumns_2_1 && !columnOrColumns_2_1.done && (_a = columnOrColumns_2.return)) _a.call(columnOrColumns_2);
                        } finally{
                            if (e_14) throw e_14.error;
                        }
                    }
                    var e_14, _a;
                    return [
                        pair[0],
                        clone
                    ];
                })
            };
        });
    };
    /**
     * Create a new dataframe with columns reordered.
     * New column names create new columns (with undefined values), omitting existing column names causes those columns to be dropped.
     *
     * @param columnNames Specifies the new order for columns.
     *
     * @return Returns a new dataframe with columns reordered according to the order of the array of column names that is passed in.
     *
     * @example
     * <pre>
     * const reorderedDf = df.reorderSeries(["FirstColumn", "SecondColumn", "etc"]);
     * </pre>
     */ DataFrame.prototype.reorderSeries = function(columnNames) {
        var _this = this;
        if (!isArray(columnNames)) throw new Error("Expected parameter 'columnNames' to 'DataFrame.reorderSeries' to be an array with column names.");
        try {
            for(var columnNames_8 = __values(columnNames), columnNames_8_1 = columnNames_8.next(); !columnNames_8_1.done; columnNames_8_1 = columnNames_8.next()){
                var columnName = columnNames_8_1.value;
                if (!isString(columnName)) throw new Error("Expected parameter 'columnNames' to 'DataFrame.reorderSeries' to be an array with column names.");
            }
        } catch (e_15_1) {
            e_15 = {
                error: e_15_1
            };
        } finally{
            try {
                if (columnNames_8_1 && !columnNames_8_1.done && (_a = columnNames_8.return)) _a.call(columnNames_8);
            } finally{
                if (e_15) throw e_15.error;
            }
        }
        var e_15, _a;
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: columnNames,
                index: content.index,
                values: new SelectIterable(content.values, function(value) {
                    var output = {};
                    try {
                        for(var columnNames_9 = __values(columnNames), columnNames_9_1 = columnNames_9.next(); !columnNames_9_1.done; columnNames_9_1 = columnNames_9.next()){
                            var columnName = columnNames_9_1.value;
                            output[columnName] = value[columnName];
                        }
                    } catch (e_16_1) {
                        e_16 = {
                            error: e_16_1
                        };
                    } finally{
                        try {
                            if (columnNames_9_1 && !columnNames_9_1.done && (_a = columnNames_9.return)) _a.call(columnNames_9);
                        } finally{
                            if (e_16) throw e_16.error;
                        }
                    }
                    var e_16, _a;
                    return output;
                }),
                pairs: new SelectIterable(content.pairs, function(pair) {
                    var value = pair[1];
                    var output = {};
                    try {
                        for(var columnNames_10 = __values(columnNames), columnNames_10_1 = columnNames_10.next(); !columnNames_10_1.done; columnNames_10_1 = columnNames_10.next()){
                            var columnName = columnNames_10_1.value;
                            output[columnName] = value[columnName];
                        }
                    } catch (e_17_1) {
                        e_17 = {
                            error: e_17_1
                        };
                    } finally{
                        try {
                            if (columnNames_10_1 && !columnNames_10_1.done && (_a = columnNames_10.return)) _a.call(columnNames_10);
                        } finally{
                            if (e_17) throw e_17.error;
                        }
                    }
                    var e_17, _a;
                    return [
                        pair[0],
                        output
                    ];
                }),
                caseSensitive: content.isCaseSensitive
            };
        });
    };
    /**
     * Bring the column(s) with specified name(s) to the front of the column order, making it (or them) the first column(s) in the output dataframe.
     *
     * @param columnOrColumns Specifies the column or columns to bring to the front.
     *
     * @return Returns a new dataframe with 1 or more columns bought to the front of the column ordering.
     *
     * @example
     * <pre>
     * const modifiedDf = df.bringToFront("NewFirstColumn");
     * </pre>
     *
     * @example
     * <pre>
     * const modifiedDf = df.bringToFront(["NewFirstColumn", "NewSecondColumn"]);
     * </pre>
     */ DataFrame.prototype.bringToFront = function(columnOrColumns) {
        var _this = this;
        if (isArray(columnOrColumns)) try {
            for(var columnOrColumns_3 = __values(columnOrColumns), columnOrColumns_3_1 = columnOrColumns_3.next(); !columnOrColumns_3_1.done; columnOrColumns_3_1 = columnOrColumns_3.next()){
                var columnName = columnOrColumns_3_1.value;
                if (!isString(columnName)) throw new Error("Expect 'columnOrColumns' parameter to 'DataFrame.bringToFront' function to specify a column or columns via a string or an array of strings.");
            }
        } catch (e_18_1) {
            e_18 = {
                error: e_18_1
            };
        } finally{
            try {
                if (columnOrColumns_3_1 && !columnOrColumns_3_1.done && (_a = columnOrColumns_3.return)) _a.call(columnOrColumns_3);
            } finally{
                if (e_18) throw e_18.error;
            }
        }
        else {
            if (!isString(columnOrColumns)) throw new Error("Expect 'columnOrColumns' parameter to 'DataFrame.bringToFront' function to specify a column or columns via a string or an array of strings.");
            columnOrColumns = [
                columnOrColumns
            ]; // Convert to array for coding convenience.
        }
        var e_18, _a;
        return new DataFrame(function() {
            var content = _this.getContent();
            var existingColumns = Array.from(content.columnNames);
            var columnsToMove = [];
            try {
                for(var columnOrColumns_4 = __values(columnOrColumns), columnOrColumns_4_1 = columnOrColumns_4.next(); !columnOrColumns_4_1.done; columnOrColumns_4_1 = columnOrColumns_4.next()){
                    var columnToMove = columnOrColumns_4_1.value;
                    if (existingColumns.indexOf(columnToMove) !== -1) // The request column actually exists, so we will move it.
                    columnsToMove.push(columnToMove);
                }
            } catch (e_19_1) {
                e_19 = {
                    error: e_19_1
                };
            } finally{
                try {
                    if (columnOrColumns_4_1 && !columnOrColumns_4_1.done && (_a = columnOrColumns_4.return)) _a.call(columnOrColumns_4);
                } finally{
                    if (e_19) throw e_19.error;
                }
            }
            var untouchedColumnNames = [];
            try {
                for(var existingColumns_1 = __values(existingColumns), existingColumns_1_1 = existingColumns_1.next(); !existingColumns_1_1.done; existingColumns_1_1 = existingColumns_1.next()){
                    var existingColumnName = existingColumns_1_1.value;
                    if (columnOrColumns.indexOf(existingColumnName) === -1) untouchedColumnNames.push(existingColumnName);
                }
            } catch (e_20_1) {
                e_20 = {
                    error: e_20_1
                };
            } finally{
                try {
                    if (existingColumns_1_1 && !existingColumns_1_1.done && (_b = existingColumns_1.return)) _b.call(existingColumns_1);
                } finally{
                    if (e_20) throw e_20.error;
                }
            }
            var e_19, _a, e_20, _b;
            return {
                columnNames: columnsToMove.concat(untouchedColumnNames),
                index: content.index,
                values: content.values,
                pairs: content.pairs
            };
        });
    };
    /**
     * Bring the column(s) with specified name(s) to the back of the column order, making it (or them) the last column(s) in the output dataframe.
     *
     * @param columnOrColumns Specifies the column or columns to bring to the back.
     *
     * @return Returns a new dataframe with 1 or more columns bought to the back of the column ordering.
     *
     * @example
     * <pre>
     * const modifiedDf = df.bringToBack("NewLastColumn");
     * </pre>
     *
     * @example
     * <pre>
     * const modifiedDf = df.bringToBack(["NewSecondLastColumn, ""NewLastColumn"]);
     * </pre>
     */ DataFrame.prototype.bringToBack = function(columnOrColumns) {
        var _this = this;
        if (isArray(columnOrColumns)) try {
            for(var columnOrColumns_5 = __values(columnOrColumns), columnOrColumns_5_1 = columnOrColumns_5.next(); !columnOrColumns_5_1.done; columnOrColumns_5_1 = columnOrColumns_5.next()){
                var columnName = columnOrColumns_5_1.value;
                if (!isString(columnName)) throw new Error("Expect 'columnOrColumns' parameter to 'DataFrame.bringToBack' function to specify a column or columns via a string or an array of strings.");
            }
        } catch (e_21_1) {
            e_21 = {
                error: e_21_1
            };
        } finally{
            try {
                if (columnOrColumns_5_1 && !columnOrColumns_5_1.done && (_a = columnOrColumns_5.return)) _a.call(columnOrColumns_5);
            } finally{
                if (e_21) throw e_21.error;
            }
        }
        else {
            if (!isString(columnOrColumns)) throw new Error("Expect 'columnOrColumns' parameter to 'DataFrame.bringToBack' function to specify a column or columns via a string or an array of strings.");
            columnOrColumns = [
                columnOrColumns
            ]; // Convert to array for coding convenience.
        }
        var e_21, _a;
        return new DataFrame(function() {
            var content = _this.getContent();
            var existingColumns = Array.from(content.columnNames);
            var columnsToMove = [];
            try {
                for(var columnOrColumns_6 = __values(columnOrColumns), columnOrColumns_6_1 = columnOrColumns_6.next(); !columnOrColumns_6_1.done; columnOrColumns_6_1 = columnOrColumns_6.next()){
                    var columnToMove = columnOrColumns_6_1.value;
                    if (existingColumns.indexOf(columnToMove) !== -1) // The request column actually exists, so we will move it.
                    columnsToMove.push(columnToMove);
                }
            } catch (e_22_1) {
                e_22 = {
                    error: e_22_1
                };
            } finally{
                try {
                    if (columnOrColumns_6_1 && !columnOrColumns_6_1.done && (_a = columnOrColumns_6.return)) _a.call(columnOrColumns_6);
                } finally{
                    if (e_22) throw e_22.error;
                }
            }
            var untouchedColumnNames = [];
            try {
                for(var existingColumns_2 = __values(existingColumns), existingColumns_2_1 = existingColumns_2.next(); !existingColumns_2_1.done; existingColumns_2_1 = existingColumns_2.next()){
                    var existingColumnName = existingColumns_2_1.value;
                    if (columnOrColumns.indexOf(existingColumnName) === -1) untouchedColumnNames.push(existingColumnName);
                }
            } catch (e_23_1) {
                e_23 = {
                    error: e_23_1
                };
            } finally{
                try {
                    if (existingColumns_2_1 && !existingColumns_2_1.done && (_b = existingColumns_2.return)) _b.call(existingColumns_2);
                } finally{
                    if (e_23) throw e_23.error;
                }
            }
            var e_22, _a, e_23, _b;
            return {
                columnNames: untouchedColumnNames.concat(columnsToMove),
                index: content.index,
                values: content.values,
                pairs: content.pairs
            };
        });
    };
    /**
     * Create a new dataframe with 1 or more columns renamed.
     *
     * @param newColumnNames A column rename spec - a JavaScript hash that maps existing column names to new column names.
     *
     * @return Returns a new dataframe with specified columns renamed.
     *
     * @example
     * <pre>
     *
     * const renamedDf = df.renameSeries({ OldColumnName, NewColumnName });
     * </pre>
     *
     * @example
     * <pre>
     *
     * const renamedDf = df.renameSeries({
     *      Column1: ColumnA,
     *      Column2: ColumnB
     * });
     * </pre>
     */ DataFrame.prototype.renameSeries = function(newColumnNames) {
        var _this = this;
        if (!isObject(newColumnNames)) throw new Error("Expected parameter 'newColumnNames' to 'DataFrame.renameSeries' to be an array with column names.");
        var existingColumnsToRename = Object.keys(newColumnNames);
        try {
            for(var existingColumnsToRename_1 = __values(existingColumnsToRename), existingColumnsToRename_1_1 = existingColumnsToRename_1.next(); !existingColumnsToRename_1_1.done; existingColumnsToRename_1_1 = existingColumnsToRename_1.next()){
                var existingColumnName = existingColumnsToRename_1_1.value;
                if (!isString(existingColumnName)) throw new Error("Expected existing column name '" + existingColumnName + "' of 'newColumnNames' parameter to 'DataFrame.renameSeries' to be a string.");
                if (!isString(newColumnNames[existingColumnName])) throw new Error("Expected new column name '" + newColumnNames[existingColumnName] + "' for existing column '" + existingColumnName + "' of 'newColumnNames' parameter to 'DataFrame.renameSeries' to be a string.");
            }
        } catch (e_24_1) {
            e_24 = {
                error: e_24_1
            };
        } finally{
            try {
                if (existingColumnsToRename_1_1 && !existingColumnsToRename_1_1.done && (_a = existingColumnsToRename_1.return)) _a.call(existingColumnsToRename_1);
            } finally{
                if (e_24) throw e_24.error;
            }
        }
        var e_24, _a;
        return new DataFrame(function() {
            var content = _this.getContent();
            var renamedColumns = [];
            try {
                for(var _a = __values(content.columnNames), _b = _a.next(); !_b.done; _b = _a.next()){
                    var existingColumnName = _b.value;
                    var columnIndex = existingColumnsToRename.indexOf(existingColumnName);
                    if (columnIndex === -1) renamedColumns.push(existingColumnName); // This column is not renamed.                    
                    else renamedColumns.push(newColumnNames[existingColumnName]); // This column is renamed.
                }
            } catch (e_25_1) {
                e_25 = {
                    error: e_25_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_25) throw e_25.error;
                }
            }
            //
            // Remap each row of the data frame to the new column names.
            //
            function remapValue(value) {
                var clone = Object.assign({}, value);
                try {
                    for(var existingColumnsToRename_2 = __values(existingColumnsToRename), existingColumnsToRename_2_1 = existingColumnsToRename_2.next(); !existingColumnsToRename_2_1.done; existingColumnsToRename_2_1 = existingColumnsToRename_2.next()){
                        var existingColumName = existingColumnsToRename_2_1.value;
                        clone[newColumnNames[existingColumName]] = clone[existingColumName];
                        delete clone[existingColumName];
                    }
                } catch (e_26_1) {
                    e_26 = {
                        error: e_26_1
                    };
                } finally{
                    try {
                        if (existingColumnsToRename_2_1 && !existingColumnsToRename_2_1.done && (_a = existingColumnsToRename_2.return)) _a.call(existingColumnsToRename_2);
                    } finally{
                        if (e_26) throw e_26.error;
                    }
                }
                var e_26, _a;
                return clone;
            }
            var e_25, _c;
            return {
                columnNames: renamedColumns,
                index: content.index,
                values: new SelectIterable(content.values, remapValue),
                pairs: new SelectIterable(content.pairs, function(pair) {
                    return [
                        pair[0],
                        remapValue(pair[1])
                    ];
                })
            };
        });
    };
    /**
    * Extract values from the dataframe as an array.
    * This forces lazy evaluation to complete.
    *
    * @return Returns an array of the values contained within the dataframe.
    *
    * @example
    * <pre>
    * const values = df.toArray();
    * </pre>
    */ DataFrame.prototype.toArray = function() {
        var values = [];
        try {
            for(var _a = __values(this.getContent().values), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (value !== undefined && value !== null) values.push(value);
            }
        } catch (e_27_1) {
            e_27 = {
                error: e_27_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_27) throw e_27.error;
            }
        }
        var e_27, _c;
        return values;
    };
    /**
     * Retreive the index and values pairs from the dataframe as an array.
     * Each pair is [index, value].
     * This forces lazy evaluation to complete.
     *
     * @return Returns an array of pairs that contains the dataframe content. Each pair is a two element array that contains an index and a value.
     *
     * @example
     * <pre>
     * const pairs = df.toPairs();
     * </pre>
     */ DataFrame.prototype.toPairs = function() {
        var pairs = [];
        try {
            for(var _a = __values(this.getContent().pairs), _b = _a.next(); !_b.done; _b = _a.next()){
                var pair = _b.value;
                if (pair[1] != undefined && pair[1] !== null) pairs.push(pair);
            }
        } catch (e_28_1) {
            e_28 = {
                error: e_28_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_28) throw e_28.error;
            }
        }
        var e_28, _c;
        return pairs;
    };
    /**
     * Convert the dataframe to a JavaScript object.
     *
     * @param keySelector Function that selects keys for the resulting object.
     * @param valueSelector Function that selects values for the resulting object.
     *
     * @return Returns a JavaScript object generated from the dataframe by applying the key and value selector functions.
     *
     * @example
     * <pre>
     *
     * const someObject = df.toObject(
     *      row => row.SomeColumn, // Specify the column to use for fields in the object.
     *      row => row.SomeOtherColumn // Specify the column to use as the value for each field.
     * );
     * </pre>
     */ DataFrame.prototype.toObject = function(keySelector, valueSelector) {
        if (!isFunction(keySelector)) throw new Error("Expected 'keySelector' parameter to DataFrame.toObject to be a function.");
        if (!isFunction(valueSelector)) throw new Error("Expected 'valueSelector' parameter to DataFrame.toObject to be a function.");
        return toMap(this, keySelector, valueSelector);
    };
    /**
     * Bake the data frame to an array of rows were each rows is an array of values in column order.
     *
     * @return Returns an array of rows. Each row is an array of values in column order.
     *
     * @example
     * <pre>
     * const rows = df.toRows();
     * </pre>
     */ DataFrame.prototype.toRows = function() {
        var columnNames = this.getColumnNames();
        var rows = [];
        try {
            for(var _a = __values(this.getContent().values), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                var row = [];
                for(var columnIndex = 0; columnIndex < columnNames.length; ++columnIndex)row.push(value[columnNames[columnIndex]]);
                rows.push(row);
            }
        } catch (e_29_1) {
            e_29 = {
                error: e_29_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_29) throw e_29.error;
            }
        }
        var e_29, _c;
        return rows;
    };
    /**
     * Transforms an input dataframe, generating a new dataframe.
     * The transformer function is called for each element of the input and the collection of outputs creates the generated datafarme.
     *
     * `select` is an alias for {@link DataFrame.map}.
     *
     * This is the same concept as the JavaScript function `Array.map` but maps over a dataframe rather than an array.
     *
     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.
     *
     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.
     *
     * @example
     * <pre>
     *
     * function transformer (input) {
     *      const output = {
     *          // ... construct output from input ...
     *      };
     *
     *      return output;
     * }
     *
     * const transformed = dataframe.select(transformer);
     * console.log(transformed.toString());
     * </pre>
     */ DataFrame.prototype.select = function(transformer) {
        if (!isFunction(transformer)) throw new Error("Expected 'transformer' parameter to 'Series.select' to be a function.");
        return this.map(transformer);
    };
    /**
     * Transforms an input dataframe, generating a new dataframe.
     * The transformer function is called for each element of the input and the collection of outputs creates the generated datafarme.
     *
     * This is the same concept as the JavaScript function `Array.map` but maps over a dataframe rather than an array.
     *
     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.
     *
     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.
     *
     * @example
     * <pre>
     *
     * function transformer (input) {
     *      const output = {
     *          // ... construct output from input ...
     *      };
     *
     *      return output;
     * }
     *
     * const transformed = dataframe.map(transformer);
     * console.log(transformed.toString());
     * </pre>
     */ DataFrame.prototype.map = function(transformer) {
        var _this = this;
        if (!isFunction(transformer)) throw new Error("Expected 'transformer' parameter to 'DataFrame.map' to be a function.");
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                values: new SelectIterable(content.values, transformer),
                index: content.index
            };
        });
    };
    /**
     * Transforms and flattens an input dataframe, generating a new dataframe.
     * The transformer function is called for each value in the input dataframe and produces an array that is then flattened into the generated dataframe.
     *
     * `selectMany` is an alias for {@link DataFrame.flatMap}.
     *
     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a dataframe rather than an array.
     *
     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated dataframe.
     *
     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.
     *
     * @example
     * <pre>
     *
     * function transformer (input) {
     *      const output = [];
     *      while (someCondition) {
     *          // ... generate zero or more outputs from a single input ...
     *          output.push(... some generated value ...);
     *      }
     *      return output;
     * }
     *
     * const transformed = dataframe.selectMany(transformer);
     * console.log(transformed.toString());
     * </pre>
     */ DataFrame.prototype.selectMany = function(transformer) {
        if (!isFunction(transformer)) throw new Error("Expected 'transformer' parameter to 'DataFrame.selectMany' to be a function.");
        return this.flatMap(transformer);
    };
    /**
     * Transforms and flattens an input dataframe, generating a new dataframe.
     * The transformer function is called for each value in the input dataframe and produces an array that is then flattened into the generated dataframe.
     *
     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a dataframe rather than an array.
     *
     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated dataframe.
     *
     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.
     *
     * @example
     * <pre>
     *
     * function transformer (input) {
     *      const output = [];
     *      while (someCondition) {
     *          // ... generate zero or more outputs from a single input ...
     *          output.push(... some generated value ...);
     *      }
     *      return output;
     * }
     *
     * const transformed = dataframe.flatMap(transformer);
     * console.log(transformed.toString());
     * </pre>
     */ DataFrame.prototype.flatMap = function(transformer) {
        var _this = this;
        if (!isFunction(transformer)) throw new Error("Expected 'transformer' parameter to 'DataFrame.flatMap' to be a function.");
        return new DataFrame(function() {
            return {
                pairs: new SelectManyIterable(_this.getContent().pairs, function(pair, index) {
                    var outputPairs = [];
                    try {
                        for(var _a = __values(transformer(pair[1], index)), _b = _a.next(); !_b.done; _b = _a.next()){
                            var transformed = _b.value;
                            outputPairs.push([
                                pair[0],
                                transformed
                            ]);
                        }
                    } catch (e_30_1) {
                        e_30 = {
                            error: e_30_1
                        };
                    } finally{
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        } finally{
                            if (e_30) throw e_30.error;
                        }
                    }
                    var e_30, _c;
                    return outputPairs;
                })
            };
        });
    };
    /**
     * Transform one or more columns.
     *
     * This is equivalent to extracting a {@link Series} with {@link getSeries}, then transforming it with {@link Series.select},
     * and finally plugging it back in as the same column using {@link withSeries}.
     *
     * @param columnSelectors Object with field names for each column to be transformed. Each field specifies a selector function that transforms that column.
     *
     * @return Returns a new dataframe with 1 or more columns transformed.
     *
     * @example
     * <pre>
     *
     * const modifiedDf = df.transformSeries({
     *      AColumnToTransform: columnValue => transformRow(columnValue)
     * });
     * </pre>
     *
     * @example
     * <pre>
     *
     * const modifiedDf = df.transformSeries({
     *      ColumnA: columnValue => transformColumnA(columnValue),
     *      ColumnB: columnValue => transformColumnB(columnValue)
     * });
     * </pre>
     */ DataFrame.prototype.transformSeries = function(columnSelectors) {
        if (!isObject(columnSelectors)) throw new Error("Expected 'columnSelectors' parameter of 'DataFrame.transformSeries' function to be an object. Field names should specify columns to transform. Field values should be selector functions that specify the transformation for each column.");
        var working = this;
        try {
            for(var _a = __values(Object.keys(columnSelectors)), _b = _a.next(); !_b.done; _b = _a.next()){
                var columnName = _b.value;
                if (working.hasSeries(columnName)) working = working.withSeries(columnName, working.getSeries(columnName).select(columnSelectors[columnName]));
            }
        } catch (e_31_1) {
            e_31 = {
                error: e_31_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_31) throw e_31.error;
            }
        }
        var e_31, _c;
        return working;
    };
    /**
     * Generate new columns based on existing rows.
     *
     * This is equivalent to calling {@link select} to transform the original dataframe to a new dataframe with different column,
     * then using {@link withSeries} to merge each the of both the new and original dataframes.
     *
     * @param generator Generator function that transforms each row to produce 1 or more new columns.
     * Or use a column spec that has fields for each column, the fields specify a generate function that produces the value for each new column.
     *
     * @return Returns a new dataframe with 1 or more new columns.
     *
     * @example
     * <pre>
     *
     * function produceNewColumns (inputRow) {
     *      const newColumns = {
     *          // ... specify new columns and their values based on the input row ...
     *      };
     *
     *      return newColumns;
     * };
     *
     * const dfWithNewSeries = df.generateSeries(row => produceNewColumns(row));
     * </pre>
     *
     * @example
     * <pre>
     *
     * const dfWithNewSeries = df.generateSeries({
     *      NewColumnA: row => produceNewColumnA(row),
     *      NewColumnB: row => produceNewColumnB(row),
     * })
     * </pre>
     */ DataFrame.prototype.generateSeries = function(generator) {
        if (!isObject(generator)) {
            if (!isFunction(generator)) throw new Error("Expected 'generator' parameter to 'DataFrame.generateSeries' function to be a function or an object.");
            var selector = generator;
            var newColumns = this.select(selector) // Build a new dataframe.
            .bake(); //TODO: Bake should be needed here, but it causes problems if not.
            var newColumnNames = newColumns.getColumnNames();
            var working = this;
            try {
                //TODO: There must be a cheaper implementation!
                for(var newColumnNames_1 = __values(newColumnNames), newColumnNames_1_1 = newColumnNames_1.next(); !newColumnNames_1_1.done; newColumnNames_1_1 = newColumnNames_1.next()){
                    var newColumnName = newColumnNames_1_1.value;
                    working = working.withSeries(newColumnName, newColumns.getSeries(newColumnName));
                }
            } catch (e_32_1) {
                e_32 = {
                    error: e_32_1
                };
            } finally{
                try {
                    if (newColumnNames_1_1 && !newColumnNames_1_1.done && (_a = newColumnNames_1.return)) _a.call(newColumnNames_1);
                } finally{
                    if (e_32) throw e_32.error;
                }
            }
            return working;
        } else {
            var columnTransformSpec = generator;
            var newColumnNames = Object.keys(columnTransformSpec);
            var working = this;
            try {
                for(var newColumnNames_2 = __values(newColumnNames), newColumnNames_2_1 = newColumnNames_2.next(); !newColumnNames_2_1.done; newColumnNames_2_1 = newColumnNames_2.next()){
                    var newColumnName = newColumnNames_2_1.value;
                    working = working.withSeries(newColumnName, working.select(columnTransformSpec[newColumnName]).deflate());
                }
            } catch (e_33_1) {
                e_33 = {
                    error: e_33_1
                };
            } finally{
                try {
                    if (newColumnNames_2_1 && !newColumnNames_2_1.done && (_b = newColumnNames_2.return)) _b.call(newColumnNames_2);
                } finally{
                    if (e_33) throw e_33.error;
                }
            }
            return working;
        }
        var e_32, _a, e_33, _b;
    };
    /**
     * Converts (deflates) a dataframe to a {@link Series}.
     *
     * @param selector Optional selector function that transforms each row to produce the series.
     *
     * @return Returns a series that was created from the deflated from  the original dataframe.
     *
     * @example
     * <pre>
     *
     * const series = df.deflate(); // Deflate to a series of object.
     * </pre>
     *
     * @example
     * <pre>
     *
     * const series = df.deflate(row => row.SomeColumn); // Extract a particular column.
     * </pre>
     */ DataFrame.prototype.deflate = function(selector) {
        var _this = this;
        if (selector) {
            if (!isFunction(selector)) throw new Error("Expected 'selector' parameter to 'DataFrame.deflate' function to be a selector function.");
        }
        return new Series(function() {
            var content = _this.getContent();
            if (selector) return {
                index: content.index,
                values: new SelectIterable(content.values, selector),
                pairs: new SelectIterable(content.pairs, function(pair, index) {
                    return [
                        pair[0],
                        selector(pair[1], index)
                    ];
                })
            };
            else return {
                index: content.index,
                values: content.values,
                pairs: content.pairs
            };
        });
    };
    /**
     * Inflate a named {@link Series} in the dataframe to 1 or more new series in the new dataframe.
     *
     * This is the equivalent of extracting the series using {@link getSeries}, transforming them with {@link Series.select}
     * and then running {@link Series.inflate} to create a new dataframe, then merging each column of the new dataframe
     *  into the original dataframe using {@link withSeries}.
     *
     * @param columnName Name of the series to inflate.
     * @param selector Optional selector function that transforms each value in the column to new columns. If not specified it is expected that each value in the column is an object whose fields define the new column names.
     *
     * @return Returns a new dataframe with a column inflated to 1 or more new columns.
     *
     * @example
     * <pre>
     *
     * function newColumnGenerator (row) {
     *      const newColumns = {
     *          // ... create 1 field per new column ...
     *      };
     *
     *      return row;
     * }
     *
     * const dfWithNewSeries = df.inflateSeries("SomeColumn", newColumnGenerator);
     * </pre>
     */ DataFrame.prototype.inflateSeries = function(columnName, selector) {
        if (!isString(columnName)) throw new Error("Expected 'columnName' parameter to 'DataFrame.inflateSeries' to be a string that is the name of the column to inflate.");
        if (selector) {
            if (!isFunction(selector)) throw new Error("Expected optional 'selector' parameter to 'DataFrame.inflateSeries' to be a selector function, if it is specified.");
        }
        return this.zip(this.getSeries(columnName).inflate(selector), function(row1, row2) {
            return Object.assign({}, row1, row2);
        } //todo: this be should zip's default operation.
        );
    };
    /**
     * Partition a dataframe into a {@link Series} of *data windows*.
     * Each value in the new series is a rolling chunk of data from the original dataframe.
     *
     * @param period The number of data rows to include in each data window.
     *
     * @return Returns a new series, each value of which is a chunk of the original dataframe.
     *
     * @example
     * <pre>
     *
     * const windows = df.window(2); // Get values in pairs.
     * const pctIncrease = windows.select(pair => (pair.last() - pair.first()) / pair.first());
     * console.log(pctIncrease.toString());
     * </pre>
     *
     * @example
     * <pre>
     *
     * const salesDf = ... // Daily sales data.
     * const weeklySales = salesDf.window(7); // Partition up into weekly data sets.
     * console.log(weeklySales.toString());
     * </pre>
     */ DataFrame.prototype.window = function(period) {
        var _this = this;
        if (!isNumber(period)) throw new Error("Expected 'period' parameter to 'DataFrame.window' to be a number.");
        return new Series(function() {
            var content = _this.getContent();
            return {
                values: new DataFrameWindowIterable(content.columnNames, content.pairs, period)
            };
        });
    };
    /**
     * Partition a dataframe into a {@link Series} of *rolling data windows*.
     * Each value in the new series is a rolling chunk of data from the original dataframe.
     *
     * @param period The number of data rows to include in each data window.
     *
     * @return Returns a new series, each value of which is a rolling chunk of the original dataframe.
     *
     * @example
     * <pre>
     *
     * const salesDf = ... // Daily sales data.
     * const rollingWeeklySales = salesDf.rollingWindow(7); // Get rolling window over weekly sales data.
     * console.log(rollingWeeklySales.toString());
     * </pre>
     */ DataFrame.prototype.rollingWindow = function(period) {
        var _this = this;
        if (!isNumber(period)) throw new Error("Expected 'period' parameter to 'DataFrame.rollingWindow' to be a number.");
        return new Series(function() {
            var content = _this.getContent();
            return {
                values: new DataFrameRollingWindowIterable(content.columnNames, content.pairs, period)
            };
        });
    };
    /**
     * Partition a dataframe into a {@link Series} of variable-length *data windows*
     * where the divisions between the data chunks are
     * defined by a user-provided *comparer* function.
     *
     * @param comparer Function that compares two adjacent data rows and returns true if they should be in the same window.
     *
     * @return Returns a new series, each value of which is a chunk of data from the original dataframe.
     *
     * @example
     * <pre>
     *
     * function rowComparer (rowA, rowB) {
     *      if (... rowA should be in the same data window as rowB ...) {
     *          return true;
     *      }
     *      else {
     *          return false;
     *      }
     * };
     *
     * const variableWindows = df.variableWindow(rowComparer);
     */ DataFrame.prototype.variableWindow = function(comparer) {
        var _this = this;
        if (!isFunction(comparer)) throw new Error("Expected 'comparer' parameter to 'DataFrame.variableWindow' to be a function.");
        return new Series(function() {
            var content = _this.getContent();
            return {
                values: new DataFrameVariableWindowIterable(content.columnNames, content.pairs, comparer)
            };
        });
    };
    /**
     * Eliminates adjacent duplicate rows.
     *
     * For each group of adjacent rows that are equivalent only returns the last index/row for the group,
     * thus adjacent equivalent rows are collapsed down to the last row.
     *
     * @param selector Optional selector function to determine the value used to compare for equivalence.
     *
     * @return Returns a new dataframe with groups of adjacent duplicate rows collapsed to a single row per group.
     *
     * @example
     * <pre>
     *
     * const dfWithDuplicateRowsRemoved = df.sequentialDistinct(row => row.ColumnA);
     * </pre>
     */ DataFrame.prototype.sequentialDistinct = function(selector) {
        if (selector) {
            if (!isFunction(selector)) throw new Error("Expected 'selector' parameter to 'DataFrame.sequentialDistinct' to be a selector function that determines the value to compare for duplicates.");
        } else selector = function(value) {
            return value;
        };
        return this.variableWindow(function(a, b) {
            return selector(a) === selector(b);
        }).select(function(window) {
            return [
                window.getIndex().first(),
                window.first()
            ];
        }).withIndex(function(pair) {
            return pair[0];
        }).inflate(function(pair) {
            return pair[1];
        }); //TODO: Should this be select?
    };
    /**
     * Aggregate the rows in the dataframe to a single result.
     *
     * `aggregate` is similar to {@link DataFrame.reduce}  but the parameters are reversed.
     * Please use {@link DataFrame.reduce} in preference to `aggregate`.

     * @param seed Optional seed value for producing the aggregation.
     * @param selector Function that takes the seed and then each row in the dataframe and produces the aggregated value.
     *
     * @return Returns a new value that has been aggregated from the dataframe using the 'selector' function.
     *
     * @example
     * <pre>
     *
     * const dailySalesDf = ... daily sales figures for the past month ...
     * const totalSalesForthisMonth = dailySalesDf.aggregate(
     *      0, // Seed - the starting value.
     *      (accumulator, row) => accumulator + row.SalesAmount // Aggregation function.
     * );
     * </pre>
     *
     * @example
     * <pre>
     *
     * const totalSalesAllTime = 500; // We'll seed the aggregation with this value.
     * const dailySalesDf = ... daily sales figures for the past month ...
     * const updatedTotalSalesAllTime = dailySalesDf.aggregate(
     *      totalSalesAllTime,
     *      (accumulator, row) => accumulator + row.SalesAmount
     * );
     * </pre>
     *
     * @example
     * <pre>
     *
     * var salesDataSummary = salesDataDf.aggregate({
     *      TotalSales: df => df.count(),
     *      AveragePrice: df => df.deflate(row => row.Price).average(),
     *      TotalRevenue: df => df.deflate(row => row.Revenue).sum(),
     * });
     * </pre>
    */ DataFrame.prototype.aggregate = function(seedOrSelector, selector) {
        var _this = this;
        if (isFunction(seedOrSelector) && !selector) return this.skip(1).aggregate(this.first(), seedOrSelector);
        else if (selector) {
            if (!isFunction(selector)) throw new Error("Expected 'selector' parameter to aggregate to be a function.");
            var accum = seedOrSelector;
            try {
                for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                    var value = _b.value;
                    accum = selector(accum, value);
                }
            } catch (e_34_1) {
                e_34 = {
                    error: e_34_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_34) throw e_34.error;
                }
            }
            return accum;
        } else {
            //
            //TODO:
            // This approach is fairly limited because I can't provide a seed.
            // Consider removing this and replacing it with a 'summarize' function.
            //
            if (!isObject(seedOrSelector)) throw new Error("Expected 'seed' parameter to aggregate to be an object.");
            var columnAggregateSpec_1 = seedOrSelector;
            var columnNames = Object.keys(columnAggregateSpec_1);
            var aggregatedColumns = columnNames.map(function(columnName) {
                var columnSelector = columnAggregateSpec_1[columnName];
                if (!isFunction(columnSelector)) throw new Error("Expected column/selector pairs in 'seed' parameter to aggregate.");
                return [
                    columnName,
                    _this.getSeries(columnName).aggregate(columnSelector)
                ];
            });
            return toMap(aggregatedColumns, function(pair) {
                return pair[0];
            }, function(pair) {
                return pair[1];
            });
        }
        var e_34, _c;
    };
    /**
     * Reduces the values in the dataframe to a single result.
     *
     * This is the same concept as the JavaScript function `Array.reduce` but reduces a dataframe rather than an array.

     * @param reducer Function that takes the seed and then each value in the dataframe and produces the reduced value.
     * @param seed Optional initial value, if not specifed the first value in the dataframe is used as the initial value.
     *
     * @return Returns a value that has been reduced from the input dataframe by passing each element through the reducer function.
     *
     * @example
     * <pre>
     *
     * const dailyRecords = ... daily records for the past month ...
     * const totalSales = dailyRecords.reduce(
     *      (accumulator, row) => accumulator + row.salesAmount, // Reducer function.
     *      0  // Seed value, the starting value.
     * );
     * </pre>
     *
     * @example
     * <pre>
     *
     * const previousSales = 500; // We'll seed the reduction with this value.
     * const dailyRecords = ... daily records for the past month ...
     * const updatedSales = dailyRecords.reduce(
     *      (accumulator, row) => accumulator + row.salesAmount,
     *      previousSales
     * );
     * </pre>
     */ DataFrame.prototype.reduce = function(reducer, seed) {
        if (!isFunction(reducer)) throw new Error("Expected 'reducer' parameter to `DataFrame.reduce` to be a function.");
        var accum = seed;
        var dataframe = this;
        if (accum === undefined) {
            if (dataframe.any()) {
                accum = dataframe.first();
                dataframe = dataframe.skip(1);
            }
        }
        try {
            for(var dataframe_1 = __values(dataframe), dataframe_1_1 = dataframe_1.next(); !dataframe_1_1.done; dataframe_1_1 = dataframe_1.next()){
                var value = dataframe_1_1.value;
                accum = reducer(accum, value);
            }
        } catch (e_35_1) {
            e_35 = {
                error: e_35_1
            };
        } finally{
            try {
                if (dataframe_1_1 && !dataframe_1_1.done && (_a = dataframe_1.return)) _a.call(dataframe_1);
            } finally{
                if (e_35) throw e_35.error;
            }
        }
        var e_35, _a;
        return accum;
    };
    /**
     * Skip a number of rows in the dataframe.
     *
     * @param numValues Number of rows to skip.
     *
     * @return Returns a new dataframe with the specified number of rows skipped.
     *
     * @example
     * <pre>
     *
     * const dfWithRowsSkipped = df.skip(10); // Skip 10 rows in the original dataframe.
     * </pre>
     */ DataFrame.prototype.skip = function(numValues) {
        var _this = this;
        if (!isNumber(numValues)) throw new Error("Expected 'numValues' parameter to 'DataFrame.skip' to be a number.");
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: content.columnNames,
                values: new SkipIterable(content.values, numValues),
                index: new SkipIterable(content.index, numValues),
                pairs: new SkipIterable(content.pairs, numValues)
            };
        });
    };
    /**
     * Skips rows in the dataframe while a condition evaluates to true or truthy.
     *
     * @param predicate Returns true/truthy to continue to skip rows in the original dataframe.
     *
     * @return Returns a new dataframe with all initial sequential rows removed while the predicate returned true/truthy.
     *
     * @example
     * <pre>
     *
     * const dfWithRowsSkipped = df.skipWhile(row => row.CustomerName === "Fred"); // Skip initial customers named Fred.
     * </pre>
     */ DataFrame.prototype.skipWhile = function(predicate) {
        var _this = this;
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'DataFrame.skipWhile' function to be a predicate function that returns true/false.");
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: content.columnNames,
                values: new SkipWhileIterable(content.values, predicate),
                pairs: new SkipWhileIterable(content.pairs, function(pair) {
                    return predicate(pair[1]);
                })
            };
        });
    };
    /**
     * Skips rows in the dataframe untils a condition evaluates to true or truthy.
     *
     * @param predicate Return true/truthy to stop skipping rows in the original dataframe.
     *
     * @return Returns a new dataframe with all initial sequential rows removed until the predicate returned true/truthy.
     *
     * @example
     * <pre>
     *
     * const dfWithRowsSkipped = df.skipUntil(row => row.CustomerName === "Fred"); // Skip initial customers until we find Fred.
     * </pre>
     */ DataFrame.prototype.skipUntil = function(predicate) {
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'DataFrame.skipUntil' function to be a predicate function that returns true/false.");
        return this.skipWhile(function(value) {
            return !predicate(value);
        });
    };
    /**
     * Take a number of rows from the dataframe.
     *
     * @param numValues Number of rows to take.
     *
     * @return Returns a new dataframe with only the specified number of rows taken from the original dataframe.
     *
     * @example
     * <pre>
     *
     * const dfWithRowsTaken = df.take(15); // Take only the first 15 rows from the original dataframe.
     * </pre>
     */ DataFrame.prototype.take = function(numRows) {
        var _this = this;
        if (!isNumber(numRows)) throw new Error("Expected 'numRows' parameter to 'DataFrame.take' function to be a number.");
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: content.columnNames,
                index: new TakeIterable(content.index, numRows),
                values: new TakeIterable(content.values, numRows),
                pairs: new TakeIterable(content.pairs, numRows)
            };
        });
    };
    /**
     * Takes rows from the dataframe while a condition evaluates to true or truthy.
     *
     * @param predicate Returns true/truthy to continue to take rows from the original dataframe.
     *
     * @return Returns a new dataframe with only the initial sequential rows that were taken while the predicate returned true/truthy.
     *
     * @example
     * <pre>
     *
     * const dfWithRowsTaken = df.takeWhile(row => row.CustomerName === "Fred"); // Take only initial customers named Fred.
     * </pre>
     */ DataFrame.prototype.takeWhile = function(predicate) {
        var _this = this;
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'DataFrame.takeWhile' function to be a predicate function that returns true/false.");
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: content.columnNames,
                values: new TakeWhileIterable(content.values, predicate),
                pairs: new TakeWhileIterable(content.pairs, function(pair) {
                    return predicate(pair[1]);
                })
            };
        });
    };
    /**
     * Takes rows from the dataframe untils a condition evaluates to true or truthy.
     *
     * @param predicate Return true/truthy to stop taking rows in the original dataframe.
     *
     * @return Returns a new dataframe with only the initial sequential rows taken until the predicate returned true/truthy.
     *
     * @example
     * <pre>
     *
     * const dfWithRowsTaken = df.takeUntil(row => row.CustomerName === "Fred"); // Take all initial customers until we find Fred.
     * </pre>
     */ DataFrame.prototype.takeUntil = function(predicate) {
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'DataFrame.takeUntil' function to be a predicate function that returns true/false.");
        return this.takeWhile(function(value) {
            return !predicate(value);
        });
    };
    /**
     * Count the number of rows in the dataframe
     *
     * @return Returns the count of all rows.
     *
     * @example
     * <pre>
     *
     * const numRows = df.count();
     * </pre>
     */ DataFrame.prototype.count = function() {
        var total = 0;
        try {
            for(var _a = __values(this.getContent().values), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                ++total;
            }
        } catch (e_36_1) {
            e_36 = {
                error: e_36_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_36) throw e_36.error;
            }
        }
        var e_36, _c;
        return total;
    };
    /**
     * Get the first row of the dataframe.
     *
     * @return Returns the first row of the dataframe.
     *
     * @example
     * <pre>
     *
     * const firstRow = df.first();
     * </pre>
     */ DataFrame.prototype.first = function() {
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                return value; // Only need the first value.
            }
        } catch (e_37_1) {
            e_37 = {
                error: e_37_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_37) throw e_37.error;
            }
        }
        var e_37, _c;
        throw new Error("DataFrame.first: No values in DataFrame.");
    };
    /**
     * Get the last row of the dataframe.
     *
     * @return Returns the last row of the dataframe.
     *
     * @example
     * <pre>
     *
     * const lastRow = df.last();
     * </pre>
     */ DataFrame.prototype.last = function() {
        var lastValue = null;
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                lastValue = value; // Throw away all values until we get to the last one.
            }
        } catch (e_38_1) {
            e_38 = {
                error: e_38_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_38) throw e_38.error;
            }
        }
        if (lastValue === null) throw new Error("DataFrame.last: No values in DataFrame.");
        var e_38, _c;
        return lastValue;
    };
    /**
     * Get the row, if there is one, with the specified index.
     *
     * @param index Index to for which to retreive the row.
     *
     * @return Returns the row from the specified index in the dataframe or undefined if there is no such index in the present in the dataframe.
     *
     * @example
     * <pre>
     *
     * const row = df.at(5); // Get the row at index 5 (with a default 0-based index).
     * </pre>
     *
     * @example
     * <pre>
     *
     * const date = ... some date ...
     * // Retreive the row with specified date from a time-series dataframe (assuming date indexed has been applied).
     * const row = df.at(date);
     * </pre>
     */ DataFrame.prototype.at = function(index) {
        if (this.none()) return undefined;
        return this.getRowByIndex(index);
    };
    /**
     * Get X rows from the start of the dataframe.
     * Pass in a negative value to get all rows at the head except for X rows at the tail.
     *
     * @param numValues Number of rows to take.
     *
     * @return Returns a new dataframe that has only the specified number of rows taken from the start of the original dataframe.
     *
     * @examples
     * <pre>
     *
     * const sample = df.head(10); // Take a sample of 10 rows from the start of the dataframe.
     * </pre>
     */ DataFrame.prototype.head = function(numValues) {
        if (!isNumber(numValues)) throw new Error("Expected 'numValues' parameter to 'DataFrame.head' function to be a number.");
        if (numValues === 0) return new DataFrame(); // Empty dataframe.
        var toTake = numValues < 0 ? this.count() - Math.abs(numValues) : numValues;
        return this.take(toTake);
    };
    /**
     * Get X rows from the end of the dataframe.
     * Pass in a negative value to get all rows at the tail except X rows at the head.
     *
     * @param numValues Number of rows to take.
     *
     * @return Returns a new dataframe that has only the specified number of rows taken from the end of the original dataframe.
     *
     * @examples
     * <pre>
     *
     * const sample = df.tail(12); // Take a sample of 12 rows from the end of the dataframe.
     * </pre>
     */ DataFrame.prototype.tail = function(numValues) {
        if (!isNumber(numValues)) throw new Error("Expected 'numValues' parameter to 'DataFrame.tail' function to be a number.");
        if (numValues === 0) return new DataFrame(); // Empty dataframe.
        var toSkip = numValues > 0 ? this.count() - numValues : Math.abs(numValues);
        return this.skip(toSkip);
    };
    /**
     * Filter the dataframe through a user-defined predicate function.
     *
     * `where` is an alias for {@link DataFrame.filter}.
     *
     * This is the same concept as the JavaScript function `Array.filter` but filters a dataframe rather than an array.
     *
     * @param predicate Predicate function to filter values from the dataframe. Returns true/truthy to keep elements, or false/falsy to omit elements.
     *
     * @return Returns a new dataframe containing only the values from the original dataframe that matched the predicate.
     *
     * @example
     * <pre>
     *
     * // Filter so we only have sales figures greater than 100.
     * const filtered = dataframe.where(row => row.salesFigure > 100);
     * console.log(filtered.toArray());
     * </pre>
     */ DataFrame.prototype.where = function(predicate) {
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'DataFrame.where' to be a function.");
        return this.filter(predicate);
    };
    /**
     * Filter the dataframe through a user-defined predicate function.
     *
     * This is the same concept as the JavaScript function `Array.filter` but filters a dataframe rather than an array.
     *
     * @param predicate Predicate function to filter values from the dataframe. Returns true/truthy to keep elements, or false/falsy to omit elements.
     *
     * @return Returns a new dataframe containing only the values from the original dataframe that matched the predicate.
     *
     * @example
     * <pre>
     *
     * // Filter so we only have sales figures greater than 100.
     * const filtered = dataframe.filter(row => row.salesFigure > 100);
     * console.log(filtered.toArray());
     * </pre>
     */ DataFrame.prototype.filter = function(predicate) {
        var _this = this;
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'DataFrame.filter' to be a function.");
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: content.columnNames,
                values: new WhereIterable(content.values, predicate),
                pairs: new WhereIterable(content.pairs, function(pair) {
                    return predicate(pair[1]);
                })
            };
        });
    };
    /**
     * Invoke a callback function for each row in the dataframe.
     *
     * @param callback The calback function to invoke for each row.
     *
     * @return Returns the original dataframe with no modifications.
     *
     * @example
     * <pre>
     *
     * df.forEach(row => {
     *      // ... do something with the row ...
     * });
     * </pre>
     */ DataFrame.prototype.forEach = function(callback) {
        if (!isFunction(callback)) throw new Error("Expected 'callback' parameter to 'DataFrame.forEach' to be a function.");
        var index = 0;
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                callback(value, index++);
            }
        } catch (e_39_1) {
            e_39 = {
                error: e_39_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_39) throw e_39.error;
            }
        }
        var e_39, _c;
        return this;
    };
    /**
     * Evaluates a predicate function for every row in the dataframe to determine
     * if some condition is true/truthy for **all** rows in the dataframe.
     *
     * @param predicate Predicate function that receives each row. It should returns true/truthy for a match, otherwise false/falsy.
     *
     * @return Returns true if the predicate has returned true or truthy for every row in the dataframe, otherwise returns false. Returns false for an empty dataframe.
     *
     * @example
     * <pre>
     *
     * const everyoneIsNamedFred = df.all(row => row.CustomerName === "Fred"); // Check if all customers are named Fred.
     * </pre>
     */ DataFrame.prototype.all = function(predicate) {
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'DataFrame.all' to be a function.");
        var count = 0;
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (!predicate(value)) return false;
                ++count;
            }
        } catch (e_40_1) {
            e_40 = {
                error: e_40_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_40) throw e_40.error;
            }
        }
        var e_40, _c;
        return count > 0;
    };
    /**
     * Evaluates a predicate function for every row in the dataframe to determine
     * if some condition is true/truthy for **any** of rows in the dataframe.
     *
     * If no predicate is specified then it simply checks if the dataframe contains more than zero rows.
     *
     * @param predicate Optional predicate function that receives each row. It should return true/truthy for a match, otherwise false/falsy.
     *
     * @return Returns true if the predicate has returned truthy for any row in the dataframe, otherwise returns false.
     * If no predicate is passed it returns true if the dataframe contains any rows at all.
     * Returns false for an empty dataframe.
     *
     * @example
     * <pre>
     *
     * const anyFreds = df.any(row => row.CustomerName === "Fred"); // Do we have any customers named Fred?
     * </pre>
     *
     * @example
     * <pre>
     *
     * const anyCustomers = df.any(); // Do we have any customers at all?
     * </pre>
     */ DataFrame.prototype.any = function(predicate) {
        if (predicate) {
            if (!isFunction(predicate)) throw new Error("Expected optional 'predicate' parameter to 'DataFrame.any' to be a function.");
        }
        if (predicate) try {
            // Use the predicate to check each value.
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (predicate(value)) return true;
            }
        } catch (e_41_1) {
            e_41 = {
                error: e_41_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_41) throw e_41.error;
            }
        }
        else {
            // Just check if there is at least one item.
            var iterator = this[Symbol.iterator]();
            return !iterator.next().done;
        }
        var e_41, _c;
        return false; // Nothing passed.
    };
    /**
     * Evaluates a predicate function for every row in the dataframe to determine
     * if some condition is true/truthy for **none** of rows in the dataframe.
     *
     * If no predicate is specified then it simply checks if the dataframe contains zero rows.
     *
     * @param predicate Optional predicate function that receives each row. It should return true/truthy for a match, otherwise false/falsy.
     *
     * @return Returns true if the predicate has returned truthy for zero rows in the dataframe, otherwise returns false. Returns false for an empty dataframe.
     *
     * @example
     * <pre>
     *
     * const noFreds = df.none(row => row.CustomerName === "Fred"); // Do we have zero customers named Fred?
     * </pre>
     *
     * @example
     * <pre>
     *
     * const noCustomers = df.none(); // Do we have zero customers?
     * </pre>
     */ DataFrame.prototype.none = function(predicate) {
        if (predicate) {
            if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'DataFrame.none' to be a function.");
        }
        if (predicate) try {
            // Use the predicate to check each value.
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (predicate(value)) return false;
            }
        } catch (e_42_1) {
            e_42 = {
                error: e_42_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_42) throw e_42.error;
            }
        }
        else {
            // Just check if empty.
            var iterator = this[Symbol.iterator]();
            return iterator.next().done || false;
        }
        var e_42, _c;
        return true; // Nothing failed the predicate.
    };
    //TODO: Improve this example (and subsequent examples, they look like series setup rather than dataframe)..
    /**
     * Gets a new dataframe containing all rows starting at or after the specified index value.
     *
     * @param indexValue The index value at which to start the new dataframe.
     *
     * @return Returns a new dataframe containing all rows starting at or after the specified index value.
     *
     * @example
     * <pre>
     *
     * const df = new DataFrame({
     *      index: [0, 1, 2, 3], // This is the default index.
     *      values: [10, 20, 30, 40],
     * });
     *
     * const lastHalf = df.startAt(2);
     * expect(lastHalf.toArray()).to.eql([30, 40]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const timeSeriesDf = ... a dataframe indexed by date/time ...
     *
     * // Get all rows starting at (or after) a particular date.
     * const result = timeSeriesDf.startAt(new Date(2016, 5, 4));
     * </pre>
     */ DataFrame.prototype.startAt = function(indexValue) {
        var _this = this;
        return new DataFrame(function() {
            var content = _this.getContent();
            var lessThan = _this.getIndex().getLessThan();
            return {
                columnNames: content.columnNames,
                index: new SkipWhileIterable(content.index, function(index) {
                    return lessThan(index, indexValue);
                }),
                pairs: new SkipWhileIterable(content.pairs, function(pair) {
                    return lessThan(pair[0], indexValue);
                })
            };
        });
    };
    /**
     * Gets a new dataframe containing all rows up until and including the specified index value (inclusive).
     *
     * @param indexValue The index value at which to end the new dataframe.
     *
     * @return Returns a new dataframe containing all rows up until and including the specified index value.
     *
     * @example
     * <pre>
     *
     * const df = new DataFrame({
     *      index: [0, 1, 2, 3], // This is the default index.
     *      values: [10, 20, 30, 40],
     * });
     *
     * const firstHalf = df.endAt(1);
     * expect(firstHalf.toArray()).to.eql([10, 20]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const timeSeriesDf = ... a dataframe indexed by date/time ...
     *
     * // Get all rows ending at a particular date.
     * const result = timeSeriesDf.endAt(new Date(2016, 5, 4));
     * </pre>
     */ DataFrame.prototype.endAt = function(indexValue) {
        var _this = this;
        return new DataFrame(function() {
            var content = _this.getContent();
            var lessThanOrEqualTo = _this.getIndex().getLessThanOrEqualTo();
            return {
                columnNames: content.columnNames,
                index: new TakeWhileIterable(content.index, function(index) {
                    return lessThanOrEqualTo(index, indexValue);
                }),
                pairs: new TakeWhileIterable(content.pairs, function(pair) {
                    return lessThanOrEqualTo(pair[0], indexValue);
                })
            };
        });
    };
    /**
     * Gets a new dataframe containing all rows up to the specified index value (exclusive).
     *
     * @param indexValue The index value at which to end the new dataframe.
     *
     * @return Returns a new dataframe containing all rows up to (but not including) the specified index value.
     *
     * @example
     * <pre>
     *
     * const df = new DataFrame({
     *      index: [0, 1, 2, 3], // This is the default index.
     *      values: [10, 20, 30, 40],
     * });
     *
     * const firstHalf = df.before(2);
     * expect(firstHalf.toArray()).to.eql([10, 20]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const timeSeriesDf = ... a dataframe indexed by date/time ...
     *
     * // Get all rows before the specified date.
     * const result = timeSeriesDf.before(new Date(2016, 5, 4));
     * </pre>
     */ DataFrame.prototype.before = function(indexValue) {
        var _this = this;
        return new DataFrame(function() {
            var content = _this.getContent();
            var lessThan = _this.getIndex().getLessThan();
            return {
                columnNames: content.columnNames,
                index: new TakeWhileIterable(content.index, function(index) {
                    return lessThan(index, indexValue);
                }),
                pairs: new TakeWhileIterable(content.pairs, function(pair) {
                    return lessThan(pair[0], indexValue);
                })
            };
        });
    };
    /**
     * Gets a new dataframe containing all rows after the specified index value (exclusive).
     *
     * @param indexValue The index value after which to start the new dataframe.
     *
     * @return Returns a new dataframe containing all rows after the specified index value.
     *
     * @example
     * <pre>
     *
     * const df = new DataFrame({
     *      index: [0, 1, 2, 3], // This is the default index.
     *      values: [10, 20, 30, 40],
     * });
     *
     * const lastHalf = df.before(1);
     * expect(lastHalf.toArray()).to.eql([30, 40]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const timeSeriesDf = ... a dataframe indexed by date/time ...
     *
     * // Get all rows after the specified date.
     * const result = timeSeriesDf.after(new Date(2016, 5, 4));
     * </pre>
     */ DataFrame.prototype.after = function(indexValue) {
        var _this = this;
        return new DataFrame(function() {
            var content = _this.getContent();
            var lessThanOrEqualTo = _this.getIndex().getLessThanOrEqualTo();
            return {
                columnNames: content.columnNames,
                index: new SkipWhileIterable(content.index, function(index) {
                    return lessThanOrEqualTo(index, indexValue);
                }),
                pairs: new SkipWhileIterable(content.pairs, function(pair) {
                    return lessThanOrEqualTo(pair[0], indexValue);
                })
            };
        });
    };
    /**
     * Gets a new dataframe containing all rows between the specified index values (inclusive).
     *
     * @param startIndexValue The index at which to start the new dataframe.
     * @param endIndexValue The index at which to end the new dataframe.
     *
     * @return Returns a new dataframe containing all values between the specified index values (inclusive).
     *
     * @example
     * <pre>
     *
     * const df = new DataFrame({
     *      index: [0, 1, 2, 3, 4, 6], // This is the default index.
     *      values: [10, 20, 30, 40, 50, 60],
     * });
     *
     * const middleSection = df.between(1, 4);
     * expect(middleSection.toArray()).to.eql([20, 30, 40, 50]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const timeSeriesDf = ... a dataframe indexed by date/time ...
     *
     * // Get all rows between the start and end dates (inclusive).
     * const result = timeSeriesDf.after(new Date(2016, 5, 4), new Date(2016, 5, 22));
     * </pre>
     */ DataFrame.prototype.between = function(startIndexValue, endIndexValue) {
        return this.startAt(startIndexValue).endAt(endIndexValue);
    };
    /**
     * Format the dataframe for display as a string.
     * This forces lazy evaluation to complete.
     *
     * @return Generates and returns a string representation of the dataframe.
     *
     * @example
     * <pre>
     *
     * console.log(df.toString());
     * </pre>
     */ DataFrame.prototype.toString = function() {
        var columnNames = this.getColumnNames();
        var header = [
            "__index__"
        ].concat(columnNames);
        var table = new (0, _easyTableDefault.default)();
        try {
            //TODO: for (const pair of this.asPairs()) {
            for(var _a = __values(this.toPairs()), _b = _a.next(); !_b.done; _b = _a.next()){
                var pair = _b.value;
                var index = pair[0];
                var value = pair[1];
                table.cell(header[0], index);
                for(var columnIndex = 0; columnIndex < columnNames.length; ++columnIndex){
                    var columnName = columnNames[columnIndex];
                    table.cell(header[columnIndex + 1], value[columnName]);
                }
                table.newRow();
            }
        } catch (e_43_1) {
            e_43 = {
                error: e_43_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_43) throw e_43.error;
            }
        }
        var e_43, _c;
        return table.toString();
    };
    /**
     * Parse a column with string values and convert it to a column with int values.
     *
     * @param columnNameOrNames Specifies the column name or array of column names to parse.
     *
     * @return Returns a new dataframe with values of particular named column(s) parsed from strings to ints.
     *
     * @example
     * <pre>
     *
     * const parsed = df.parseInts("MyIntColumn");
     * </pre>
     *
     * @example
     * <pre>
     *
     * const parsed = df.parseInts(["MyIntColumnA", "MyIntColumnA"]);
     * </pre>
     */ DataFrame.prototype.parseInts = function(columnNameOrNames) {
        if (isArray(columnNameOrNames)) {
            var working = this;
            try {
                for(var columnNameOrNames_1 = __values(columnNameOrNames), columnNameOrNames_1_1 = columnNameOrNames_1.next(); !columnNameOrNames_1_1.done; columnNameOrNames_1_1 = columnNameOrNames_1.next()){
                    var columnName = columnNameOrNames_1_1.value;
                    working = working.parseInts(columnName);
                }
            } catch (e_44_1) {
                e_44 = {
                    error: e_44_1
                };
            } finally{
                try {
                    if (columnNameOrNames_1_1 && !columnNameOrNames_1_1.done && (_a = columnNameOrNames_1.return)) _a.call(columnNameOrNames_1);
                } finally{
                    if (e_44) throw e_44.error;
                }
            }
            return working;
        } else return this.withSeries(columnNameOrNames, this.getSeries(columnNameOrNames).parseInts());
        var e_44, _a;
    };
    /**
     * Parse a column with string values and convert it to a column with float values.
     *
     * @param columnNameOrNames Specifies the column name or array of column names to parse.
     *
     * @return Returns a new dataframe with values of particular named column(s) parsed from strings to floats.
     *
     * @example
     * <pre>
     *
     * const parsed = df.parseFloats("MyFloatColumn");
     * </pre>
     *
     * @example
     * <pre>
     *
     * const parsed = df.parseFloats(["MyFloatColumnA", "MyFloatColumnA"]);
     * </pre>
     */ DataFrame.prototype.parseFloats = function(columnNameOrNames) {
        if (isArray(columnNameOrNames)) {
            var working = this;
            try {
                for(var columnNameOrNames_2 = __values(columnNameOrNames), columnNameOrNames_2_1 = columnNameOrNames_2.next(); !columnNameOrNames_2_1.done; columnNameOrNames_2_1 = columnNameOrNames_2.next()){
                    var columnName = columnNameOrNames_2_1.value;
                    working = working.parseFloats(columnName);
                }
            } catch (e_45_1) {
                e_45 = {
                    error: e_45_1
                };
            } finally{
                try {
                    if (columnNameOrNames_2_1 && !columnNameOrNames_2_1.done && (_a = columnNameOrNames_2.return)) _a.call(columnNameOrNames_2);
                } finally{
                    if (e_45) throw e_45.error;
                }
            }
            return working;
        } else return this.withSeries(columnNameOrNames, this.getSeries(columnNameOrNames).parseFloats());
        var e_45, _a;
    };
    /**
     * Parse a column with string values and convert it to a column with date values.
     *
     * @param columnNameOrNames Specifies the column name or array of column names to parse.
     * @param formatString Optional formatting string for dates.
     *
     * Moment is used for date parsing.
     * https://momentjs.com
     *
     * @return Returns a new dataframe with values of particular named column(s) parsed from strings to dates.
     *
     * @example
     * <pre>
     *
     * const parsed = df.parseDates("MyDateColumn");
     * </pre>
     *
     * @example
     * <pre>
     *
     * const parsed = df.parseDates(["MyDateColumnA", "MyDateColumnA"]);
     * </pre>
     */ DataFrame.prototype.parseDates = function(columnNameOrNames, formatString) {
        if (formatString) {
            if (!isString(formatString)) throw new Error("Expected optional 'formatString' parameter to 'DataFrame.parseDates' to be a string (if specified).");
        }
        if (isArray(columnNameOrNames)) {
            var working = this;
            try {
                for(var columnNameOrNames_3 = __values(columnNameOrNames), columnNameOrNames_3_1 = columnNameOrNames_3.next(); !columnNameOrNames_3_1.done; columnNameOrNames_3_1 = columnNameOrNames_3.next()){
                    var columnName = columnNameOrNames_3_1.value;
                    working = working.parseDates(columnName, formatString);
                }
            } catch (e_46_1) {
                e_46 = {
                    error: e_46_1
                };
            } finally{
                try {
                    if (columnNameOrNames_3_1 && !columnNameOrNames_3_1.done && (_a = columnNameOrNames_3.return)) _a.call(columnNameOrNames_3);
                } finally{
                    if (e_46) throw e_46.error;
                }
            }
            return working;
        } else return this.withSeries(columnNameOrNames, this.getSeries(columnNameOrNames).parseDates(formatString));
        var e_46, _a;
    };
    /**
     * Convert a column of values of different types to a column of string values.
     *
     * @param columnNames Specifies the column name or array of column names to convert to strings. Can also be a format spec that specifies which columns to convert and what their format should be.
     * @param formatString Optional formatting string for dates.
     *
     * Numeral.js is used for number formatting.
     * http://numeraljs.com/
     *
     * Moment is used for date formatting.
     * https://momentjs.com/docs/#/parsing/string-format/
     *
     * @return Returns a new dataframe with a particular named column converted from values to strings.
     *
     * @example
     * <pre>
     *
     * const result = df.toStrings("MyDateColumn", "YYYY-MM-DD");
     * </pre>
     *
     * @example
     * <pre>
     *
     * const result = df.toStrings("MyFloatColumn", "0.00");
     * </pre>
     */ DataFrame.prototype.toStrings = function(columnNames, formatString) {
        if (isObject(columnNames)) {
            try {
                for(var _a = __values(Object.keys(columnNames)), _b = _a.next(); !_b.done; _b = _a.next()){
                    var columnName = _b.value;
                    if (!isString(columnNames[columnName])) throw new Error("Expected values of 'columnNames' parameter to be strings when a format spec is passed in.");
                }
            } catch (e_47_1) {
                e_47 = {
                    error: e_47_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_47) throw e_47.error;
                }
            }
            if (!isUndefined(formatString)) throw new Error("Optional 'formatString' parameter to 'DataFrame.toStrings' should not be set when passing in a format spec.");
        } else {
            if (!isArray(columnNames)) {
                if (!isString(columnNames)) throw new Error("Expected 'columnNames' parameter to 'DataFrame.toStrings' to be a string, array of strings or format spec that specifes which columns should be converted to strings.");
            }
            if (formatString) {
                if (!isString(formatString)) throw new Error("Expected optional 'formatString' parameter to 'DataFrame.toStrings' to be a string (if specified).");
            }
        }
        if (isObject(columnNames)) {
            var working = this;
            try {
                for(var _d = __values(Object.keys(columnNames)), _e = _d.next(); !_e.done; _e = _d.next()){
                    var columnName = _e.value;
                    var columnFormatString = columnNames[columnName];
                    working = working.toStrings(columnName, columnFormatString);
                }
            } catch (e_48_1) {
                e_48 = {
                    error: e_48_1
                };
            } finally{
                try {
                    if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
                } finally{
                    if (e_48) throw e_48.error;
                }
            }
            return working;
        } else if (isArray(columnNames)) {
            var working = this;
            try {
                for(var columnNames_11 = __values(columnNames), columnNames_11_1 = columnNames_11.next(); !columnNames_11_1.done; columnNames_11_1 = columnNames_11.next()){
                    var columnName = columnNames_11_1.value;
                    working = working.toStrings(columnName, formatString);
                }
            } catch (e_49_1) {
                e_49 = {
                    error: e_49_1
                };
            } finally{
                try {
                    if (columnNames_11_1 && !columnNames_11_1.done && (_g = columnNames_11.return)) _g.call(columnNames_11);
                } finally{
                    if (e_49) throw e_49.error;
                }
            }
            return working;
        } else {
            var singleColumnName = columnNames;
            return this.withSeries(singleColumnName, this.getSeries(singleColumnName).toStrings(formatString));
        }
        var e_47, _c, e_48, _f, e_49, _g;
    };
    /**
     * Produces a new dataframe with all string values truncated to the requested maximum length.
     *
     * @param maxLength The maximum length of the string values after truncation.
     *
     * @return Returns a new dataframe with all strings truncated to the specified maximum length.
     *
     * @example
     * <pre>
     *
     * // Truncate all string columns to 100 characters maximum.
     * const truncatedDf = df.truncateString(100);
     * </pre>
     */ DataFrame.prototype.truncateStrings = function(maxLength) {
        if (!isNumber(maxLength)) throw new Error("Expected 'maxLength' parameter to 'truncateStrings' to be an integer.");
        return this.select(function(row) {
            var output = {};
            try {
                for(var _a = __values(Object.keys(row)), _b = _a.next(); !_b.done; _b = _a.next()){
                    var key = _b.value;
                    var value = row[key];
                    if (isString(value)) output[key] = value.substring(0, maxLength);
                    else output[key] = value;
                }
            } catch (e_50_1) {
                e_50 = {
                    error: e_50_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_50) throw e_50.error;
                }
            }
            var e_50, _c;
            return output;
        });
    };
    /**
     * Produces a new dataframe with all number values rounded to the specified number of places.
     *
     * @param numDecimalPlaces The number of decimal places, defaults to 2.
     *
     * @returns Returns a new dataframe with all number values rounded to the specified number of places.
     *
     * @example
     * <pre>
     *
     * const df = ... your data frame ...
     * const rounded = df.round(); // Round numbers to two decimal places.
     * </pre>
     *
     * @example
     * <pre>
     *
     * const df = ... your data frame ...
     * const rounded = df.round(3); // Round numbers to three decimal places.
     * </pre>
     */ DataFrame.prototype.round = function(numDecimalPlaces) {
        if (numDecimalPlaces !== undefined) {
            if (!isNumber(numDecimalPlaces)) throw new Error("Expected 'numDecimalPlaces' parameter to 'DataFrame.round' to be a number.");
        } else numDecimalPlaces = 2; // Default to two decimal places.
        return this.select(function(row) {
            var output = {};
            try {
                for(var _a = __values(Object.keys(row)), _b = _a.next(); !_b.done; _b = _a.next()){
                    var key = _b.value;
                    var value = row[key];
                    if (isNumber(value)) output[key] = parseFloat(value.toFixed(numDecimalPlaces));
                    else output[key] = value;
                }
            } catch (e_51_1) {
                e_51 = {
                    error: e_51_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_51) throw e_51.error;
                }
            }
            var e_51, _c;
            return output;
        });
    };
    /**
     * Forces lazy evaluation to complete and 'bakes' the dataframe into memory.
     *
     * @return Returns a dataframe that has been 'baked', all lazy evaluation has completed.
     *
     * @example
     * <pre>
     *
     * const baked = df.bake();
     * </pre>
     */ DataFrame.prototype.bake = function() {
        if (this.getContent().isBaked) // Already baked.
        return this;
        return new DataFrame({
            columnNames: this.getColumnNames(),
            values: this.toArray(),
            pairs: this.toPairs(),
            baked: true
        });
    };
    /**
     * Gets a new dataframe in reverse order.
     *
     * @return Returns a new dataframe that is the reverse of the input.
     *
     * @example
     * <pre>
     *
     * const reversedDf = df.reverse();
     * </pre>
     */ DataFrame.prototype.reverse = function() {
        var _this = this;
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: content.columnNames,
                values: new ReverseIterable(content.values),
                index: new ReverseIterable(content.index),
                pairs: new ReverseIterable(content.pairs)
            };
        });
    };
    /**
     * Returns only the set of rows in the dataframe that are distinct according to some criteria.
     * This can be used to remove duplicate rows from the dataframe.
     *
     * @param selector User-defined selector function that specifies the criteria used to make comparisons for duplicate rows.
     * Note that the selector determines the object used for the comparison.  If the selector returns a new instance of an array or a
     * javascript object, distinct will always include all rows since the object instances are different even if the members are the same.
     *
     * @return Returns a dataframe containing only unique values as determined by the 'selector' function.
     *
     * @example
     * <pre>
     *
     * // Remove duplicate rows by customer id. Will return only a single row per customer.
     * const distinctCustomers = salesDf.distinct(sale => sale.CustomerId);
     * </pre>
     *
     * @example
     *
     * <pre>
     * // Remove duplicate rows across mutliple columns
     * const safeJoinChar = '$';
     * const distinctCustomers = salesDf.distinct(sale => [sale.CustomerId, sale.MonthOfYear].join(safeJoinChar));
     * </pre>
     */ DataFrame.prototype.distinct = function(selector) {
        var _this = this;
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: content.columnNames,
                values: new DistinctIterable(content.values, selector),
                pairs: new DistinctIterable(content.pairs, function(pair) {
                    return selector && selector(pair[1]) || pair[1];
                })
            };
        });
    };
    /**
     * Collects rows in the dataframe into a series of groups according to the user-defined selector function that defines the group for each row.
     *
     * @param selector User-defined selector function that defines the value to group by.
     *
     * @return Returns a {@link Series} of groups. Each group is a dataframe with values that have been grouped by the 'selector' function.
     *
     * @example
     * <pre>
     *
     * const salesDf = ... product sales ...
     * const salesByProduct = salesDf.groupBy(sale => sale.ProductId);
     * for (const productSalesGroup of salesByProduct) {
     *      // ... do something with each product group ...
     *      const productId = productSalesGroup.first().ProductId;
     *      const totalSalesForProduct = productSalesGroup.deflate(sale => sale.Amount).sum();
     *      console.log(totalSalesForProduct);
     * }
     * </pre>
     */ DataFrame.prototype.groupBy = function(selector) {
        var _this = this;
        if (!isFunction(selector)) throw new Error("Expected 'selector' parameter to 'DataFrame.groupBy' to be a selector function that determines the value to group the series by.");
        return new Series(function() {
            var groups = []; // Each group, in order of discovery.
            var groupMap = {}; // Group map, records groups by key.
            var valueIndex = 0;
            try {
                for(var _a = __values(_this.getContent().pairs), _b = _a.next(); !_b.done; _b = _a.next()){
                    var pair = _b.value;
                    var groupKey = selector(pair[1], valueIndex);
                    ++valueIndex;
                    var existingGroup = groupMap[groupKey];
                    if (existingGroup) existingGroup.push(pair);
                    else {
                        var newGroup = [];
                        newGroup.push(pair);
                        groups.push(newGroup);
                        groupMap[groupKey] = newGroup;
                    }
                }
            } catch (e_52_1) {
                e_52 = {
                    error: e_52_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_52) throw e_52.error;
                }
            }
            var e_52, _c;
            return {
                values: groups.map(function(group) {
                    return new DataFrame({
                        pairs: group
                    });
                })
            };
        });
    };
    /**
     * Collects rows in the dataframe into a series of groups according to a user-defined selector function that identifies adjacent rows that should be in the same group.
     *
     * @param selector Optional selector that defines the value to group by.
     *
     * @return Returns a {@link Series} of groups. Each group is a dataframe with values that have been grouped by the 'selector' function.
     *
     * @example
     * <pre>
     *
     * // Some ultra simple stock trading strategy backtesting...
     * const dailyStockPriceDf = ... daily stock price for a company ...
     * const priceGroups  = dailyStockPriceDf.groupBy(day => day.close > day.movingAverage);
     * for (const priceGroup of priceGroups) {
     *      // ... do something with each stock price group ...
     *
     *      const firstDay = priceGroup.first();
     *      if (firstDay.close > movingAverage) {
     *          // This group of days has the stock price above its moving average.
     *          // ... maybe enter a long trade here ...
     *      }
     *      else {
     *          // This group of days has the stock price below its moving average.
     *          // ... maybe enter a short trade here ...
     *      }
     * }
     * </pre>
     */ DataFrame.prototype.groupSequentialBy = function(selector) {
        if (selector) {
            if (!isFunction(selector)) throw new Error("Expected 'selector' parameter to 'DataFrame.groupSequentialBy' to be a selector function that determines the value to group the series by.");
        } else selector = function(value) {
            return value;
        };
        return this.variableWindow(function(a, b) {
            return selector(a) === selector(b);
        });
    };
    /**
     * Concatenate multiple dataframes into a single dataframe.
     *
     * @param dataframes Array of dataframes to concatenate.
     *
     * @return Returns a single dataframe concatenated from multiple input dataframes.
     *
     * @example
     * <pre>
     *
     * const df1 = ...
     * const df2 = ...
     * const df3 = ...
     * const concatenatedDf = DataFrame.concat([df1, df2, df3]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const dfs = [... array of dataframes...];
     * const concatenatedDf = DataFrame.concat(dfs);
     * </pre>
     */ DataFrame.concat = function(dataframes) {
        if (!isArray(dataframes)) throw new Error("Expected 'dataframes' parameter to 'DataFrame.concat' to be an array of dataframes.");
        return new DataFrame(function() {
            var upcast = dataframes; // Upcast so that we can access private index, values and pairs.
            var contents = upcast.map(function(dataframe) {
                return dataframe.getContent();
            });
            var columnNames = [];
            try {
                for(var contents_1 = __values(contents), contents_1_1 = contents_1.next(); !contents_1_1.done; contents_1_1 = contents_1.next()){
                    var content = contents_1_1.value;
                    try {
                        for(var _a = __values(content.columnNames), _b = _a.next(); !_b.done; _b = _a.next()){
                            var columnName = _b.value;
                            columnNames.push(columnName);
                        }
                    } catch (e_53_1) {
                        e_53 = {
                            error: e_53_1
                        };
                    } finally{
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        } finally{
                            if (e_53) throw e_53.error;
                        }
                    }
                }
            } catch (e_54_1) {
                e_54 = {
                    error: e_54_1
                };
            } finally{
                try {
                    if (contents_1_1 && !contents_1_1.done && (_d = contents_1.return)) _d.call(contents_1);
                } finally{
                    if (e_54) throw e_54.error;
                }
            }
            columnNames = makeDistinct(columnNames);
            var e_54, _d, e_53, _c;
            return {
                columnNames: columnNames,
                values: new ConcatIterable(contents.map(function(content) {
                    return content.values;
                })),
                pairs: new ConcatIterable(contents.map(function(content) {
                    return content.pairs;
                }))
            };
        });
    };
    /**
     * Concatenate multiple other dataframes onto this dataframe.
     *
     * @param dataframes Multiple arguments. Each can be either a dataframe or an array of dataframes.
     *
     * @return Returns a single dataframes concatenated from multiple input dataframes.
     *
     * @example
     * <pre>
     *
     * const concatenatedDf = dfA.concat(dfB);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const concatenatedDf = dfA.concat(dfB, dfC);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const concatenatedDf = dfA.concat([dfB, dfC]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const concatenatedDf = dfA.concat(dfB, [dfC, dfD]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const otherDfs = [... array of dataframes...];
     * const concatenatedDf = dfA.concat(otherDfs);
     * </pre>
     */ DataFrame.prototype.concat = function() {
        var dataframes = [];
        for(var _i = 0; _i < arguments.length; _i++)dataframes[_i] = arguments[_i];
        var concatInput = [
            this
        ];
        try {
            for(var dataframes_1 = __values(dataframes), dataframes_1_1 = dataframes_1.next(); !dataframes_1_1.done; dataframes_1_1 = dataframes_1.next()){
                var input = dataframes_1_1.value;
                if (isArray(input)) try {
                    for(var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()){
                        var subInput = input_1_1.value;
                        concatInput.push(subInput);
                    }
                } catch (e_55_1) {
                    e_55 = {
                        error: e_55_1
                    };
                } finally{
                    try {
                        if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
                    } finally{
                        if (e_55) throw e_55.error;
                    }
                }
                else concatInput.push(input);
            }
        } catch (e_56_1) {
            e_56 = {
                error: e_56_1
            };
        } finally{
            try {
                if (dataframes_1_1 && !dataframes_1_1.done && (_b = dataframes_1.return)) _b.call(dataframes_1);
            } finally{
                if (e_56) throw e_56.error;
            }
        }
        var e_56, _b, e_55, _a;
        return DataFrame.concat(concatInput);
    };
    /**
    * Zip (or merge) together multiple dataframes to create a new dataframe.
    * Preserves the index of the first dataframe.
    *
    * @param input An iterable of datafames to be zipped.
    * @param zipper User-defined zipper function that merges rows. It produces rows for the new dataframe based-on rows from the input dataframes.
    *
    * @return Returns a single dataframe zipped (or merged) from multiple input dataframes.
    *
    * @example
    * <pre>
    *
    * function produceNewRow (inputRows) {
    *       const outputRow = {
    *           // Produce output row based on the contents of the input rows.
    *       };
    *       return outputRow;
    * }
    *
    * const inputDfs = [... array of input dataframes ...];
    * const zippedDf = DataFrame.zip(inputDfs, produceNewRow);
    *
    * </pre>
    *
    * @example
    * <pre>
    *
    * function produceNewRow (inputRows) {
    *       const outputRow = {
    *           // Produce output row based on the contents of the input rows.
    *       };
    *       return outputRow;
    * }
    *
    * const dfA = new DataFrame([ { Value: 10 }, { Value: 20 }, { Value: 30 }]);
    * const dfB = new DataFrame([ { Value: 100 }, { Value: 200 }, { Value: 300 }]);
    * const zippedDf = DataFrame.zip([dfA, dfB], produceNewRow);
    * </pre>
    */ DataFrame.zip = function(dataframes, zipper) {
        var input = Array.from(dataframes);
        if (input.length === 0) return new DataFrame();
        var firstSeries = input[0];
        if (firstSeries.none()) return new DataFrame();
        return new DataFrame(function() {
            var firstSeriesUpCast = firstSeries;
            var upcast = input; // Upcast so that we can access private index, values and pairs.
            return {
                index: firstSeriesUpCast.getContent().index,
                values: new ZipIterable(upcast.map(function(s) {
                    return s.getContent().values;
                }), zipper)
            };
        });
    };
    DataFrame.prototype.zip = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        var selector = args[args.length - 1];
        var input = [
            this
        ].concat(args.slice(0, args.length - 1));
        return DataFrame.zip(input, function(values) {
            return selector.apply(void 0, __spread(values));
        });
    };
    /**
     * Sorts the dataframe in ascending order by a value defined by the user-defined selector function.
     *
     * @param selector User-defined selector function that selects the value to sort by.
     *
     * @return Returns a new dataframe that has been ordered accorrding to the value chosen by the selector function.
     *
     * @example
     * <pre>
     *
     * // Order sales by amount from least to most.
     * const orderedDf = salesDf.orderBy(sale => sale.Amount);
     * </pre>
     */ DataFrame.prototype.orderBy = function(selector) {
        var content = this.getContent();
        return new OrderedDataFrame({
            columnNames: content.columnNames,
            values: content.values,
            pairs: content.pairs,
            selector: selector,
            direction: Direction.Ascending,
            parent: null
        });
    };
    /**
     * Sorts the dataframe in descending order by a value defined by the user-defined selector function.
     *
     * @param selector User-defined selector function that selects the value to sort by.
     *
     * @return Returns a new dataframe that has been ordered accorrding to the value chosen by the selector function.
     *
     * @example
     * <pre>
     *
     * // Order sales by amount from most to least
     * const orderedDf = salesDf.orderByDescending(sale => sale.Amount);
     * </pre>
     */ DataFrame.prototype.orderByDescending = function(selector) {
        var content = this.getContent();
        return new OrderedDataFrame({
            columnNames: content.columnNames,
            values: content.values,
            pairs: content.pairs,
            selector: selector,
            direction: Direction.Descending,
            parent: null
        });
    };
    /**
     * Creates a new dataframe by merging two input dataframes.
     * The resulting dataframe contains the union of rows from the two input dataframes.
     * These are the unique combination of rows in both dataframe.
     * This is basically a concatenation and then elimination of duplicates.
     *
     * @param other The other dataframes to merge.
     * @param selector Optional user-defined selector function that selects the value to compare to determine distinctness.
     *
     * @return Returns the union of the two dataframes.
     *
     * @example
     * <pre>
     *
     * const dfA = ...
     * const dfB = ...
     * const merged = dfA.union(dfB);
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Merge two sets of customer records that may contain the same
     * // customer record in each set. This is basically a concatenation
     * // of the dataframes and then an elimination of any duplicate records
     * // that result.
     * const customerRecordsA = ...
     * const customerRecordsB = ...
     * const mergedCustomerRecords = customerRecordsA.union(
     *      customerRecordsB,
     *      customerRecord => customerRecord.CustomerId
     * );
     * </pre>
     *
     *
     * @example
     * <pre>
     *
     * // Note that you can achieve the exact same result as the previous
     * // example by doing a {@link DataFrame.concat) and {@link DataFrame.distinct}
     * // of the dataframes and then an elimination of any duplicate records
     * // that result.
     * const customerRecordsA = ...
     * const customerRecordsB = ...
     * const mergedCustomerRecords = customerRecordsA
     *      .concat(customerRecordsB)
     *      .distinct(customerRecord => customerRecord.CustomerId);
     * </pre>
     *
     */ DataFrame.prototype.union = function(other, selector) {
        if (selector) {
            if (!isFunction(selector)) throw new Error("Expected optional 'selector' parameter to 'DataFrame.union' to be a selector function.");
        }
        return this.concat(other).distinct(selector);
    };
    /**
     * Creates a new dataframe by merging two input dataframes.
     * The resulting dataframe contains the intersection of rows from the two input dataframes.
     * These are only the rows that appear in both dataframes.
     *
     * @param inner The inner dataframe to merge (the dataframe you call the function on is the 'outer' dataframe).
     * @param outerSelector Optional user-defined selector function that selects the key from the outer dataframe that is used to match the two dataframes.
     * @param innerSelector Optional user-defined selector function that selects the key from the inner dataframe that is used to match the two dataframes.
     *
     * @return Returns a new dataframe that contains the intersection of rows from the two input dataframes.
     *
     * @example
     * <pre>
     *
     * const dfA = ...
     * const dfB = ...
     * const mergedDf = dfA.intersection(dfB);
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Merge two sets of customer records to find only the
     * // customers that appears in both.
     * const customerRecordsA = ...
     * const customerRecordsB = ...
     * const intersectionOfCustomerRecords = customerRecordsA.intersection(
     *      customerRecordsB,
     *      customerRecord => customerRecord.CustomerId
     * );
     * </pre>
     * */ DataFrame.prototype.intersection = function(inner, outerSelector, innerSelector) {
        if (outerSelector) {
            if (!isFunction(outerSelector)) throw new Error("Expected optional 'outerSelector' parameter to 'DataFrame.intersection' to be a function.");
        } else outerSelector = function(value) {
            return value;
        };
        if (innerSelector) {
            if (!isFunction(innerSelector)) throw new Error("Expected optional 'innerSelector' parameter to 'DataFrame.intersection' to be a function.");
        } else innerSelector = function(value) {
            return value;
        };
        var outer = this;
        return outer.filter(function(outerValue) {
            var outerKey = outerSelector(outerValue);
            return inner.filter(function(innerValue) {
                return outerKey === innerSelector(innerValue);
            }).any();
        });
    };
    /**
     * Creates a new dataframe by merging two input dataframes.
     * The resulting dataframe contains only the rows from the 1st dataframe that don't appear in the 2nd dataframe.
     * This is essentially subtracting the rows from the 2nd dataframe from the 1st and creating a new dataframe with the remaining rows.
     *
     * @param inner The inner dataframe to merge (the dataframe you call the function on is the 'outer' dataframe).
     * @param outerSelector Optional user-defined selector function that selects the key from the outer dataframe that is used to match the two dataframes.
     * @param innerSelector Optional user-defined selector function that selects the key from the inner dataframe that is used to match the two dataframes.
     *
     * @return Returns a new dataframe that contains only the rows from the 1st dataframe that don't appear in the 2nd dataframe.
     *
     * @example
     * <pre>
     *
     * const dfA = ...
     * const dfB = ...
     * const remainingDf = dfA.except(dfB);
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Find the list of customers haven't bought anything recently.
     * const allCustomers = ... list of all customers ...
     * const recentCustomers = ... list of customers who have purchased recently ...
     * const remainingCustomers = allCustomers.except(
     *      recentCustomers,
     *      customerRecord => customerRecord.CustomerId
     * );
     * </pre>
     */ DataFrame.prototype.except = function(inner, outerSelector, innerSelector) {
        if (outerSelector) {
            if (!isFunction(outerSelector)) throw new Error("Expected optional 'outerSelector' parameter to 'DataFrame.except' to be a function.");
        } else outerSelector = function(value) {
            return value;
        };
        if (innerSelector) {
            if (!isFunction(innerSelector)) throw new Error("Expected optional 'innerSelector' parameter to 'DataFrame.except' to be a function.");
        } else innerSelector = function(value) {
            return value;
        };
        var outer = this;
        return outer.filter(function(outerValue) {
            var outerKey = outerSelector(outerValue);
            return inner.filter(function(innerValue) {
                return outerKey === innerSelector(innerValue);
            }).none();
        });
    };
    /**
      * Creates a new dataframe by merging two input dataframes.
      * The resulting dataframe contains only those rows that have matching keys in both input dataframes.
      *
      * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).
      * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.
      * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.
      * @param resultSelector User-defined function that merges outer and inner values.
      *
      * @return Returns the new merged dataframe.
      *
      * @example
      * <pre>
      *
      * // Join together two sets of customers to find those
      * // that have bought both product A and product B.
      * const customerWhoBoughtProductA = ...
      * const customerWhoBoughtProductB = ...
      * const customersWhoBoughtBothProductsDf = customerWhoBoughtProductA.join(
      *          customerWhoBoughtProductB,
      *          customerA => customerA.CustomerId, // Join key.
      *          customerB => customerB.CustomerId, // Join key.
      *          (customerA, customerB) => {
      *              return {
      *                  // ... merge the results ...
      *              };
      *          }
      *      );
      * </pre>
      */ DataFrame.prototype.join = function(inner, outerKeySelector, innerKeySelector, resultSelector) {
        if (!isFunction(outerKeySelector)) throw new Error("Expected 'outerKeySelector' parameter of 'DataFrame.join' to be a selector function.");
        if (!isFunction(innerKeySelector)) throw new Error("Expected 'innerKeySelector' parameter of 'DataFrame.join' to be a selector function.");
        if (!isFunction(resultSelector)) throw new Error("Expected 'resultSelector' parameter of 'DataFrame.join' to be a selector function.");
        var outer = this;
        return new DataFrame(function() {
            var innerMap = inner.groupBy(innerKeySelector).toObject(function(group) {
                return innerKeySelector(group.first());
            }, function(group) {
                return group;
            });
            var outerContent = outer.getContent();
            var output = [];
            try {
                for(var outer_1 = __values(outer), outer_1_1 = outer_1.next(); !outer_1_1.done; outer_1_1 = outer_1.next()){
                    var outerValue = outer_1_1.value;
                    var outerKey = outerKeySelector(outerValue);
                    var innerGroup = innerMap[outerKey];
                    if (innerGroup) try {
                        for(var innerGroup_1 = __values(innerGroup), innerGroup_1_1 = innerGroup_1.next(); !innerGroup_1_1.done; innerGroup_1_1 = innerGroup_1.next()){
                            var innerValue = innerGroup_1_1.value;
                            output.push(resultSelector(outerValue, innerValue));
                        }
                    } catch (e_57_1) {
                        e_57 = {
                            error: e_57_1
                        };
                    } finally{
                        try {
                            if (innerGroup_1_1 && !innerGroup_1_1.done && (_a = innerGroup_1.return)) _a.call(innerGroup_1);
                        } finally{
                            if (e_57) throw e_57.error;
                        }
                    }
                }
            } catch (e_58_1) {
                e_58 = {
                    error: e_58_1
                };
            } finally{
                try {
                    if (outer_1_1 && !outer_1_1.done && (_b = outer_1.return)) _b.call(outer_1);
                } finally{
                    if (e_58) throw e_58.error;
                }
            }
            var e_58, _b, e_57, _a;
            return {
                values: output
            };
        });
    };
    /**
     * Creates a new dataframe by merging two input dataframes.
     * The resulting dataframe contains only those rows that are only present in one or the other of the dataframes, or both.
     *
     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).
     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.
     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.
     * @param resultSelector User-defined function that merges outer and inner values.
     *
     * Implementation from here:
     *
     * 	http://blogs.geniuscode.net/RyanDHatch/?p=116
     *
     * @return Returns the new merged dataframe.
     *
     * @example
     * <pre>
     *
     * // Join together two sets of customers to find those
     * // that have bought either product A or product B, or both.
     * const customerWhoBoughtProductA = ...
     * const customerWhoBoughtProductB = ...
     * const customersWhoBoughtEitherProductButNotBothDf = customerWhoBoughtProductA.joinOuter(
     *          customerWhoBoughtProductB,
     *          customerA => customerA.CustomerId, // Join key.
     *          customerB => customerB.CustomerId, // Join key.
     *          (customerA, customerB) => {
     *              return {
     *                  // ... merge the results ...
     *              };
     *          }
     *      );
     * </pre>
     */ DataFrame.prototype.joinOuter = function(inner, outerKeySelector, innerKeySelector, resultSelector) {
        if (!isFunction(outerKeySelector)) throw new Error("Expected 'outerKeySelector' parameter of 'DataFrame.joinOuter' to be a selector function.");
        if (!isFunction(innerKeySelector)) throw new Error("Expected 'innerKeySelector' parameter of 'DataFrame.joinOuter' to be a selector function.");
        if (!isFunction(resultSelector)) throw new Error("Expected 'resultSelector' parameter of 'DataFrame.joinOuter' to be a selector function.");
        // Get the results in the outer that are not in the inner.
        var outer = this;
        var outerResult = outer.except(inner, outerKeySelector, innerKeySelector).select(function(outer) {
            return resultSelector(outer, null);
        }).resetIndex();
        // Get the results in the inner that are not in the outer.
        var innerResult = inner.except(outer, innerKeySelector, outerKeySelector).select(function(inner) {
            return resultSelector(null, inner);
        }).resetIndex();
        // Get the intersection of results between inner and outer.
        var intersectionResults = outer.join(inner, outerKeySelector, innerKeySelector, resultSelector);
        return outerResult.concat(intersectionResults).concat(innerResult).resetIndex();
    };
    /**
     * Creates a new dataframe by merging two input dataframes.
     * The resulting dataframe contains only those rows that present either in both dataframes or only in the outer (left) dataframe.
     *
     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).
     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.
     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.
     * @param resultSelector User-defined function that merges outer and inner values.
     *
     * Implementation from here:
     *
     * 	http://blogs.geniuscode.net/RyanDHatch/?p=116
     *
     * @return Returns the new merged dataframe.
     *
     * @example
     * <pre>
     *
     * // Join together two sets of customers to find those
     * // that have bought either just product A or both product A and product B.
     * const customerWhoBoughtProductA = ...
     * const customerWhoBoughtProductB = ...
     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterLeft(
     *          customerWhoBoughtProductB,
     *          customerA => customerA.CustomerId, // Join key.
     *          customerB => customerB.CustomerId, // Join key.
     *          (customerA, customerB) => {
     *              return {
     *                  // ... merge the results ...
     *              };
     *          }
     *      );
     * </pre>
     */ DataFrame.prototype.joinOuterLeft = function(inner, outerKeySelector, innerKeySelector, resultSelector) {
        if (!isFunction(outerKeySelector)) throw new Error("Expected 'outerKeySelector' parameter of 'DataFrame.joinOuterLeft' to be a selector function.");
        if (!isFunction(innerKeySelector)) throw new Error("Expected 'innerKeySelector' parameter of 'DataFrame.joinOuterLeft' to be a selector function.");
        if (!isFunction(resultSelector)) throw new Error("Expected 'resultSelector' parameter of 'DataFrame.joinOuterLeft' to be a selector function.");
        // Get the results in the outer that are not in the inner.
        var outer = this;
        var outerResult = outer.except(inner, outerKeySelector, innerKeySelector).select(function(outer) {
            return resultSelector(outer, null);
        }).resetIndex();
        // Get the intersection of results between inner and outer.
        var intersectionResults = outer.join(inner, outerKeySelector, innerKeySelector, resultSelector);
        return outerResult.concat(intersectionResults).resetIndex();
    };
    /**
     * Creates a new dataframe by merging two input dataframes.
     * The resulting dataframe contains only those rows that present either in both dataframes or only in the inner (right) dataframe.
     *
     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).
     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.
     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.
     * @param resultSelector User-defined function that merges outer and inner values.
     *
     * Implementation from here:
     *
     * 	http://blogs.geniuscode.net/RyanDHatch/?p=116
     *
     * @return Returns the new merged dataframe.
     *
     * @example
     * <pre>
     *
     * // Join together two sets of customers to find those
     * // that have bought either just product B or both product A and product B.
     * const customerWhoBoughtProductA = ...
     * const customerWhoBoughtProductB = ...
     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterRight(
     *          customerWhoBoughtProductB,
     *          customerA => customerA.CustomerId, // Join key.
     *          customerB => customerB.CustomerId, // Join key.
     *          (customerA, customerB) => {
     *              return {
     *                  // ... merge the results ...
     *              };
     *          }
     *      );
     * </pre>
     */ DataFrame.prototype.joinOuterRight = function(inner, outerKeySelector, innerKeySelector, resultSelector) {
        if (!isFunction(outerKeySelector)) throw new Error("Expected 'outerKeySelector' parameter of 'DataFrame.joinOuterRight' to be a selector function.");
        if (!isFunction(innerKeySelector)) throw new Error("Expected 'innerKeySelector' parameter of 'DataFrame.joinOuterRight' to be a selector function.");
        if (!isFunction(resultSelector)) throw new Error("Expected 'resultSelector' parameter of 'DataFrame.joinOuterRight' to be a selector function.");
        // Get the results in the inner that are not in the outer.
        var outer = this;
        var innerResult = inner.except(outer, innerKeySelector, outerKeySelector).select(function(inner) {
            return resultSelector(null, inner);
        }).resetIndex();
        // Get the intersection of results between inner and outer.
        var intersectionResults = outer.join(inner, outerKeySelector, innerKeySelector, resultSelector);
        return intersectionResults.concat(innerResult).resetIndex();
    };
    /**
     * Produces a summary of dataframe.
     *
     * @param spec Optional parameter that specifies which columns to aggregate and how to aggregate them. Leave this out to produce a default summary of all columns.
     *
     * @returns A object with fields that summary the values in the dataframe.
     *
     * @example
     * <pre>
     *
     * const summary = df.summarize();
     * console.log(summary);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const summary = df.summarize({ // Summarize using pre-defined functions.
     *      Column1: Series.sum,
     *      Column2: Series.average,
     *      Column3: Series.count,
     * });
     * console.log(summary);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const summary = df.summarize({ // Summarize using custom functions.
     *      Column1: series => series.sum(),
     *      Column2: series => series.std(),
     *      ColumnN: whateverFunctionYouWant,
     * });
     * console.log(summary);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const summary = df.summarize({ // Multiple output fields per column.
     *      Column1: {
     *          OutputField1: Series.sum,
     *          OutputField2: Series.average,
     *      },
     *      Column2: {
     *          OutputField3: series => series.sum(),
     *          OutputFieldN: whateverFunctionYouWant,
     *      },
     * });
     * console.log(summary);
     * </pre>
     */ DataFrame.prototype.summarize = function(spec) {
        if (spec && !isObject(spec)) throw new Error("Expected 'spec' parameter to 'DataFrame.summarize' to be an object that specifies how to summarize the dataframe.");
        if (!spec) {
            spec = {};
            try {
                for(var _a = __values(this.getColumnNames()), _b = _a.next(); !_b.done; _b = _a.next()){
                    var columnName = _b.value;
                    var columnSpec = {};
                    columnSpec[columnName + "_sum"] = Series.sum;
                    columnSpec[columnName + "_average"] = Series.average;
                    columnSpec[columnName + "_count"] = Series.count;
                    spec[columnName] = columnSpec;
                }
            } catch (e_59_1) {
                e_59 = {
                    error: e_59_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_59) throw e_59.error;
                }
            }
        }
        try {
            for(var _d = __values(Object.keys(spec)), _e = _d.next(); !_e.done; _e = _d.next()){
                var inputColumnName = _e.value;
                var inputSpec = spec[inputColumnName];
                if (isFunction(inputSpec)) {
                    spec[inputColumnName] = {}; // Expand the spec.
                    spec[inputColumnName][inputColumnName] = inputSpec;
                }
            }
        } catch (e_60_1) {
            e_60 = {
                error: e_60_1
            };
        } finally{
            try {
                if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
            } finally{
                if (e_60) throw e_60.error;
            }
        }
        var inputColumnNames = Object.keys(spec);
        var outputFieldsMap = toMap(inputColumnNames, function(valueColumnName) {
            return valueColumnName;
        }, function(inputColumnName) {
            return Object.keys(spec[inputColumnName]);
        });
        var output = {};
        try {
            for(var inputColumnNames_1 = __values(inputColumnNames), inputColumnNames_1_1 = inputColumnNames_1.next(); !inputColumnNames_1_1.done; inputColumnNames_1_1 = inputColumnNames_1.next()){
                var inputColumnName = inputColumnNames_1_1.value;
                var outputFieldNames = outputFieldsMap[inputColumnName];
                try {
                    for(var outputFieldNames_1 = __values(outputFieldNames), outputFieldNames_1_1 = outputFieldNames_1.next(); !outputFieldNames_1_1.done; outputFieldNames_1_1 = outputFieldNames_1.next()){
                        var outputFieldName = outputFieldNames_1_1.value;
                        var aggregatorFn = spec[inputColumnName][outputFieldName];
                        output[outputFieldName] = aggregatorFn(this.getSeries(inputColumnName));
                    }
                } catch (e_61_1) {
                    e_61 = {
                        error: e_61_1
                    };
                } finally{
                    try {
                        if (outputFieldNames_1_1 && !outputFieldNames_1_1.done && (_g = outputFieldNames_1.return)) _g.call(outputFieldNames_1);
                    } finally{
                        if (e_61) throw e_61.error;
                    }
                }
            }
        } catch (e_62_1) {
            e_62 = {
                error: e_62_1
            };
        } finally{
            try {
                if (inputColumnNames_1_1 && !inputColumnNames_1_1.done && (_h = inputColumnNames_1.return)) _h.call(inputColumnNames_1);
            } finally{
                if (e_62) throw e_62.error;
            }
        }
        var e_59, _c, e_60, _f, e_62, _h, e_61, _g;
        return output;
    };
    /**
     * Reshape (or pivot) a dataframe based on column values.
     * This is a powerful function that combines grouping, aggregation and sorting.
     *
     * @param columnOrColumns Column name whose values make the new DataFrame's columns.
     * @param valueColumnNameOrSpec Column name or column spec that defines the columns whose values should be aggregated.
     * @param aggregator Optional function used to aggregate pivotted vales.
     *
     * @return Returns a new dataframe that has been pivoted based on a particular column's values.
     *
     * @example
     * <pre>
     *
     * // Simplest example.
     * // Group by the values in 'PivotColumn'.
     * // The unique set of values in 'PivotColumn' becomes the columns in the resulting dataframe.
     * // The column 'ValueColumn' is aggregated for each group and this becomes the
     * // values in the new output column.
     * const pivottedDf = df.pivot("PivotColumn", "ValueColumn", values => values.average());
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Multiple input column example.
     * // Similar to the previous example except now we are aggregating multiple input columns.
     * // Each group has the average computed for 'ValueColumnA' and the sum for 'ValueColumnB'.
     * const pivottedDf = df.pivot("PivotColumn", {
     *      ValueColumnA: aValues => aValues.average(),
     *      ValueColumnB:  bValues => bValues.sum(),
     * });
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Multiple output column example.
     * // Similar to the previous example except now we are doing multiple aggregations for each input column.
     * // The example produces an output dataframe with columns OutputColumnA, B, C and D.
     * // OutputColumnA/B are the sum and average of ValueColumnA across each group as defined by PivotColumn.
     * // OutputColumnC/D are the sum and average of ValueColumnB across each group as defined by PivotColumn.
     * const pivottedDf = df.pivot("PivotColumn", {
     *      ValueColumnA: {
     *          OutputColumnA: aValues => aValues.sum(),
     *          OutputColumnB: aValues => aValues.average(),
     *      },
     *      ValueColumnB: {
     *          OutputColumnC: bValues => bValues.sum(),
     *          OutputColumnD: bValues => bValues.average(),
     *      },
     * });
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Full multi-column example.
     * // Similar to the previous example now we are pivotting on multiple columns.
     * // We now group by the 'PivotColumnA' and then by 'PivotColumnB', effectively creating a
     * // multi-level group.
     * const pivottedDf = df.pivot(["PivotColumnA", "PivotColumnB" ], {
     *      ValueColumnA: aValues => aValues.average(),
     *      ValueColumnB:  bValues => bValues.sum(),
     * });
     * </pre>
     *
     * @example
     * <pre>
     *
     * // To help understand the pivot function, let's look at what it does internally.
     * // Take the simplest example:
     * const pivottedDf = df.pivot("PivotColumn", "ValueColumn", values => values.average());
     *
     * // If we expand out the internals of the pivot function, it will look something like this:
     * const pivottedDf = df.groupBy(row => row.PivotColumn)
     *          .select(group => ({
     *              PivotColumn: group.deflate(row => row.ValueColumn).average()
     *          }))
     *          .orderBy(row  => row.PivotColumn);
     *
     * // You can see that pivoting a dataframe is the same as grouping, aggregating and sorting it.
     * // Does pivoting seem simpler now?
     *
     * // It gets more complicated than that of course, because the pivot function supports multi-level nested
     * // grouping and aggregation of multiple columns. So a full expansion of the pivot function is rather complex.
     * </pre>
     */ DataFrame.prototype.pivot = function(columnOrColumns, valueColumnNameOrSpec, aggregator) {
        var columnNames;
        if (isString(columnOrColumns)) columnNames = [
            columnOrColumns
        ];
        else {
            if (!isArray(columnOrColumns)) throw new Error("Expected 'columnOrColumns' parameter to 'DataFrame.pivot' to be a string or an array of strings that identifies the column(s) whose values make the new DataFrame's columns.");
            columnNames = Array.from(columnOrColumns);
            if (columnNames.length === 0) throw new Error("Expected 'columnOrColumns' parameter to 'DataFrame.pivot' to contain at least one string.");
            try {
                for(var columnNames_12 = __values(columnNames), columnNames_12_1 = columnNames_12.next(); !columnNames_12_1.done; columnNames_12_1 = columnNames_12.next()){
                    var columnName = columnNames_12_1.value;
                    if (!isString(columnName)) throw new Error("Expected 'columnOrColumns' parameter to 'DataFrame.pivot' to be an array of strings, each string identifies a column in the DataFrame on which to pivot.");
                }
            } catch (e_63_1) {
                e_63 = {
                    error: e_63_1
                };
            } finally{
                try {
                    if (columnNames_12_1 && !columnNames_12_1.done && (_a = columnNames_12.return)) _a.call(columnNames_12);
                } finally{
                    if (e_63) throw e_63.error;
                }
            }
        }
        var aggSpec;
        if (!isObject(valueColumnNameOrSpec)) {
            if (!isString(valueColumnNameOrSpec)) throw new Error("Expected 'value' parameter to 'DataFrame.pivot' to be a string that identifies the column whose values to aggregate or a column spec that defines which column contains the value ot aggregate and the ways to aggregate that value.");
            if (!isFunction(aggregator)) throw new Error("Expected 'aggregator' parameter to 'DataFrame.pivot' to be a function to aggregate pivoted values.");
            var aggColumnName = valueColumnNameOrSpec;
            var outputSpec = {};
            outputSpec[aggColumnName] = aggregator;
            aggSpec = {};
            aggSpec[aggColumnName] = outputSpec;
        } else {
            aggSpec = valueColumnNameOrSpec;
            try {
                for(var _b = __values(Object.keys(aggSpec)), _c = _b.next(); !_c.done; _c = _b.next()){
                    var inputColumnName = _c.value;
                    var columnAggSpec = aggSpec[inputColumnName];
                    if (isFunction(columnAggSpec)) {
                        aggSpec[inputColumnName] = {}; // Expand the pivot spec.
                        aggSpec[inputColumnName][inputColumnName] = columnAggSpec;
                    }
                }
            } catch (e_64_1) {
                e_64 = {
                    error: e_64_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                } finally{
                    if (e_64) throw e_64.error;
                }
            }
        }
        var firstColumnName = columnNames[0];
        var working = this.groupBy(function(row) {
            return row[firstColumnName];
        }).select(function(group) {
            var output = {};
            output[firstColumnName] = group.first()[firstColumnName];
            output.src = group;
            return output;
        });
        var _loop_1 = function(columnNameIndex) {
            var nextColumnName = columnNames[columnNameIndex];
            working = working.selectMany(function(parentGroup) {
                var src = parentGroup.src;
                return src.groupBy(function(row) {
                    return row[nextColumnName];
                }).select(function(subGroup) {
                    var output = Object.assign({}, parentGroup);
                    output[nextColumnName] = subGroup.first()[nextColumnName];
                    output.src = subGroup;
                    return output;
                });
            });
        };
        for(var columnNameIndex = 1; columnNameIndex < columnNames.length; ++columnNameIndex)_loop_1(columnNameIndex);
        var valueColumnNames = Object.keys(aggSpec);
        var outputColumnsMap = toMap(valueColumnNames, function(valueColumnName) {
            return valueColumnName;
        }, function(valueColumnName) {
            return Object.keys(aggSpec[valueColumnName]);
        });
        var pivotted = working.inflate(function(row) {
            var _loop_2 = function(valueColumnName) {
                var outputColumnNames = outputColumnsMap[valueColumnName];
                try {
                    for(var outputColumnNames_1 = __values(outputColumnNames), outputColumnNames_1_1 = outputColumnNames_1.next(); !outputColumnNames_1_1.done; outputColumnNames_1_1 = outputColumnNames_1.next()){
                        var outputColumName = outputColumnNames_1_1.value;
                        var aggregatorFn = aggSpec[valueColumnName][outputColumName];
                        row[outputColumName] = aggregatorFn(row.src.deflate(function(srcRow) {
                            return srcRow[valueColumnName];
                        }));
                    }
                } catch (e_65_1) {
                    e_65 = {
                        error: e_65_1
                    };
                } finally{
                    try {
                        if (outputColumnNames_1_1 && !outputColumnNames_1_1.done && (_a = outputColumnNames_1.return)) _a.call(outputColumnNames_1);
                    } finally{
                        if (e_65) throw e_65.error;
                    }
                }
                var e_65, _a;
            };
            try {
                for(var valueColumnNames_1 = __values(valueColumnNames), valueColumnNames_1_1 = valueColumnNames_1.next(); !valueColumnNames_1_1.done; valueColumnNames_1_1 = valueColumnNames_1.next()){
                    var valueColumnName = valueColumnNames_1_1.value;
                    _loop_2(valueColumnName);
                }
            } catch (e_66_1) {
                e_66 = {
                    error: e_66_1
                };
            } finally{
                try {
                    if (valueColumnNames_1_1 && !valueColumnNames_1_1.done && (_a = valueColumnNames_1.return)) _a.call(valueColumnNames_1);
                } finally{
                    if (e_66) throw e_66.error;
                }
            }
            delete row.src;
            var e_66, _a;
            return row;
        });
        var ordered = pivotted.orderBy(function(row) {
            return row[firstColumnName];
        });
        var _loop_3 = function(columnNameIndex) {
            var nextColumnName = columnNames[columnNameIndex];
            ordered = ordered.thenBy(function(row) {
                return row[nextColumnName];
            });
        };
        for(var columnNameIndex = 1; columnNameIndex < columnNames.length; ++columnNameIndex)_loop_3(columnNameIndex);
        var e_63, _a, e_64, _d;
        return ordered;
    };
    /**
     * Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.
     * This is a powerful function that combines grouping, aggregation and sorting.
     *
     * @param idColumnOrColumns Column(s) to use as identifier variables.
     * @param valueColumnOrColumns Column(s) to unpivot.
     *
     * @return Returns a new dataframe that has been unpivoted based on a particular column's values.
     *
     * @example
     * <pre>
     *
     * // Use column in 'idColumnOrColumns' as the identity column.
     * // The column name passed in 'valueColumnOrColumns' forms the 'variable' column
     * // and the values are used to populate the 'value' column of the new dataframe.
     * const moltenDf = df.melt("A", "B");
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Multiple value columns example.
     * // Similar to the previous example except now the variable column will constitute
     * // of multiple values.
     * const moltenDf = df.melt("A", ["B", "C"]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Multiple identity and value columns example.
     * const moltenDf = df.melt(["A", "B"], ["C", "D"]);
     * </pre>
     */ DataFrame.prototype.melt = function(idColumnOrColumns, valueColumnOrColumns) {
        var idColumnNames;
        var valueColumnNames;
        if (isString(idColumnOrColumns)) idColumnNames = [
            idColumnOrColumns
        ];
        else {
            if (!isArray(idColumnOrColumns)) throw new Error("Expected 'idColumnOrColumns' parameter to 'DataFrame.melt' to be a string or an array of strings that identifies the column(s) whose values make the new DataFrame's identity columns.");
            idColumnNames = Array.from(idColumnOrColumns);
            try {
                for(var idColumnNames_1 = __values(idColumnNames), idColumnNames_1_1 = idColumnNames_1.next(); !idColumnNames_1_1.done; idColumnNames_1_1 = idColumnNames_1.next()){
                    var columnName = idColumnNames_1_1.value;
                    if (!isString(columnName)) throw new Error("Expected 'idColumnOrColumns' parameter to 'DataFrame.melt' to be a string or an array of strings that identifies the column(s) whose values make the new DataFrame's identity columns.");
                }
            } catch (e_67_1) {
                e_67 = {
                    error: e_67_1
                };
            } finally{
                try {
                    if (idColumnNames_1_1 && !idColumnNames_1_1.done && (_a = idColumnNames_1.return)) _a.call(idColumnNames_1);
                } finally{
                    if (e_67) throw e_67.error;
                }
            }
        }
        if (isString(valueColumnOrColumns)) valueColumnNames = [
            valueColumnOrColumns
        ];
        else {
            if (!isArray(valueColumnOrColumns)) throw new Error("Expected 'valueColumnOrColumns' parameter to 'DataFrame.melt' to be a string or an array of strings that identifies the column(s) whose molten values make the new DataFrame's 'variable' and 'value' columns.");
            valueColumnNames = Array.from(valueColumnOrColumns);
            try {
                for(var valueColumnNames_2 = __values(valueColumnNames), valueColumnNames_2_1 = valueColumnNames_2.next(); !valueColumnNames_2_1.done; valueColumnNames_2_1 = valueColumnNames_2.next()){
                    var columnName = valueColumnNames_2_1.value;
                    if (!isString(columnName)) throw new Error("Expected 'valueColumnOrColumns' parameter to 'DataFrame.melt' to be a string or an array of strings that identifies the column(s) whose molten values make the new DataFrame's 'variable' and 'value' columns.");
                }
            } catch (e_68_1) {
                e_68 = {
                    error: e_68_1
                };
            } finally{
                try {
                    if (valueColumnNames_2_1 && !valueColumnNames_2_1.done && (_b = valueColumnNames_2.return)) _b.call(valueColumnNames_2);
                } finally{
                    if (e_68) throw e_68.error;
                }
            }
        }
        var K = valueColumnNames.length;
        var N = this.count();
        var mdata = new DataFrame();
        var original = this.subset(idColumnNames.concat(valueColumnNames));
        try {
            for(var idColumnNames_2 = __values(idColumnNames), idColumnNames_2_1 = idColumnNames_2.next(); !idColumnNames_2_1.done; idColumnNames_2_1 = idColumnNames_2.next()){
                var col = idColumnNames_2_1.value;
                original = original.dropSeries(col);
                var idData = this.getSeries(col);
                var columnData_1 = new TileIterable(idData, K);
                var columnSeries_1 = new Series(columnData_1);
                mdata = mdata.withSeries(col, columnSeries_1);
            }
        } catch (e_69_1) {
            e_69 = {
                error: e_69_1
            };
        } finally{
            try {
                if (idColumnNames_2_1 && !idColumnNames_2_1.done && (_c = idColumnNames_2.return)) _c.call(idColumnNames_2);
            } finally{
                if (e_69) throw e_69.error;
            }
        }
        var seriesArray = [];
        try {
            for(var _d = __values(original.getColumns()), _e = _d.next(); !_e.done; _e = _d.next()){
                var col = _e.value;
                seriesArray.push(this.getSeries(col.name));
            }
        } catch (e_70_1) {
            e_70 = {
                error: e_70_1
            };
        } finally{
            try {
                if (_e && !_e.done && (_f = _d.return)) _f.call(_d);
            } finally{
                if (e_70) throw e_70.error;
            }
        }
        var columnData = new RavelIterable(seriesArray);
        var columnSeries = new Series(columnData);
        mdata = mdata.withSeries("value", columnSeries);
        var valueColumnData = new RepeatIterable(valueColumnNames, N);
        var valueColumnSeries = new Series(valueColumnData);
        mdata = mdata.withSeries("variable", valueColumnSeries);
        var e_67, _a, e_68, _b, e_69, _c, e_70, _f;
        return mdata;
    };
    /**
     * Insert a pair at the start of the dataframe.
     * Doesn't modify the original dataframe! The returned dataframe is entirely new and contains rows from the original dataframe plus the inserted pair.
     *
     * @param pair The pair to insert.
     *
     * @return Returns a new dataframe with the specified pair inserted.
     *
     * @example
     * <pre>
     *
     * const newIndex = ... index of the new row ...
     * const newRow = ... the new data row to insert ...
     * const insertedDf = df.insertPair([newIndex, newRows]);
     * </pre>
     */ DataFrame.prototype.insertPair = function(pair) {
        if (!isArray(pair)) throw new Error("Expected 'pair' parameter to 'DataFrame.insertPair' to be an array.");
        if (pair.length !== 2) throw new Error("Expected 'pair' parameter to 'DataFrame.insertPair' to be an array with two elements. The first element is the index, the second is the value.");
        return new DataFrame({
            pairs: [
                pair
            ]
        }).concat(this);
    };
    /**
     * Append a pair to the end of a dataframe.
     * Doesn't modify the original dataframe! The returned dataframe is entirely new and contains rows from the original dataframe plus the appended pair.
     *
     * @param pair - The pair to append.
     *
     * @return Returns a new dataframe with the specified pair appended.
     *
     * @example
     * <pre>
     *
     * const newIndex = ... index of the new row ...
     * const newRow = ... the new data row to append ...
     * const appendedDf = df.appendPair([newIndex, newRows]);
     * </pre>
     */ DataFrame.prototype.appendPair = function(pair) {
        if (!isArray(pair)) throw new Error("Expected 'pair' parameter to 'DataFrame.appendPair' to be an array.");
        if (pair.length !== 2) throw new Error("Expected 'pair' parameter to 'DataFrame.appendPair' to be an array with two elements. The first element is the index, the second is the value.");
        return this.concat(new DataFrame({
            pairs: [
                pair
            ]
        }));
    };
    /**
     * Removes rows from the dataframe by index.
     */ DataFrame.prototype.remove = function(index) {
        var _this = this;
        return new DataFrame(function() {
            var content = _this.getContent();
            return {
                columnNames: content.columnNames,
                pairs: new WhereIterable(content.pairs, function(pair) {
                    return pair[0] !== index;
                })
            };
        });
    };
    /**
     * Fill gaps in a dataframe.
     *
     * @param comparer User-defined comparer function that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap.
     * @param generator User-defined generator function that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.
     *
     * @return Returns a new dataframe with gaps filled in.
     *
     * @example
     * <pre>
     *
     *   var sequenceWithGaps = ...
     *
     *  // Predicate that determines if there is a gap.
     *  var gapExists = (pairA, pairB) => {
     *      // Returns true if there is a gap.
     *      return true;
     *  };
     *
     *  // Generator function that produces new rows to fill the game.
     *  var gapFiller = (pairA, pairB) => {
     *      // Create an array of index, value pairs that fill the gaps between pairA and pairB.
     *      return [
     *          newPair1,
     *          newPair2,
     *          newPair3,
     *      ];
     *  };
     *
     *  var sequenceWithoutGaps = sequenceWithGaps.fillGaps(gapExists, gapFiller);
     * </pre>
     */ DataFrame.prototype.fillGaps = function(comparer, generator) {
        if (!isFunction(comparer)) throw new Error("Expected 'comparer' parameter to 'DataFrame.fillGaps' to be a comparer function that compares two values and returns a boolean.");
        if (!isFunction(generator)) throw new Error("Expected 'generator' parameter to 'DataFrame.fillGaps' to be a generator function that takes two values and returns an array of generated pairs to span the gap.");
        return this.rollingWindow(2).selectMany(function(window) {
            var pairs = window.toPairs();
            var pairA = pairs[0];
            var pairB = pairs[1];
            if (!comparer(pairA, pairB)) return [
                pairA
            ];
            var generatedRows = generator(pairA, pairB);
            if (!isArray(generatedRows)) throw new Error("Expected return from 'generator' parameter to 'DataFrame.fillGaps' to be an array of pairs, instead got a " + typeof generatedRows);
            return [
                pairA
            ].concat(generatedRows);
        }).withIndex(function(pair) {
            return pair[0];
        }).inflate(function(pair) {
            return pair[1];
        }).concat(this.tail(1));
    };
    /**
     * Returns the specified default dataframe if the dataframe is empty.
     *
     * @param defaultDataFrame Default dataframe to return if the dataframe is empty.
     *
     * @return Returns 'defaultDataFrame' if the dataframe is empty.
     *
     * @example
     * <pre>
     *
     * const emptyDataFrame = new DataFrame();
     * const defaultDataFrame = new DataFrame([ { A: 1 }, { A: 2 }, { A: 3 } ]);
     * expect(emptyDataFrame.defaultIfEmpty(defaultDataFrame)).to.eql(defaultDataFrame);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const nonEmptyDataFrame = new DataFrame([ { A: 100 }]);
     * const defaultDataFrame = new DataFrame([ { A: 1 }, { A: 2 }, { A: 3 } ]);
     * expect(nonEmptyDataFrame.defaultIfEmpty(defaultDataFrame)).to.eql(nonEmptyDataFrame);
     * </pre>
     */ DataFrame.prototype.defaultIfEmpty = function(defaultDataFrame) {
        if (this.none()) {
            if (defaultDataFrame instanceof DataFrame) return defaultDataFrame;
            else if (isArray(defaultDataFrame)) return new DataFrame(defaultDataFrame);
            else throw new Error("Expected 'defaultSequence' parameter to 'DataFrame.defaultIfEmpty' to be an array or a series.");
        } else return this;
    };
    /**
     * Detect the the frequency of the types of the values in the dataframe.
     * This is a good way to understand the shape of your data.
     *
     * @return Returns a dataframe with rows that confirm to {@link ITypeFrequency} that describes the data types contained in the original dataframe.
     *
     * @example
     * <pre>
     *
     * const df = dataForge.readFileSync("./my-data.json").parseJSON();
     * const dataTypes = df.detectTypes();
     * console.log(dataTypes.toString());
     * </pre>
     */ DataFrame.prototype.detectTypes = function() {
        var _this = this;
        return new DataFrame(function() {
            var typeFrequencies = _this.getColumns().selectMany(function(column) {
                return column.series.detectTypes().select(function(typeFrequency) {
                    var output = Object.assign({}, typeFrequency);
                    output.Column = column.name;
                    return output;
                });
            });
            return {
                columnNames: [
                    "Type",
                    "Frequency",
                    "Column"
                ],
                values: typeFrequencies
            };
        });
    };
    /**
     * Detect the frequency of the values in the dataframe.
     * This is a good way to understand the shape of your data.
     *
     * @return Returns a dataframe with rows that conform to {@link IValueFrequency} that describes the values contained in the dataframe.
     *
     * @example
     * <pre>
     *
     * const df = dataForge.readFileSync("./my-data.json").parseJSON();
     * const dataValues = df.detectedValues();
     * console.log(dataValues.toString());
     * </pre>
     */ DataFrame.prototype.detectValues = function() {
        var _this = this;
        return new DataFrame(function() {
            var valueFrequencies = _this.getColumns().selectMany(function(column) {
                return column.series.detectValues().select(function(valueFrequency) {
                    var output = Object.assign({}, valueFrequency);
                    output.Column = column.name;
                    return output;
                });
            });
            return {
                columnNames: [
                    "Value",
                    "Frequency",
                    "Column"
                ],
                values: valueFrequencies
            };
        });
    };
    /**
     * Serialize the dataframe to the JSON data format.
     *
     * @return Returns a string in the JSON data format that represents the dataframe.
     *
     * @example
     * <pre>
     *
     * const jsonData = df.toJSON();
     * console.log(jsonData);
     * </pre>
     */ DataFrame.prototype.toJSON = function() {
        return JSON.stringify(this.toArray(), null, 4);
    };
    /**
     * Serialize the dataframe to the JSON5 data format.
     *
     * @return Returns a string in the JSON5 data format that represents the dataframe.
     *
     * @example
     * <pre>
     *
     * const jsonData = df.toJSON5();
     * console.log(jsonData);
     * </pre>
     */ DataFrame.prototype.toJSON5 = function() {
        return (0, _json5Default.default).stringify(this.toArray(), null, 4);
    };
    /**
     * Serialize the dataframe to the CSV data format.
     *
     * @param options Options for CSV output. The options object is passed directly to [PapaParse.unparse](https://www.papaparse.com/docs#unparse), please see [PapaParse docs for additional options](https://www.papaparse.com/docs#unparse-config-default).
     *
     * @return Returns a string in the CSV data format that represents the dataframe.
     *
     * @example
     * <pre>
     *
     * const csvData = df.toCSV();
     * console.log(csvData);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const csvData = df.toCSV({ header: false });
     * console.log(csvData);
     * </pre>
     */ DataFrame.prototype.toCSV = function(options) {
        var headerLine = options === undefined || options.header === undefined || options.header ? [
            this.getColumnNames()
        ] : [];
        var rows = headerLine.concat(this.toRows());
        return (0, _papaparseDefault.default).unparse(rows, options);
    };
    /**
     * Serialize the dataframe to HTML.
     *
     * @return Returns a string in HTML format that represents the dataframe.
     */ DataFrame.prototype.toHTML = function() {
        var columNames = this.getColumnNames();
        var header = columNames.map(function(columnName) {
            return "            <th>" + columnName + "</th>";
        }).join("\n");
        var pairs = this.toPairs();
        return '<table border="1" class="dataframe">\n    <thead>\n        <tr style="text-align: right;">\n            <th></th>\n' + header + "\n" + "       </tr>\n" + "    </thead>\n" + "    <tbody>\n" + pairs.map(function(pair) {
            var index = pair[0];
            var value = pair[1];
            return "        <tr>\n            <th>" + index + "</th>\n" + columNames.map(function(columName) {
                return "            <td>" + value[columName] + "</td>";
            }).join("\n") + "\n" + "        </tr>";
        }).join("\n") + "\n" + "    </tbody>\n" + "</table>";
    };
    /**
     * Serialize the dataframe to an ordinary JavaScript data structure.
     * The resulting data structure is suitable for further serialization to JSON and can be used to
     * transmit a DataFrame and its internal structure over the wire.
     * Use the {@link deserialize} function to later reconstitute the serialized dataframe.
     *
     * @return Returns a JavaScript data structure conforming to {@link ISerializedDataFrame} that represents the dataframe and its internal structure.
     *
     * @example
     * <pre>
     *
     * const jsDataStructure = df.serialize();
     * const jsonData = JSON.stringify(jsDataStructure);
     * console.log(jsonData);
     * const deserializedJsDataStructure = JSON.parse(jsonData);
     * const deserializedDf = DataFrame.deserialize(deserializedJsDataStructure); // Reconsituted.
     * </pre>
     */ DataFrame.prototype.serialize = function() {
        var rows = this.toArray(); // Bake the dataframe to an array.
        var index = this.getIndex(); // Extract the index.
        var indexValues = index.head(rows.length).toArray();
        var columns = this.getColumns();
        var serializedColumns = toMap(columns, function(column) {
            return column.name;
        }, function(column) {
            return column.type;
        });
        var indexType = index.getType();
        if (indexType === "date") indexValues = indexValues.map(function(index) {
            return (0, _esmDefault.default)(index).toISOString();
        }); // Manually serialize date value, they aren't supported directly by JSON.
        var cloned = false;
        try {
            // Serialize date values.
            for(var columns_1 = __values(columns), columns_1_1 = columns_1.next(); !columns_1_1.done; columns_1_1 = columns_1.next()){
                var column = columns_1_1.value;
                if (column.type === "date") {
                    if (!cloned) {
                        rows = rows.map(function(row) {
                            return Object.assign({}, row);
                        }); // Clone so we don't modify any original data.
                        cloned = true;
                    }
                    try {
                        for(var rows_1 = __values(rows), rows_1_1 = rows_1.next(); !rows_1_1.done; rows_1_1 = rows_1.next()){
                            var row = rows_1_1.value;
                            row[column.name] = (0, _esmDefault.default)(row[column.name]).toISOString(); // Manually serialize date value.
                        }
                    } catch (e_71_1) {
                        e_71 = {
                            error: e_71_1
                        };
                    } finally{
                        try {
                            if (rows_1_1 && !rows_1_1.done && (_a = rows_1.return)) _a.call(rows_1);
                        } finally{
                            if (e_71) throw e_71.error;
                        }
                    }
                }
            }
        } catch (e_72_1) {
            e_72 = {
                error: e_72_1
            };
        } finally{
            try {
                if (columns_1_1 && !columns_1_1.done && (_b = columns_1.return)) _b.call(columns_1);
            } finally{
                if (e_72) throw e_72.error;
            }
        }
        var e_72, _b, e_71, _a;
        return {
            columnOrder: this.getColumnNames(),
            columns: serializedColumns,
            index: {
                type: indexType,
                values: indexValues
            },
            values: rows
        };
    };
    /**
     * Deserialize the dataframe from an ordinary JavaScript data structure.
     * Can reconstitute a dataframe that previously serialized with the {@link serialize} function.
     * This can rebuilds the dataframe with the exact same internal structure after it has been transmitted over the wire.
     *
     * @param input The serialize JavaScript data structure for the dataframe.
     *
     * @return Returns the deserialized/reconstituted dataframe.
     *
     * @example
     * <pre>
     *
     * const jsDataStructure = df.serialize();
     * const jsonData = JSON.stringify(jsDataStructure);
     * console.log(jsonData);
     * const deserializedJsDataStructure = JSON.parse(jsonData);
     * const deserializedDf = DataFrame.deserialize(deserializedJsDataStructure); // Reconsituted.
     * </pre>
     */ DataFrame.deserialize = function(input) {
        var indexValues = input.index && input.index.values || [];
        var rows = input.values && input.values || [];
        var cloned = false;
        // Deserialize dates.
        if (input.columns) try {
            for(var _a = __values(Object.keys(input.columns)), _b = _a.next(); !_b.done; _b = _a.next()){
                var columnName = _b.value;
                if (input.columns[columnName] !== "date") continue; // No need to process other types, they are natively supported by JSON.
                if (!cloned) {
                    rows = rows.map(function(row) {
                        return Object.assign({}, row);
                    }); // Clone so we don't modify any original data.
                    cloned = true;
                }
                try {
                    for(var rows_2 = __values(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()){
                        var row = rows_2_1.value;
                        row[columnName] = (0, _esmDefault.default)(row[columnName]).toDate(); // Manually deserialize data value.
                    }
                } catch (e_73_1) {
                    e_73 = {
                        error: e_73_1
                    };
                } finally{
                    try {
                        if (rows_2_1 && !rows_2_1.done && (_c = rows_2.return)) _c.call(rows_2);
                    } finally{
                        if (e_73) throw e_73.error;
                    }
                }
            }
        } catch (e_74_1) {
            e_74 = {
                error: e_74_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            } finally{
                if (e_74) throw e_74.error;
            }
        }
        if (input.index && input.index.type === "date") indexValues = indexValues.map(function(value) {
            return (0, _esmDefault.default)(value).toDate();
        }); // Manually deserialize data value.
        var e_74, _d, e_73, _c;
        return new DataFrame({
            columnNames: input.columnOrder || [],
            index: indexValues,
            values: rows
        });
    };
    /***
     * Allows the dataframe to be queried to confirm that it is actually a dataframe.
     * Used from JavaScript to tell the difference between a Series and a DataFrame.
     *
     * @return Returns the string "dataframe".
     */ DataFrame.prototype.getTypeCode = function() {
        return "dataframe";
    };
    DataFrame.defaultCountIterable = new CountIterable();
    DataFrame.defaultEmptyIterable = new EmptyIterable();
    return DataFrame;
}();
/**
 * @hidden
 * Represents a dataframe that has been sorted.
 */ var OrderedDataFrame = /** @class */ function(_super) {
    __extends(OrderedDataFrame, _super);
    function OrderedDataFrame(config) {
        var _this = this;
        var valueSortSpecs = [];
        var pairSortSpecs = [];
        var sortLevel = 0;
        var parent = config.parent;
        var parents = [];
        while(parent !== null){
            parents.push(parent);
            parent = parent.config.parent;
        }
        parents.reverse();
        try {
            for(var parents_1 = __values(parents), parents_1_1 = parents_1.next(); !parents_1_1.done; parents_1_1 = parents_1.next()){
                var parent_1 = parents_1_1.value;
                var parentConfig = parent_1.config;
                valueSortSpecs.push(OrderedDataFrame.makeSortSpec(sortLevel, parentConfig.selector, parentConfig.direction));
                pairSortSpecs.push(OrderedDataFrame.makeSortSpec(sortLevel, OrderedDataFrame.makePairsSelector(parentConfig.selector), parentConfig.direction));
                ++sortLevel;
            }
        } catch (e_75_1) {
            e_75 = {
                error: e_75_1
            };
        } finally{
            try {
                if (parents_1_1 && !parents_1_1.done && (_a = parents_1.return)) _a.call(parents_1);
            } finally{
                if (e_75) throw e_75.error;
            }
        }
        valueSortSpecs.push(OrderedDataFrame.makeSortSpec(sortLevel, config.selector, config.direction));
        pairSortSpecs.push(OrderedDataFrame.makeSortSpec(sortLevel, OrderedDataFrame.makePairsSelector(config.selector), config.direction));
        _this = _super.call(this, {
            columnNames: config.columnNames,
            values: new OrderedIterable(config.values, valueSortSpecs),
            pairs: new OrderedIterable(config.pairs, pairSortSpecs)
        }) || this;
        _this.config = config;
        var e_75, _a;
        return _this;
    }
    //
    // Helper function to create a sort spec.
    //
    OrderedDataFrame.makeSortSpec = function(sortLevel, selector, direction) {
        return {
            sortLevel: sortLevel,
            selector: selector,
            direction: direction
        };
    };
    //
    // Helper function to make a sort selector for pairs, this captures the parent correct when generating the closure.
    //
    OrderedDataFrame.makePairsSelector = function(selector) {
        return function(pair, index) {
            return selector(pair[1], index);
        };
    };
    /**
     * Applys additional sorting (ascending) to an already sorted dataframe.
     *
     * @param selector User-defined selector that selects the additional value to sort by.
     *
     * @return Returns a new dataframe has been additionally sorted by the value chosen by the selector function.
     *
     * @example
     * <pre>
     *
     * // Order sales by salesperson and then by amount (from least to most).
     * const orderedDf = salesDf.orderBy(sale => sale.SalesPerson).thenBy(sale => sale.Amount);
     * </pre>
     */ OrderedDataFrame.prototype.thenBy = function(selector) {
        return new OrderedDataFrame({
            columnNames: this.config.columnNames,
            values: this.config.values,
            pairs: this.config.pairs,
            selector: selector,
            direction: Direction.Ascending,
            parent: this
        });
    };
    /**
     * Applys additional sorting (descending) to an already sorted dataframe.
     *
     * @param selector User-defined selector that selects the additional value to sort by.
     *
     * @return Returns a new dataframe has been additionally sorted by the value chosen by the selector function.
     *
     * @example
     * <pre>
     *
     * // Order sales by salesperson and then by amount (from most to least).
     * const orderedDf = salesDf.orderBy(sale => sale.SalesPerson).thenByDescending(sale => sale.Amount);
     * </pre>
     */ OrderedDataFrame.prototype.thenByDescending = function(selector) {
        return new OrderedDataFrame({
            columnNames: this.config.columnNames,
            values: this.config.values,
            pairs: this.config.pairs,
            selector: selector,
            direction: Direction.Descending,
            parent: this
        });
    };
    return OrderedDataFrame;
}(DataFrame);
(0, _esmDefault.default).extend((0, _customParseFormatDefault.default));
/**
 * Specifies where from a data window the index is pulled from: the start of the window, the end or from the middle.
 */ var WhichIndex;
(function(WhichIndex) {
    WhichIndex["Start"] = "start";
    WhichIndex["End"] = "end";
})(WhichIndex || (WhichIndex = {}));
/**
 * Class that represents a series containing a sequence of indexed values.
 */ var Series = /** @class */ function() {
    /**
     * Create a series.
     *
     * @param config This can be an array, a configuration object or a function that lazily produces a configuration object.
     *
     * It can be an array that specifies the values that the series contains.
     *
     * It can be a {@link ISeriesConfig} that defines the values and configuration of the series.
     *
     * Or it can be a function that lazily produces a {@link ISeriesConfig}.
     *
     * @example
     * <pre>
     *
     * const series = new Series();
     * </pre>
     *
     * @example
     * <pre>
     *
     * const series = new Series([10, 20, 30, 40]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const series = new Series({ index: [1, 2, 3, 4], values: [10, 20, 30, 40]});
     * </pre>
     *
     * @example
     * <pre>
     *
     * const lazyInit = () => ({ index: [1, 2, 3, 4], values: [10, 20, 30, 40] });
     * const series = new Series(lazyInit);
     * </pre>
     */ function Series(config) {
        //
        // Function to lazy evaluate the configuration of the series.
        //
        this.configFn = null;
        //
        // The content of the series.
        // When this is null it means the series is yet to be lazy initialised.
        //
        this.content = null;
        // 
        // Indexed content of the dataframe.
        // 
        this.indexedContent = null;
        if (config) {
            var configAsAny = config;
            if (configAsAny.getTypeCode !== undefined) {
                var typeCode = configAsAny.getTypeCode();
                if (typeCode === "dataframe" || typeCode === "series") {
                    if (configAsAny.content !== undefined) this.content = configAsAny.content;
                    else this.configFn = configAsAny.configFn;
                    return;
                }
            }
            if (isFunction(config)) this.configFn = config;
            else if (Series.isIterator(config)) this.content = Series.initFromIterator(config);
            else if (Series.isIterable(config)) this.content = Series.initFromIterable(config);
            else this.content = Series.initFromConfig(config);
        } else this.content = Series.initEmpty();
    }
    //
    // Initialise a series from an iterator (or generator object).
    //
    Series.initFromIterator = function(iterator) {
        return Series.initFromIterable(new CachedIteratorIterable(iterator));
    };
    //
    // Initialise series content from an iterable of values.
    //
    Series.initFromIterable = function(arr) {
        return {
            index: Series.defaultCountIterable,
            values: arr,
            pairs: new MultiIterable([
                Series.defaultCountIterable,
                arr
            ]),
            isBaked: true
        };
    };
    //
    // Initialise an empty series.
    //
    Series.initEmpty = function() {
        return {
            index: Series.defaultEmptyIterable,
            values: Series.defaultEmptyIterable,
            pairs: Series.defaultEmptyIterable,
            isBaked: true
        };
    };
    //
    // Returns true if the input is an iterator.
    //
    Series.isIterator = function(input) {
        return isObject(input) && isFunction(input.next);
    };
    //
    // Returns true if the input is an iterable.
    //
    Series.isIterable = function(input) {
        return isArray(input) || isObject(input) && isFunction(input[Symbol.iterator]);
    };
    //
    // Check that a value is an interable.
    //
    Series.checkIterable = function(input, fieldName) {
        if (Series.isIterable(input)) ;
        else // Not ok
        throw new Error("Expected '" + fieldName + "' field of Series config object to be an array of values or an iterable of values.");
    };
    //
    // Initialise series content from a config object.
    //
    Series.initFromConfig = function(config) {
        var index;
        var values;
        var pairs;
        var isBaked = false;
        if (config.pairs) {
            if (Series.isIterator(config.pairs)) pairs = new CachedIteratorIterable(config.pairs);
            else {
                Series.checkIterable(config.pairs, "pairs");
                pairs = config.pairs;
            }
        }
        if (config.index) {
            if (Series.isIterator(config.index)) index = new CachedIteratorIterable(config.index);
            else {
                Series.checkIterable(config.index, "index");
                index = config.index;
            }
        } else if (pairs) index = new ExtractElementIterable(pairs, 0);
        else index = Series.defaultCountIterable;
        if (config.values) {
            if (Series.isIterator(config.values)) values = new CachedIteratorIterable(config.values);
            else {
                Series.checkIterable(config.values, "values");
                values = config.values;
            }
        } else if (pairs) values = new ExtractElementIterable(pairs, 1);
        else values = Series.defaultEmptyIterable;
        if (!pairs) pairs = new MultiIterable([
            index,
            values
        ]);
        if (config.baked !== undefined) isBaked = config.baked;
        return {
            index: index,
            values: values,
            pairs: pairs,
            isBaked: isBaked
        };
    };
    //
    // Ensure the series content has been initialised.
    //
    Series.prototype.lazyInit = function() {
        if (this.content === null && this.configFn !== null) this.content = Series.initFromConfig(this.configFn());
    };
    //
    // Ensure the series content is lazy initalised and return it.
    //
    Series.prototype.getContent = function() {
        this.lazyInit();
        return this.content;
    };
    // 
    // Lazy builds content index, does basic hash lookup.
    //
    Series.prototype.getRowByIndex = function(index) {
        if (!this.indexedContent) {
            this.indexedContent = new Map();
            try {
                for(var _a = __values(this.getContent().pairs), _b = _a.next(); !_b.done; _b = _a.next()){
                    var pair = _b.value;
                    this.indexedContent.set(pair[0], pair[1]);
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
        }
        var e_1, _c;
        return this.indexedContent.get(index);
    };
    /**
     * Get an iterator to enumerate the values of the series.
     * Enumerating the iterator forces lazy evaluation to complete.
     * This function is automatically called by `for...of`.
     *
     * @return An iterator for the series.
     *
     * @example
     * <pre>
     *
     * for (const value of series) {
     *     // ... do something with the value ...
     * }
     * </pre>
     */ Series.prototype[Symbol.iterator] = function() {
        return this.getContent().values[Symbol.iterator]();
    };
    /**
     * Cast the value of the series to a new type.
     * This operation has no effect but to retype the values that the series contains.
     *
     * @return The same series, but with the type changed.
     *
     * @example
     * <pre>
     *
     * const castSeries = series.cast<SomeOtherType>();
     * </pre>
     */ Series.prototype.cast = function() {
        return this;
    };
    /**
     * Get the index for the series.
     *
     * @return The {@link Index} for the series.
     *
     * @example
     * <pre>
     *
     * const index = series.getIndex();
     * </pre>
     */ Series.prototype.getIndex = function() {
        var _this = this;
        return new Index(function() {
            return {
                values: _this.getContent().index
            };
        });
    };
    /**
     * Apply a new {@link Index} to the series.
     *
     * @param newIndex The new array or iterable to be the new {@link Index} of the series. Can also be a selector to choose the {@link Index} for each value in the series.
     *
     * @return Returns a new series with the specified {@link Index} attached.
     *
     * @example
     * <pre>
     *
     * const indexedSeries = series.withIndex([10, 20, 30]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const indexedSeries = series.withIndex(someOtherSeries);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const indexedSeries = series.withIndex(value => computeIndexFromValue(value));
     * </pre>
     *
     * @example
     * <pre>
     *
     * const indexedSeries = series.withIndex(value => value + 20);
     * </pre>
     */ Series.prototype.withIndex = function(newIndex) {
        var _this = this;
        if (isFunction(newIndex)) return new Series(function() {
            return {
                values: _this.getContent().values,
                index: _this.select(newIndex)
            };
        });
        else {
            Series.checkIterable(newIndex, "newIndex");
            return new Series(function() {
                return {
                    values: _this.getContent().values,
                    index: newIndex
                };
            });
        }
    };
    /**
     * Resets the {@link Index} of the series back to the default zero-based sequential integer index.
     *
     * @return Returns a new series with the {@link Index} reset to the default zero-based index.
     *
     * @example
     * <pre>
     *
     * const seriesWithResetIndex = series.resetIndex();
     * </pre>
     */ Series.prototype.resetIndex = function() {
        var _this = this;
        return new Series(function() {
            return {
                values: _this.getContent().values // Just strip the index.
            };
        });
    };
    /**
     * Merge multiple series into a single series.
     * Values are merged by index.
     * Values at each index are combined into arrays in the resulting series.
     *
     * @param series An array or series of series to merge.
     *
     * @returns The merged series.
     *
     * @example
     * <pre>
     *
     * const mergedSeries = Series.merge([series1, series2, etc]);
     * </pre>
     */ Series.merge = function(series) {
        var rowMap = new Map();
        var numSeries = Array.from(series).length; //TODO: Be nice not to have to do this.
        var seriesIndex = 0;
        try {
            for(var series_1 = __values(series), series_1_1 = series_1.next(); !series_1_1.done; series_1_1 = series_1.next()){
                var workingSeries = series_1_1.value;
                try {
                    for(var _a = __values(workingSeries.toPairs()), _b = _a.next(); !_b.done; _b = _a.next()){
                        var pair = _b.value;
                        var index = pair[0];
                        if (!rowMap.has(index)) rowMap.set(index, new Array(numSeries));
                        rowMap.get(index)[seriesIndex] = pair[1];
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally{
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    } finally{
                        if (e_2) throw e_2.error;
                    }
                }
                ++seriesIndex;
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (series_1_1 && !series_1_1.done && (_d = series_1.return)) _d.call(series_1);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
        var mergedPairs = Array.from(rowMap.keys()).map(function(index) {
            return [
                index,
                rowMap.get(index)
            ];
        });
        mergedPairs.sort(function(a, b) {
            if (a[0] === b[0]) return 0;
            else if (a[0] > b[0]) return 1;
            else return -1;
        });
        var e_3, _d, e_2, _c;
        return new Series({
            pairs: mergedPairs
        });
    };
    /**
      * Merge one or more series into this series.
      * Values are merged by index.
      * Values at each index are combined into arrays in the resulting series.
      *
      * @param series... One or more other series to merge into the series.
      *
      * @returns The merged series.
      *
      * @example
      * <pre>
      *
      * const mergedSeries = series1.merge(series2);
      * </pre>
      *
      * <pre>
      *
      * const mergedSeries = series1.merge(series2, series3, etc);
      * </pre>
      */ Series.prototype.merge = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return Series.merge([
            this
        ].concat(args));
    };
    /**
    * Extract values from the series as an array.
    * This forces lazy evaluation to complete.
    *
    * @return Returns an array of the values contained within the series.
    *
    * @example
    * <pre>
    * const values = series.toArray();
    * </pre>
    */ Series.prototype.toArray = function() {
        var values = [];
        try {
            for(var _a = __values(this.getContent().values), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (value !== undefined && value !== null) values.push(value);
            }
        } catch (e_4_1) {
            e_4 = {
                error: e_4_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_4) throw e_4.error;
            }
        }
        var e_4, _c;
        return values;
    };
    /**
     * Retreive the index, values pairs from the series as an array.
     * Each pair is [index, value].
     * This forces lazy evaluation to complete.
     *
     * @return Returns an array of pairs that contains the series values. Each pair is a two element array that contains an index and a value.
     *
     * @example
     * <pre>
     * const pairs = series.toPairs();
     * </pre>
     */ Series.prototype.toPairs = function() {
        var pairs = [];
        try {
            for(var _a = __values(this.getContent().pairs), _b = _a.next(); !_b.done; _b = _a.next()){
                var pair = _b.value;
                if (pair[1] !== undefined && pair[1] !== null) pairs.push(pair);
            }
        } catch (e_5_1) {
            e_5 = {
                error: e_5_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_5) throw e_5.error;
            }
        }
        var e_5, _c;
        return pairs;
    };
    /**
     * Convert the series to a JavaScript object.
     *
     * @param keySelector User-defined selector function that selects keys for the resulting object.
     * @param valueSelector User-defined selector function that selects values for the resulting object.
     *
     * @return Returns a JavaScript object generated from the series by applying the key and value selector functions.
     *
     * @example
     * <pre>
     *
     * const someObject = series.toObject(
     *      value => value, // Specify the value to use for field names in the output object.
     *      value => value // Specify the value to use as the value for each field.
     * );
     * </pre>
     */ Series.prototype.toObject = function(keySelector, valueSelector) {
        if (!isFunction(keySelector)) throw new Error("Expected 'keySelector' parameter to Series.toObject to be a function.");
        if (!isFunction(valueSelector)) throw new Error("Expected 'valueSelector' parameter to Series.toObject to be a function.");
        return toMap(this, keySelector, valueSelector);
    };
    /**
     * Transforms an input series, generating a new series.
     * The transformer function is called for each element of the input and the collection of outputs creates the generated series.
     *
     * `select` is an alias for {@link Series.map}.
     *
     * This is the same concept as the JavaScript function `Array.map` but maps over a data series rather than an array.
     *
     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.
     *
     * @return Returns the series generated by calling the transformer function over each value in the input series.
     *
     * @example
     * <pre>
     *
     * function transformer (input) {
     *      const output = // ... construct output from input ...
     *      return output;
     * }
     *
     * const transformed = series.select(transformer);
     * console.log(transformed.toString());
     * </pre>
     */ Series.prototype.select = function(transformer) {
        if (!isFunction(transformer)) throw new Error("Expected 'transformer' parameter to 'Series.select' to be a function.");
        return this.map(transformer);
    };
    /**
     * Transforms an input series, generating a new series.
     * The transformer function is called for each element of the input and the collection of outputs creates the generated series.
     *
     * This is the same concept as the JavaScript function `Array.map` but maps over a data series rather than an array.
     *
     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.
     *
     * @return Returns a new series generated by calling the transformer function over each element of the input.
     *
     * @example
     * <pre>
     *
     * function transformer (input) {
     *      const output = // ... construct output from input ...
     *      return output;
     * }
     *
     * const transformed = series.map(transformer);
     * console.log(transformed.toString());
     * </pre>
     */ Series.prototype.map = function(transformer) {
        var _this = this;
        if (!isFunction(transformer)) throw new Error("Expected 'transformer' parameter to 'Series.map' to be a function.");
        return new Series(function() {
            var content = _this.getContent();
            return {
                values: new SelectIterable(content.values, transformer),
                index: content.index
            };
        });
    };
    /**
     * Transforms and flattens an input series, generating a new series.
     * The transformer function is called for each value in the input series and produces an array that is then flattened into the generated series.
     *
     * `selectMany` is an alias for {@link Series.flatMap}.
     *
     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a data series rather than an array.
     *
     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated series.
     *
     * @return Returns a new series generated by calling the transformer function over each element of the input.
     *
     * @example
     * <pre>
     *
     * function transformer (input) {
     *      const output = [];
     *      while (someCondition) {
     *          // ... generate zero or more outputs from a single input ...
     *          output.push(... some generated value ...);
     *      }
     *      return output;
     * }
     *
     * const transformed = series.selectMany(transformer);
     * console.log(transformed.toString());
     * </pre>
     */ Series.prototype.selectMany = function(transformer) {
        if (!isFunction(transformer)) throw new Error("Expected 'transformer' parameter to 'Series.selectMany' to be a function.");
        return this.flatMap(transformer);
    };
    /**
     * Transforms and flattens an input series, generating a new series.
     * The transformer function is called for each value in the input series and produces an array that is then flattened into the generated series.
     *
     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a data series rather than an array.
     *
     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated series.
     *
     * @return Returns a new series generated by calling the transformer function over each element of the input.
     *
     * @example
     * <pre>
     *
     * function transformer (input) {
     *      const output = [];
     *      while (someCondition) {
     *          // ... generate zero or more outputs from a single input ...
     *          output.push(... some generated value ...);
     *      }
     *      return output;
     * }
     *
     * const transformed = series.flatMap(transformer);
     * console.log(transformed.toString());
     * </pre>
     */ Series.prototype.flatMap = function(transformer) {
        var _this = this;
        if (!isFunction(transformer)) throw new Error("Expected 'transformer' parameter to 'Series.flatMap' to be a function.");
        return new Series(function() {
            return {
                pairs: new SelectManyIterable(_this.getContent().pairs, function(pair, index) {
                    var outputPairs = [];
                    try {
                        for(var _a = __values(transformer(pair[1], index)), _b = _a.next(); !_b.done; _b = _a.next()){
                            var transformed = _b.value;
                            outputPairs.push([
                                pair[0],
                                transformed
                            ]);
                        }
                    } catch (e_6_1) {
                        e_6 = {
                            error: e_6_1
                        };
                    } finally{
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        } finally{
                            if (e_6) throw e_6.error;
                        }
                    }
                    var e_6, _c;
                    return outputPairs;
                })
            };
        });
    };
    /**
     * Partition a series into a {@link Series} of *data windows*.
     * Each value in the new series is a chunk of data from the original series.
     *
     * @param period The number of values to include in each data window.
     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be "start" or "end", defaults to "end".
     *
     * @return Returns a new series, each value of which is a chunk (data window) of the original series.
     *
     * @example
     * <pre>
     *
     * const windows = series.window(2); // Get values in pairs.
     * const pctIncrease = windows.select(pair => (pair.last() - pair.first()) / pair.first());
     * console.log(pctIncrease.toString());
     * </pre>
     *
     * @example
     * <pre>
     *
     * const salesDf = ... // Daily sales data.
     * const weeklySales = salesDf.window(7); // Partition up into weekly data sets.
     * console.log(weeklySales.toString());
     * </pre>
     */ Series.prototype.window = function(period, whichIndex) {
        var _this = this;
        if (!isNumber(period)) throw new Error("Expected 'period' parameter to 'Series.window' to be a number.");
        return new Series(function() {
            return {
                pairs: new SeriesWindowIterable(_this.getContent().pairs, period, whichIndex || WhichIndex.End)
            };
        });
    };
    /**
     * Partition a series into a new series of *rolling data windows*.
     * Each value in the new series is a rolling chunk of data from the original series.
     *
     * @param period The number of data values to include in each data window.
     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be "start" or "end", defaults to "end".
     *
     * @return Returns a new series, each value of which is a rolling chunk of the original series.
     *
     * @example
     * <pre>
     *
     * const salesData = ... // Daily sales data.
     * const rollingWeeklySales = salesData.rollingWindow(7); // Get rolling window over weekly sales data.
     * console.log(rollingWeeklySales.toString());
     * </pre>
     */ Series.prototype.rollingWindow = function(period, whichIndex) {
        var _this = this;
        if (!isNumber(period)) throw new Error("Expected 'period' parameter to 'Series.rollingWindow' to be a number.");
        return new Series(function() {
            return {
                pairs: new SeriesRollingWindowIterable(_this.getContent().pairs, period, whichIndex || WhichIndex.End)
            };
        });
    };
    /**
     * Partition a series into a new series of variable-length *data windows*
     * where the divisions between the data chunks are
     * defined by a user-provided *comparer* function.
     *
     * @param comparer Function that compares two adjacent data values and returns true if they should be in the same window.
     *
     * @return Returns a new series, each value of which is a chunk of data from the original series.
     *
     * @example
     * <pre>
     *
     * function rowComparer (valueA, valueB) {
     *      if (... valueA should be in the same data window as valueB ...) {
     *          return true;
     *      }
     *      else {
     *          return false;
     *      }
     * };
     *
     * const variableWindows = series.variableWindow(rowComparer);
     */ Series.prototype.variableWindow = function(comparer) {
        var _this = this;
        if (!isFunction(comparer)) throw new Error("Expected 'comparer' parameter to 'Series.variableWindow' to be a function.");
        return new Series(function() {
            return {
                values: new SeriesVariableWindowIterable(_this.getContent().pairs, comparer)
            };
        });
    };
    /**
     * Eliminates adjacent duplicate values.
     *
     * For each group of adjacent values that are equivalent only returns the last index/row for the group,
     * thus ajacent equivalent values are collapsed down to the last value.
     *
     * @param selector Optional selector function to determine the value used to compare for equivalence.
     *
     * @return Returns a new series with groups of adjacent duplicate vlaues collapsed to a single value per group.
     *
     * @example
     * <pre>
     *
     * const seriesWithDuplicateRowsRemoved = series.sequentialDistinct(value => value);
     *
     * // Or
     * const seriesWithDuplicateRowsRemoved = series.sequentialDistinct(value => value.someNestedField);
     * </pre>
     */ Series.prototype.sequentialDistinct = function(selector) {
        if (selector) {
            if (!isFunction(selector)) throw new Error("Expected 'selector' parameter to 'Series.sequentialDistinct' to be a selector function that determines the value to compare for duplicates.");
        } else selector = function(value) {
            return value;
        };
        return this.variableWindow(function(a, b) {
            return selector(a) === selector(b);
        }).select(function(window) {
            return [
                window.getIndex().first(),
                window.first()
            ];
        }).withIndex(function(pair) {
            return pair[0];
        }).select(function(pair) {
            return pair[1];
        });
    };
    /**
     * Reduces the values in the series to a single result.
     *
     * `aggregate` is similar to {@link Series.reduce}, but the parameters are reversed.
     * Please use {@link Series.reduce} in preference to `aggregate`.
     *
     * @param seed Optional seed value for producing the aggregation.
     * @param reducer Function that takes the seed and then each value in the series and produces the reduced value.
     *
     * @return Returns a new value that has been reduced from the input series by passing it through the 'reducer' function.
     *
     * @example
     * <pre>
     *
     * const dailySales = ... daily sales figures for the past month ...
     * const totalSalesForthisMonth = dailySales.aggregate(
     *      0, // Seed - the starting value.
     *      (accumulator, salesAmount) => accumulator + salesAmount // Aggregation function.
     * );
     * </pre>
     *
     * @example
     * <pre>
     *
     * const previousSales = 500; // We'll seed the aggregation with this value.
     * const dailySales = ... daily sales figures for the past month ...
     * const updatedSales = dailySales.aggregate(
     *      previousSales,
     *      (accumulator, salesAmount) => accumulator + salesAmount
     * );
     * </pre>
     *
     * @example
     * <pre>
     *
     * var salesDataSummary = salesData.aggregate({
     *      TotalSales: series => series.count(),
     *      AveragePrice: series => series.average(),
     *      TotalRevenue: series => series.sum(),
     * });
     * </pre>
     */ Series.prototype.aggregate = function(seedOrSelector, selector) {
        if (isFunction(seedOrSelector) && !selector) return this.skip(1).aggregate(this.first(), seedOrSelector);
        else {
            if (!isFunction(selector)) throw new Error("Expected 'selector' parameter to aggregate to be a function.");
            var accum = seedOrSelector;
            try {
                for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                    var value = _b.value;
                    accum = selector(accum, value);
                }
            } catch (e_7_1) {
                e_7 = {
                    error: e_7_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_7) throw e_7.error;
                }
            }
            return accum;
        }
        var e_7, _c;
    };
    /**
     * Reduces the values in the series to a single result.
     *
     * This is the same concept as the JavaScript function `Array.reduce` but reduces a data series rather than an array.

     * @param reducer Function that takes the seed and then each value in the series and produces the reduced value.
     * @param seed Optional initial value, if not specifed the first value in the series is used as the initial value.
     *
     * @return Returns a value that has been reduced from the input series by passing each element through the reducer function.
     *
     * @example
     * <pre>
     *
     * const dailySales = ... daily sales figures for the past month ...
     * const totalSales = dailySales.reduce(
     *      (accumulator, salesAmount) => accumulator + salesAmount, // Reducer function.
     *      0  // Seed value, the starting value.
     * );
     * </pre>
     *
     * @example
     * <pre>
     *
     * const previousSales = 500; // We'll seed the reduction with this value.
     * const dailySales = ... daily sales figures for the past month ...
     * const updatedSales = dailySales.reduce(
     *      (accumulator, salesAmount) => accumulator + salesAmount,
     *      previousSales
     * );
     * </pre>
     */ Series.prototype.reduce = function(reducer, seed) {
        if (!isFunction(reducer)) throw new Error("Expected 'reducer' parameter to `Series.reduce` to be a function.");
        var accum = seed;
        var series = this;
        if (accum === undefined) {
            if (series.any()) {
                accum = series.first();
                series = series.skip(1);
            }
        }
        try {
            for(var series_2 = __values(series), series_2_1 = series_2.next(); !series_2_1.done; series_2_1 = series_2.next()){
                var value = series_2_1.value;
                accum = reducer(accum, value);
            }
        } catch (e_8_1) {
            e_8 = {
                error: e_8_1
            };
        } finally{
            try {
                if (series_2_1 && !series_2_1.done && (_a = series_2.return)) _a.call(series_2);
            } finally{
                if (e_8) throw e_8.error;
            }
        }
        var e_8, _a;
        return accum;
    };
    /**
     * Compute the absolute range of values in each period.
     * The range for each period is the absolute difference between largest (max) and smallest (min) values in that period.
     *
     * @param period - Period for computing the range.
     *
     * @returns Returns a new series where each value indicates the absolute range of values for each period in the original series.
     *
     * @example
     * <pre>
     *
     * const closingPrice = ... series of closing prices for a particular stock ...
     * const volatility = closingPrice.amountRange(5);
     * </pre>
     */ Series.prototype.amountRange = function(period, whichIndex) {
        return this // Have to assume this is a number series.
        .rollingWindow(period, whichIndex).select(function(window) {
            return window.max() - window.min();
        });
    };
    /**
     * Compute the range of values in each period in proportion to the latest value.
     * The range for each period is the absolute difference between largest (max) and smallest (min) values in that period.
     * Proportions are expressed as 0-1 values.
     *
     * @param period - Period for computing the range.
     *
     * @returns Returns a new series where each value indicates the proportion change from the previous number value in the original series.
     *
     * @returns Returns a new series where each value indicates the proportionate range of values for each period in the original series.
     *
     * @example
     * <pre>
     *
     * const closingPrice = ... series of closing prices for a particular stock ...
     * const proportionVolatility = closingPrice.proportionRange(5);
     * </pre>
     */ Series.prototype.proportionRange = function(period, whichIndex) {
        return this // Have to assume this is a number series.
        .rollingWindow(period, whichIndex).select(function(window) {
            return (window.max() - window.min()) / window.last();
        });
    };
    /**
     * Compute the range of values in each period in proportion to the latest value.
     * The range for each period is the absolute difference between largest (max) and smallest (min) values in that period.
     * Proportions are expressed as 0-1 values.
     *
     * @param period - Period for computing the range.
     *
     * @returns Returns a new series where each value indicates the proportion change from the previous number value in the original series.
     *
     * @returns Returns a new series where each value indicates the proportionate range of values for each period in the original series.
     *
     * @example
     * <pre>
     *
     * const closingPrice = ... series of closing prices for a particular stock ...
     * const percentVolatility = closingPrice.percentRange(5);
     * </pre>
     */ Series.prototype.percentRange = function(period, whichIndex) {
        return this.proportionRange(period, whichIndex).select(function(v) {
            return v * 100;
        });
    };
    /**
     * Compute the amount of change between pairs or sets of values in the series.
     *
     * @param period Optional period for computing the change - defaults to 2.
     *
     * @returns Returns a new series where each value indicates the amount of change from the previous number value in the original series.
     *
     * @example
     * <pre>
     *
     * const saleFigures = ... running series of daily sales figures ...
     * const amountChanged = salesFigures.amountChanged(); // Amount that sales has changed, day to day.
     * </pre>
     * @example
     * <pre>
     *
     * const saleFigures = ... running series of daily sales figures ...
     * const amountChanged = salesFigures.amountChanged(7); // Amount that sales has changed, week to week.
     * </pre>
     */ Series.prototype.amountChange = function(period, whichIndex) {
        return this // Have to assume this is a number series.
        .rollingWindow(period === undefined ? 2 : period, whichIndex).select(function(window) {
            return window.last() - window.first();
        });
    };
    /**
     * Compute the proportion change between pairs or sets of values in the series.
     * Proportions are expressed as 0-1 values.
     *
     * @param period Optional period for computing the proportion - defaults to 2.
     *
     * @returns Returns a new series where each value indicates the proportion change from the previous number value in the original series.
     *
     * @example
     * <pre>
     *
     * const saleFigures = ... running series of daily sales figures ...
     * const proportionChanged = salesFigures.amountChanged(); // Proportion that sales has changed, day to day.
     * </pre>
     * @example
     * <pre>
     *
     * const saleFigures = ... running series of daily sales figures ...
     * const proportionChanged = salesFigures.amountChanged(7); // Proportion that sales has changed, week to week.
     * </pre>
     */ Series.prototype.proportionChange = function(period, whichIndex) {
        return this // Have to assume this is a number series.
        .rollingWindow(period === undefined ? 2 : period, whichIndex).select(function(window) {
            return (window.last() - window.first()) / window.first();
        });
    };
    /**
     * Compute the percentage change between pairs or sets of values in the series.
     * Percentages are expressed as 0-100 values.
     *
     * @param period Optional period for computing the percentage - defaults to 2.
     *
     * @returns Returns a new series where each value indicates the percent change from the previous number value in the original series.
     *
     * @example
     * <pre>
     *
     * const saleFigures = ... running series of daily sales figures ...
     * const percentChanged = salesFigures.amountChanged(); // Percent that sales has changed, day to day.
     * </pre>
     * @example
     * <pre>
     *
     * const saleFigures = ... running series of daily sales figures ...
     * const percentChanged = salesFigures.amountChanged(7); // Percent that sales has changed, week to week.
     * </pre>
     */ Series.prototype.percentChange = function(period, whichIndex) {
        return this.proportionChange(period, whichIndex).select(function(v) {
            return v * 100;
        });
    };
    /**
     * For each period, compute the proportion of values that are less than the last value in the period.
     * Proportions are expressed as 0-1 values.
     *
     * @param period Optional period for computing the proportion rank - defaults to 2.
     *
     * @returns Returns a new series where each value indicates the proportion rank value for that period.
     *
     * @example
     * <pre>
     *
     * const proportionRank = series.proportionRank();
     * </pre>
     * @example
     * <pre>
     *
     * const proportionRank = series.proportionRank(100);
     * </pre>
     */ Series.prototype.proportionRank = function(period) {
        if (period === undefined) period = 2;
        if (!isNumber(period)) throw new Error("Expected 'period' parameter to 'Series.proportionRank' to be a number that specifies the time period for the ranking.");
        return this.rollingWindow(period + 1) // +1 to account for the last value being used.
        .select(function(window) {
            var latestValue = window.last();
            var numLowerValues = window.head(-1).filter(function(prevMomentum) {
                return prevMomentum < latestValue;
            }).count();
            var proportionRank = numLowerValues / period;
            return proportionRank;
        });
    };
    /**
     * For each period, compute the percent of values that are less than the last value in the period.
     * Percent are expressed as 0-100 values.
     *
     * @param period Optional period for computing the percent rank - defaults to 2.
     *
     * @returns Returns a new series where each value indicates the percent rank value for that period.
     *
     * @example
     * <pre>
     *
     * const percentRank = series.percentRank();
     * </pre>
     * @example
     * <pre>
     *
     * const percentRank = series.percentRank(100);
     * </pre>
     */ Series.prototype.percentRank = function(period) {
        if (period === undefined) period = 2;
        if (!isNumber(period)) throw new Error("Expected 'period' parameter to 'Series.percentRank' to be a number that specifies the time period for the ranking.");
        return this.proportionRank(period).select(function(proportion) {
            return proportion * 100;
        });
    };
    /**
     * Generates a cumulative sum across a series.
     *
     * @returns Returns a new series that is the cumulative sum of values across the input series.
     */ Series.prototype.cumsum = function() {
        var _this = this;
        return new Series(function() {
            var working = 0;
            var pairs = _this.toPairs();
            var output = pairs.map(function(_a) {
                var _b = __read(_a, 2), index = _b[0], value = _b[1];
                return [
                    index,
                    working += value
                ];
            });
            return {
                pairs: output
            };
        });
    };
    /**
     * Skip a number of values in the series.
     *
     * @param numValues Number of values to skip.
     *
     * @return Returns a new series with the specified number of values skipped.
     *
     * @example
     * <pre>
     *
     * const seriesWithRowsSkipped = series.skip(10); // Skip 10 rows in the original series.
     * </pre>
     */ Series.prototype.skip = function(numValues) {
        var _this = this;
        return new Series(function() {
            return {
                values: new SkipIterable(_this.getContent().values, numValues),
                index: new SkipIterable(_this.getContent().index, numValues),
                pairs: new SkipIterable(_this.getContent().pairs, numValues)
            };
        });
    };
    /**
     * Skips values in the series while a condition evaluates to true or truthy.
     *
     * @param predicate Returns true/truthy to continue to skip values in the original series.
     *
     * @return Returns a new series with all initial sequential values removed while the predicate returned true/truthy.
     *
     * @example
     * <pre>
     *
     * const seriesWithRowsSkipped = series.skipWhile(salesFigure => salesFigure > 100); // Skip initial sales figure that are less than 100.
     * </pre>
     */ Series.prototype.skipWhile = function(predicate) {
        var _this = this;
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'Series.skipWhile' function to be a predicate function that returns true/false.");
        return new Series(function() {
            return {
                values: new SkipWhileIterable(_this.getContent().values, predicate),
                pairs: new SkipWhileIterable(_this.getContent().pairs, function(pair) {
                    return predicate(pair[1]);
                })
            };
        });
    };
    /**
     * Skips values in the series untils a condition evaluates to true or truthy.
     *
     * @param predicate Return true/truthy to stop skipping values in the original series.
     *
     * @return Returns a new series with all initial sequential values removed until the predicate returned true/truthy.
     *
     * @example
     * <pre>
     *
     * const seriesWithRowsSkipped = series.skipUntil(salesFigure => salesFigure > 100); // Skip initial sales figures unitl we see one greater than 100.
     * </pre>
     */ Series.prototype.skipUntil = function(predicate) {
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'Series.skipUntil' function to be a predicate function that returns true/false.");
        return this.skipWhile(function(value) {
            return !predicate(value);
        });
    };
    /**
     * Take a number of  values from the series.
     *
     * @param numValues Number of values to take.
     *
     * @return Returns a new series with only the specified number of values taken from the original series.
     *
     * @example
     * <pre>
     *
     * const seriesWithRowsTaken = series.take(15); // Take only the first 15 values from the original series.
     * </pre>
     */ Series.prototype.take = function(numRows) {
        var _this = this;
        if (!isNumber(numRows)) throw new Error("Expected 'numRows' parameter to 'Series.take' function to be a number.");
        return new Series(function() {
            return {
                index: new TakeIterable(_this.getContent().index, numRows),
                values: new TakeIterable(_this.getContent().values, numRows),
                pairs: new TakeIterable(_this.getContent().pairs, numRows)
            };
        });
    };
    /**
     * Takes values from the series while a condition evaluates to true or truthy.
     *
     * @param predicate Returns true/truthy to continue to take values from the original series.
     *
     * @return Returns a new series with only the initial sequential values that were taken while the predicate returned true/truthy.
     *
     * @example
     * <pre>
     *
     * const seriesWithRowsTaken = series.takeWhile(salesFigure => salesFigure > 100); // Take only initial sales figures that are greater than 100.
     * </pre>
     */ Series.prototype.takeWhile = function(predicate) {
        var _this = this;
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'Series.takeWhile' function to be a predicate function that returns true/false.");
        return new Series(function() {
            return {
                values: new TakeWhileIterable(_this.getContent().values, predicate),
                pairs: new TakeWhileIterable(_this.getContent().pairs, function(pair) {
                    return predicate(pair[1]);
                })
            };
        });
    };
    /**
     * Takes values from the series until a condition evaluates to true or truthy.
     *
     * @param predicate Return true/truthy to stop taking values in the original series.
     *
     * @return Returns a new series with only the initial sequential values taken until the predicate returned true/truthy.
     *
     * @example
     * <pre>
     *
     * const seriesWithRowsTaken = series.takeUntil(salesFigure => salesFigure > 100); // Take all initial sales figures until we see one that is greater than 100.
     * </pre>
     */ Series.prototype.takeUntil = function(predicate) {
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'Series.takeUntil' function to be a predicate function that returns true/false.");
        return this.takeWhile(function(value) {
            return !predicate(value);
        });
    };
    /**
     * Static version of the count function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series to be counted.
     *
     * @returns Returns the count of values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      ColumnToBeCounted: Series.count,
     * });
     * </pre>
     */ Series.count = function(series) {
        return series.count();
    };
    /**
     * Count the number of values in the series.
     *
     * @return Returns the count of all values.
     *
     * @example
     * <pre>
     *
     * const numValues = series.count();
     * </pre>
     */ Series.prototype.count = function() {
        var total = 0;
        try {
            for(var _a = __values(this.getContent().values), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                ++total;
            }
        } catch (e_9_1) {
            e_9 = {
                error: e_9_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_9) throw e_9.error;
            }
        }
        var e_9, _c;
        return total;
    };
    /**
     * Get the first value of the series.
     *
     * @return Returns the first value of the series.
     *
     * @example
     * <pre>
     *
     * const firstValue = series.first();
     * </pre>
     */ Series.prototype.first = function() {
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                return value; // Only need the first value.
            }
        } catch (e_10_1) {
            e_10 = {
                error: e_10_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_10) throw e_10.error;
            }
        }
        var e_10, _c;
        throw new Error("Series.first: No values in Series.");
    };
    /**
     * Get the last value of the series.
     *
     * @return Returns the last value of the series.
     *
     * @example
     * <pre>
     *
     * const lastValue = series.last();
     * </pre>
     */ Series.prototype.last = function() {
        var lastValue = null;
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                lastValue = value; // Throw away all values until we get to the last one.
            }
        } catch (e_11_1) {
            e_11 = {
                error: e_11_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_11) throw e_11.error;
            }
        }
        if (lastValue === null) throw new Error("Series.last: No values in Series.");
        var e_11, _c;
        return lastValue;
    };
    /**
     * Get the value, if there is one, with the specified index.
     *
     * @param index Index to for which to retreive the value.
     *
     * @return Returns the value from the specified index in the series or undefined if there is no such index in the present in the series.
     *
     * @example
     * <pre>
     *
     * const value = series.at(5); // Get the value at index 5 (with a default 0-based index).
     * </pre>
     *
     * @example
     * <pre>
     *
     * const date = ... some date ...
     * // Retreive the value with specified date from a time-series (assuming date indexed has been applied).
     * const value = series.at(date);
     * </pre>
     */ Series.prototype.at = function(index) {
        if (this.none()) return undefined;
        return this.getRowByIndex(index);
    };
    /**
     * Get X value from the start of the series.
     * Pass in a negative value to get all values at the head except for X values at the tail.
     *
     * @param numValues Number of values to take.
     *
     * @return Returns a new series that has only the specified number of values taken from the start of the original series.
     *
     * @examples
     * <pre>
     *
     * const sample = series.head(10); // Take a sample of 10 values from the start of the series.
     * </pre>
     */ Series.prototype.head = function(numValues) {
        if (!isNumber(numValues)) throw new Error("Expected 'numValues' parameter to 'Series.head' function to be a number.");
        if (numValues === 0) return new Series(); // Empty series.
        var toTake = numValues < 0 ? this.count() - Math.abs(numValues) : numValues;
        return this.take(toTake);
    };
    /**
     * Get X values from the end of the series.
     * Pass in a negative value to get all values at the tail except X values at the head.
     *
     * @param numValues Number of values to take.
     *
     * @return Returns a new series that has only the specified number of values taken from the end of the original series.
     *
     * @examples
     * <pre>
     *
     * const sample = series.tail(12); // Take a sample of 12 values from the end of the series.
     * </pre>
     */ Series.prototype.tail = function(numValues) {
        if (!isNumber(numValues)) throw new Error("Expected 'numValues' parameter to 'Series.tail' function to be a number.");
        if (numValues === 0) return new Series(); // Empty series.
        var toSkip = numValues > 0 ? this.count() - numValues : Math.abs(numValues);
        return this.skip(toSkip);
    };
    /**
     * Filter the series through a user-defined predicate function.
     *
     * `where` is an alias for {@link Series.filter}.
     *
     * This is the same concept as the JavaScript function `Array.filter` but filters a data series rather than an array.
     *
     * @param predicate Predicate function to filter values from the series. Returns true/truthy to keep elements, or false/falsy to omit elements.
     *
     * @return Returns a new series containing only the values from the original series that matched the predicate.
     *
     * @example
     * <pre>
     *
     * // Filter so we only have sales figures greater than 100.
     * const filtered = series.where(salesFigure => salesFigure > 100);
     * console.log(filtered.toArray());
     * </pre>
     */ Series.prototype.where = function(predicate) {
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'Series.where' to be a function.");
        return this.filter(predicate);
    };
    /**
     * Filter the series through a user-defined predicate function.
     *
     * This is the same concept as the JavaScript function `Array.filter` but filters a data series rather than an array.
     *
     * @param predicate Predicate function to filter values from the series. Returns true/truthy to keep elements, or false/falsy to omit elements.
     *
     * @return Returns a new series containing only the values from the original series that matched the predicate.
     *
     * @example
     * <pre>
     *
     * // Filter so we only have sales figures greater than 100.
     * const filtered = series.filter(salesFigure => salesFigure > 100);
     * console.log(filtered.toArray());
     * </pre>
     */ Series.prototype.filter = function(predicate) {
        var _this = this;
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'Series.filter' to be a function.");
        return new Series(function() {
            var content = _this.getContent();
            return {
                values: new WhereIterable(_this.getContent().values, predicate),
                pairs: new WhereIterable(_this.getContent().pairs, function(pair) {
                    return predicate(pair[1]);
                })
            };
        });
    };
    /**
     * Invoke a callback function for each value in the series.
     *
     * @param callback The calback function to invoke for each value.
     *
     * @return Returns the original series with no modifications.
     *
     * @example
     * <pre>
     *
     * series.forEach(value => {
     *      // ... do something with the value ...
     * });
     * </pre>
     */ Series.prototype.forEach = function(callback) {
        if (!isFunction(callback)) throw new Error("Expected 'callback' parameter to 'Series.forEach' to be a function.");
        var index = 0;
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                callback(value, index++);
            }
        } catch (e_12_1) {
            e_12 = {
                error: e_12_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_12) throw e_12.error;
            }
        }
        var e_12, _c;
        return this;
    };
    /**
     * Evaluates a predicate function for every value in the series to determine
     * if some condition is true/truthy for **all** values in the series.
     *
     * @param predicate Predicate function that receives each value. It should returns true/truthy for a match, otherwise false/falsy.
     *
     * @return Returns true if the predicate has returned true or truthy for every value in the series, otherwise returns false. Returns false for an empty series.
     *
     * @example
     * <pre>
     *
     * const result = series.all(salesFigure => salesFigure > 100); // Returns true if all sales figures are greater than 100.
     * </pre>
     */ Series.prototype.all = function(predicate) {
        if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'Series.all' to be a function.");
        var count = 0;
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (!predicate(value)) return false;
                ++count;
            }
        } catch (e_13_1) {
            e_13 = {
                error: e_13_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_13) throw e_13.error;
            }
        }
        var e_13, _c;
        return count > 0;
    };
    /**
     * Evaluates a predicate function for every value in the series to determine
     * if some condition is true/truthy for **any** of values in the series.
     *
     * If no predicate is specified then it simply checks if the series contains more than zero values.
     *
     * @param predicate Optional predicate function that receives each value. It should return true/truthy for a match, otherwise false/falsy.
     *
     * @return Returns true if the predicate has returned truthy for any value in the series, otherwise returns false.
     * If no predicate is passed it returns true if the series contains any values at all.
     * Returns false for an empty series.
     *
     * @example
     * <pre>
     *
     * const result = series.any(salesFigure => salesFigure > 100); // Do we have any sales figures greater than 100?
     * </pre>
     *
     * @example
     * <pre>
     *
     * const result = series.any(); // Do we have any sales figures at all?
     * </pre>
     */ Series.prototype.any = function(predicate) {
        if (predicate) {
            if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'Series.any' to be a function.");
        }
        if (predicate) try {
            // Use the predicate to check each value.
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (predicate(value)) return true;
            }
        } catch (e_14_1) {
            e_14 = {
                error: e_14_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_14) throw e_14.error;
            }
        }
        else {
            // Just check if there is at least one item.
            var iterator = this[Symbol.iterator]();
            return !iterator.next().done;
        }
        var e_14, _c;
        return false; // Nothing passed.
    };
    /**
     * Evaluates a predicate function for every value in the series to determine
     * if some condition is true/truthy for **none** of values in the series.
     *
     * If no predicate is specified then it simply checks if the series contains zero values.
     *
     * @param predicate Optional predicate function that receives each value. It should return true/truthy for a match, otherwise false/falsy.
     *
     * @return Returns true if the predicate has returned truthy for zero values in the series, otherwise returns false. Returns false for an empty series.
     *
     * @example
     * <pre>
     *
     * const result = series.none(salesFigure => salesFigure > 100); // Do we have zero sales figures greater than 100?
     * </pre>
     *
     * @example
     * <pre>
     *
     * const result = series.none(); // Do we have zero sales figures?
     * </pre>
     */ Series.prototype.none = function(predicate) {
        if (predicate) {
            if (!isFunction(predicate)) throw new Error("Expected 'predicate' parameter to 'Series.none' to be a function.");
        }
        if (predicate) try {
            // Use the predicate to check each value.
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (predicate(value)) return false;
            }
        } catch (e_15_1) {
            e_15 = {
                error: e_15_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_15) throw e_15.error;
            }
        }
        else {
            // Just check if empty.
            var iterator = this[Symbol.iterator]();
            return iterator.next().done;
        }
        var e_15, _c;
        return true; // Nothing failed the predicate.
    };
    /**
     * Gets a new series containing all values starting at or after the specified index value.
     *
     * @param indexValue The index value at which to start the new series.
     *
     * @return Returns a new series containing all values starting at or after the specified index value.
     *
     * @example
     * <pre>
     *
     * const series = new Series({
     *      index: [0, 1, 2, 3], // This is the default index.
     *      values: [10, 20, 30, 40],
     * });
     *
     * const lastHalf = series.startAt(2);
     * expect(lastHalf.toArray()).to.eql([30, 40]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const timeSeries = ... a series indexed by date/time ...
     *
     * // Get all values starting at (or after) a particular date.
     * const result = timeSeries.startAt(new Date(2016, 5, 4));
     * </pre>
     */ Series.prototype.startAt = function(indexValue) {
        var _this = this;
        return new Series(function() {
            var lessThan = _this.getIndex().getLessThan();
            return {
                index: new SkipWhileIterable(_this.getContent().index, function(index) {
                    return lessThan(index, indexValue);
                }),
                pairs: new SkipWhileIterable(_this.getContent().pairs, function(pair) {
                    return lessThan(pair[0], indexValue);
                })
            };
        });
    };
    /**
     * Gets a new series containing all values up until and including the specified index value (inclusive).
     *
     * @param indexValue The index value at which to end the new series.
     *
     * @return Returns a new series containing all values up until and including the specified index value.
     *
     * @example
     * <pre>
     *
     * const series = new Series({
     *      index: [0, 1, 2, 3], // This is the default index.
     *      values: [10, 20, 30, 40],
     * });
     *
     * const firstHalf = series.endAt(1);
     * expect(firstHalf.toArray()).to.eql([10, 20]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const timeSeries = ... a series indexed by date/time ...
     *
     * // Get all values ending at a particular date.
     * const result = timeSeries.endAt(new Date(2016, 5, 4));
     * </pre>
     */ Series.prototype.endAt = function(indexValue) {
        var _this = this;
        return new Series(function() {
            var lessThanOrEqualTo = _this.getIndex().getLessThanOrEqualTo();
            return {
                index: new TakeWhileIterable(_this.getContent().index, function(index) {
                    return lessThanOrEqualTo(index, indexValue);
                }),
                pairs: new TakeWhileIterable(_this.getContent().pairs, function(pair) {
                    return lessThanOrEqualTo(pair[0], indexValue);
                })
            };
        });
    };
    /**
     * Gets a new series containing all values up to the specified index value (exclusive).
     *
     * @param indexValue The index value at which to end the new series.
     *
     * @return Returns a new series containing all values up to (but not including) the specified index value.
     *
     * @example
     * <pre>
     *
     * const series = new Series({
     *      index: [0, 1, 2, 3], // This is the default index.
     *      values: [10, 20, 30, 40],
     * });
     *
     * const firstHalf = series.before(2);
     * expect(firstHalf.toArray()).to.eql([10, 20]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const timeSeries = ... a series indexed by date/time ...
     *
     * // Get all values before the specified date.
     * const result = timeSeries.before(new Date(2016, 5, 4));
     * </pre>
     */ Series.prototype.before = function(indexValue) {
        var _this = this;
        return new Series(function() {
            var lessThan = _this.getIndex().getLessThan();
            return {
                index: new TakeWhileIterable(_this.getContent().index, function(index) {
                    return lessThan(index, indexValue);
                }),
                pairs: new TakeWhileIterable(_this.getContent().pairs, function(pair) {
                    return lessThan(pair[0], indexValue);
                })
            };
        });
    };
    /**
     * Gets a new series containing all values after the specified index value (exclusive).
     *
     * @param indexValue The index value after which to start the new series.
     *
     * @return Returns a new series containing all values after the specified index value.
     *
     * @example
     * <pre>
     *
     * const series = new Series({
     *      index: [0, 1, 2, 3], // This is the default index.
     *      values: [10, 20, 30, 40],
     * });
     *
     * const lastHalf = df.before(1);
     * expect(lastHalf.toArray()).to.eql([30, 40]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const timeSerie = ... a series indexed by date/time ...
     *
     * // Get all values after the specified date.
     * const result = timeSeries.after(new Date(2016, 5, 4));
     * </pre>
     */ Series.prototype.after = function(indexValue) {
        var _this = this;
        return new Series(function() {
            var lessThanOrEqualTo = _this.getIndex().getLessThanOrEqualTo();
            return {
                index: new SkipWhileIterable(_this.getContent().index, function(index) {
                    return lessThanOrEqualTo(index, indexValue);
                }),
                pairs: new SkipWhileIterable(_this.getContent().pairs, function(pair) {
                    return lessThanOrEqualTo(pair[0], indexValue);
                })
            };
        });
    };
    /**
     * Gets a new series containing all values between the specified index values (inclusive).
     *
     * @param startIndexValue The index at which to start the new series.
     * @param endIndexValue The index at which to end the new series.
     *
     * @return Returns a new series containing all values between the specified index values (inclusive).
     *
     * @example
     * <pre>
     *
     * const series = new Series({
     *      index: [0, 1, 2, 3, 4, 6], // This is the default index.
     *      values: [10, 20, 30, 40, 50, 60],
     * });
     *
     * const middleSection = series.between(1, 4);
     * expect(middleSection.toArray()).to.eql([20, 30, 40, 50]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const timeSeries = ... a series indexed by date/time ...
     *
     * // Get all values between the start and end dates (inclusive).
     * const result = timeSeries.after(new Date(2016, 5, 4), new Date(2016, 5, 22));
     * </pre>
     */ Series.prototype.between = function(startIndexValue, endIndexValue) {
        return this.startAt(startIndexValue).endAt(endIndexValue);
    };
    /**
     * Format the series for display as a string.
     * This forces lazy evaluation to complete.
     *
     * @return Generates and returns a string representation of the series.
     *
     * @example
     * <pre>
     *
     * console.log(series.toString());
     * </pre>
     */ Series.prototype.toString = function() {
        var header = [
            "__index__",
            "__value__"
        ];
        var rows = this.toPairs();
        var table = new (0, _easyTableDefault.default)();
        for(var rowIndex = 0; rowIndex < rows.length; ++rowIndex){
            var row = rows[rowIndex];
            for(var cellIndex = 0; cellIndex < row.length; ++cellIndex){
                var cell = row[cellIndex];
                table.cell(header[cellIndex], cell);
            }
            table.newRow();
        }
        return table.toString();
    };
    //
    // Helper function to parse a string to an int.
    //
    Series.parseInt = function(value, valueIndex) {
        if (value === undefined || value === null) return undefined;
        else {
            if (!isString(value)) throw new Error("Called Series.parseInts, expected all values in the series to be strings, instead found a '" + typeof value + "' at index " + valueIndex);
            if (value.length === 0) return undefined;
            return parseInt(value);
        }
    };
    /**
     * Parse a series with string values and convert it to a series with int values.
     *
     * @return Returns a new series with values parsed from strings to ints.
     *
     * @example
     * <pre>
     *
     * const parsed = series.parseInts();
     * </pre>
     */ Series.prototype.parseInts = function() {
        return this.select(Series.parseInt);
    };
    //
    // Helper function to parse a string to a float.
    //
    Series.parseFloat = function(value, valueIndex) {
        if (value === undefined || value === null) return undefined;
        else {
            if (!isString(value)) throw new Error("Called Series.parseFloats, expected all values in the series to be strings, instead found a '" + typeof value + "' at index " + valueIndex);
            if (value.length === 0) return undefined;
            return parseFloat(value);
        }
    };
    /**
     * Parse a series with string values and convert it to a series with float values.
     *
     * @return Returns a new series with values parsed from strings to floats.
     *
     * @example
     * <pre>
     *
     * const parsed = series.parseFloats();
     * </pre>
     */ Series.prototype.parseFloats = function() {
        return this.select(Series.parseFloat);
    };
    //
    // Helper function to parse a string to a date.
    //
    Series.parseDate = function(value, valueIndex, formatString) {
        if (value === undefined || value === null) return undefined;
        else {
            if (!isString(value)) throw new Error("Called Series.parseDates, expected all values in the series to be strings, instead found a '" + typeof value + "' at index " + valueIndex);
            if (value.length === 0) return undefined;
            return (0, _esmDefault.default)(value, formatString).toDate();
        }
    };
    /**
     * Parse a series with string values and convert it to a series with date values.
     *
     * @param formatString Optional formatting string for dates.
     *
     * Moment is used for date parsing.
     * https://momentjs.com
     *
     * @return Returns a new series with values parsed from strings to dates.
     *
     * @example
     * <pre>
     *
     * const parsed = series.parseDates();
     * </pre>
     */ Series.prototype.parseDates = function(formatString) {
        if (formatString) {
            if (!isString(formatString)) throw new Error("Expected optional 'formatString' parameter to Series.parseDates to be a string (if specified).");
        }
        return this.select(function(value, valueIndex) {
            return Series.parseDate(value, valueIndex, formatString);
        });
    };
    //
    // Helper function to convert a value to a string.
    //
    Series.toString = function(value, formatString) {
        if (value === undefined) return undefined;
        else if (value === null) return null;
        else if (formatString && isDate(value)) return (0, _esmDefault.default)(value).format(formatString);
        else if (formatString && isNumber(value)) return (0, _numeralDefault.default)(value).format(formatString);
        else return value.toString();
    };
    /**
     * Convert a series of values of different types to a series containing string values.
     *
     * @param formatString Optional formatting string for dates.
     *
     * Numeral.js is used for number formatting.
     * http://numeraljs.com/
     *
     * Moment is used for date formatting.
     * https://momentjs.com/docs/#/parsing/string-format/
     *
     * @return Returns a new series values converted from values to strings.
     *
     * @example
     * <pre>
     *
     * const result = series.toStrings("YYYY-MM-DD");
     * </pre>
     *
     * @example
     * <pre>
     *
     * const result = series.toStrings("0.00");
     * </pre>
     */ Series.prototype.toStrings = function(formatString) {
        if (formatString) {
            if (!isString(formatString)) throw new Error("Expected optional 'formatString' parameter to Series.toStrings to be a string (if specified).");
        }
        return this.select(function(value) {
            return Series.toString(value, formatString);
        });
    };
    /**
     * Forces lazy evaluation to complete and 'bakes' the series into memory.
     *
     * @return Returns a series that has been 'baked', all lazy evaluation has completed.
     *
     * @example
     * <pre>
     *
     * const baked = series.bake();
     * </pre>
     */ Series.prototype.bake = function() {
        if (this.getContent().isBaked) // Already baked.
        return this;
        return new Series({
            values: this.toArray(),
            pairs: this.toPairs(),
            baked: true
        });
    };
    /**
     * Converts (inflates) a series to a {@link DataFrame}.
     *
     * @param selector Optional user-defined selector function that transforms each value to produce the dataframe.
     *
     * @returns Returns a dataframe that was created from the original series.
     *
     * @example
     * <pre>
     *
     * const dataframe = series.inflate(); // Inflate a series of objects to a dataframe.
     * </pre>
     *
     * @example
     * <pre>
     *
     * const dataframe = series.inflate(value => { AColumn:  value }); // Produces a dataframe with 1 column from a series of values.
     * </pre>
     *
     * @example
     * <pre>
     *
     * const dataframe = series.inflate(value => { AColumn:  value.NestedValue }); // Extract a nested value and produce a dataframe from it.
     * </pre>
     */ Series.prototype.inflate = function(selector) {
        var _this = this;
        if (selector) {
            if (!isFunction(selector)) throw new Error("Expected 'selector' parameter to Series.inflate to be a selector function.");
            return new DataFrame(function() {
                var content = _this.getContent();
                return {
                    values: new SelectIterable(content.values, selector),
                    index: content.index,
                    pairs: new SelectIterable(content.pairs, function(pair, index) {
                        return [
                            pair[0],
                            selector(pair[1], index)
                        ];
                    })
                };
            });
        } else return new DataFrame(function() {
            var content = _this.getContent();
            return {
                values: content.values,
                index: content.index,
                pairs: content.pairs
            };
        });
    };
    /**
     * Static version of the sum function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series to be summed.
     *
     * @returns Returns the sum of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      ColumnToBeSummed: Series.sum,
     * });
     * </pre>
     */ Series.sum = function(series) {
        return series.sum();
    };
    /**
     * Sum the values in a series and returns the result.
     *
     * @returns Returns the sum of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const totalSales = salesFigures.sum();
     * </pre>
     */ Series.prototype.sum = function() {
        var total = 0;
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (value === null || value === undefined) continue; // Skip empty values.
                total += value; // Assumes this is a number series.
            }
        } catch (e_16_1) {
            e_16 = {
                error: e_16_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_16) throw e_16.error;
            }
        }
        var e_16, _c;
        return total;
    };
    /**
     * Static version of the average function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series to be averaged.
     *
     * @returns Returns the average of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      ColumnToBeAveraged: Series.average,
     * });
     * </pre>
     */ Series.average = function(series) {
        return series.average();
    };
    /**
     * Average the values in a series and returns the result
     *
     * `average` is an alias of {@link Series.mean}.
     *
     * @returns Returns the average of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const averageSales = salesFigures.average();
     * </pre>
     */ Series.prototype.average = function() {
        return this.mean();
    };
    /**
     * Static version of the mean function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series for which to compute the mean.
     *
     * @returns Returns the mean of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      ColumnToBeAveraged: Series.mean,
     * });
     * </pre>
     */ Series.mean = function(series) {
        return series.mean();
    };
    /**
     * Computes and returns the mean value of a set of values.
     *
     * @returns Returns the mean of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const averageSales = salesFigures.mean();
     * </pre>
     */ Series.prototype.mean = function() {
        var total = 0;
        var count = 0;
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (value === null || value === undefined) continue; // Skip empty values.
                count += 1;
                total += value; // Assumes this is a number series.
            }
        } catch (e_17_1) {
            e_17 = {
                error: e_17_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_17) throw e_17.error;
            }
        }
        if (count === 0) return 0;
        var e_17, _c;
        return total / count;
    };
    /**
     * Static version of the median function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series to find the median of.
     *
     * @returns Returns the median of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      InputColumn: Series.median,
     * });
     * </pre>
     */ Series.median = function(series) {
        return series.median();
    };
    /**
     * Get the median value in the series.
     * Note that this sorts the series, which can be expensive.
     *
     * @returns Returns the median of the values in the series.
     *
     * @example
     * <pre>
     *
     * const medianSales = salesFigures.median();
     * </pre>
     */ Series.prototype.median = function() {
        //
        // From here: http://stackoverflow.com/questions/5275115/add-a-median-method-to-a-list
        //
        // Have to assume we are working with a number series here.
        var numberSeries = this.filter(function(value) {
            return value !== null && value !== undefined;
        });
        var count = numberSeries.count();
        if (count === 0) return 0;
        var ordered = numberSeries.orderBy(function(value) {
            return value;
        }).toArray();
        if (count % 2 == 0) {
            // Even.
            var a = ordered[count / 2 - 1];
            var b = ordered[count / 2];
            return (a + b) / 2;
        }
        // Odd
        return ordered[Math.floor(count / 2)];
    };
    /**
     * Static version of the mode function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series for which to find the mode.
     *
     * @returns Returns the mode of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      InputColumn: Series.mode,
     * });
     * </pre>
     */ Series.mode = function(series) {
        return series.mode();
    };
    /**
     * Get the mode of the values in the series.
     * The mode is the most frequent value in the series.
     * Note that this reads the entire series into memory, which can be expensive.
     *
     * @returns Returns the mode of the values in the series.
     *
     * @example
     * <pre>
     *
     * const modeSales = salesFigures.mode();
     * </pre>
     */ Series.prototype.mode = function() {
        if (this.none()) return undefined;
        var lookup = new Map();
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (lookup.has(value)) lookup.set(value, lookup.get(value) + 1);
                else lookup.set(value, 1);
            }
        } catch (e_18_1) {
            e_18 = {
                error: e_18_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_18) throw e_18.error;
            }
        }
        var entries = Array.from(lookup.entries());
        entries.sort(function(a, b) {
            return b[1] - a[1];
        });
        var e_18, _c;
        return entries[0][0];
    };
    //
    // Gets the sum of squares for the series (and the count).
    //
    Series.prototype.sumOfSquares = function() {
        if (this.none()) return [
            0,
            1
        ];
        var average = this.mean();
        var sumOfSquaredDiffs = 0;
        var numberSeries = this.filter(function(value) {
            return value !== null && value !== undefined;
        });
        var count = 0;
        try {
            for(var numberSeries_1 = __values(numberSeries), numberSeries_1_1 = numberSeries_1.next(); !numberSeries_1_1.done; numberSeries_1_1 = numberSeries_1.next()){
                var value = numberSeries_1_1.value;
                count += 1;
                var numberValue = value;
                var diffFromMean = numberValue - average; // Assume input series are numbers.
                var diffFromMeanSqr = diffFromMean * diffFromMean;
                sumOfSquaredDiffs += diffFromMeanSqr;
            }
        } catch (e_19_1) {
            e_19 = {
                error: e_19_1
            };
        } finally{
            try {
                if (numberSeries_1_1 && !numberSeries_1_1.done && (_a = numberSeries_1.return)) _a.call(numberSeries_1);
            } finally{
                if (e_19) throw e_19.error;
            }
        }
        var e_19, _a;
        return [
            sumOfSquaredDiffs,
            count
        ];
    };
    /**
     * Static version of the (population) variance function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series for which to find the (population) variance.
     *
     * @returns Returns the (population) variance of the values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      InputColumn: Series.variance,
     * });
     * </pre>
     */ Series.variance = function(series) {
        return series.variance();
    };
    /**
     * Get the (population) variance of number values in the series.
     *
     * @returns Returns the (population) variance of the values in the series.
     *
     * @example
     * <pre>
     *
     * const salesVariance = salesFigures.variance();
     * </pre>
     */ Series.prototype.variance = function() {
        if (this.none()) return 0;
        var _a = __read(this.sumOfSquares(), 2), sumOfSquaredDiffs = _a[0], count = _a[1];
        return sumOfSquaredDiffs / count;
    };
    /**
     * Static version of the (population) standard deviation function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series for which to find the (population) standard deviation.
     *
     * @returns Returns the (population) standard deviation of the values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      InputColumn: Series.std,
     * });
     * </pre>
     */ Series.std = function(series) {
        return series.std();
    };
    /**
     * Get the (population) standard deviation of number values in the series.
     *
     * @returns Returns the (population) standard deviation of the values in the series.
     *
     * @example
     * <pre>
     *
     * const salesStdDev = salesFigures.std();
     * </pre>
     */ Series.prototype.std = function() {
        if (this.none()) return 0;
        return Math.sqrt(this.variance());
    };
    /**
     * Standardize a series of numbers by converting each "standard deviations from the mean".
     * This converts the input series to Z scores using the population standard deviation.
     *
     * @returns A new series containing Z scores computed from the input series.
     *
     * @example
     * <pre>
     *
     * const standardizedSeries = series.standardize();
     * </pre>
     */ Series.prototype.standardize = function() {
        if (this.none()) // There are no values in the input series.
        return new Series();
        var mean = this.mean();
        var std = this.std();
        if (std === 0) throw new Error("Can't standardize a series that has no variation.");
        var numberSeries = this.filter(function(value) {
            return value !== null && value !== undefined;
        });
        return numberSeries.map(function(value) {
            var zScore = (value - mean) / std;
            return zScore;
        });
    };
    /**
     * Static version of the (sample) variance function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series for which to find the (sample) variance.
     *
     * @returns Returns the (sample) variance of the values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      InputColumn: Series.sampleVariance,
     * });
     * </pre>
     */ Series.sampleVariance = function(series) {
        return series.sampleVariance();
    };
    /**
     * Get the (sample) variance of number values in the series.
     *
     * @returns Returns the (sample) variance of the values in the series.
     *
     * @example
     * <pre>
     *
     * const salesVariance = salesFigures.variance();
     * </pre>
     */ Series.prototype.sampleVariance = function() {
        if (this.none()) return 0;
        var _a = __read(this.sumOfSquares(), 2), sumOfSquaredDiffs = _a[0], count = _a[1];
        return sumOfSquaredDiffs / (count - 1);
    };
    /**
     * Static version of the (sample) standard deviation function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series for which to find the (sample) standard deviation.
     *
     * @returns Returns the (sample) standard deviation of the values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      InputColumn: Series.sampleStd,
     * });
     * </pre>
     */ Series.sampleStd = function(series) {
        return series.sampleStd();
    };
    /**
     * Get the (sample) standard deviation of number values in the series.
     *
     * @returns Returns the (sample) standard deviation of the values in the series.
     *
     * @example
     * <pre>
     *
     * const salesStdDev = salesFigures.sampleStd();
     * </pre>
     */ Series.prototype.sampleStd = function() {
        if (this.none()) return 0;
        return Math.sqrt(this.sampleVariance());
    };
    /**
     * Standardize a series of numbers by converting each "standard deviations from the mean".
     * This converts the input series to Z scores using the sample standard deviation.
     *
     * @returns A new series containing Z scores computed from the input series.
     *
     * @example
     * <pre>
     *
     * const standardizedSeries = series.sampleStandardize();
     * </pre>
     */ Series.prototype.sampleStandardize = function() {
        if (this.none()) // There are no values in the input series.
        return new Series();
        var mean = this.mean();
        var std = this.sampleStd();
        if (std === 0) throw new Error("Can't standardize a series that has no variation.");
        var numberSeries = this.filter(function(value) {
            return value !== null && value !== undefined;
        });
        return numberSeries.map(function(value) {
            var zScore = (value - mean) / std;
            return zScore;
        });
    };
    /**
     * Static version of the min function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series to find the minimum of.
     *
     * @returns Returns the minimum of number values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      Column: Series.min,
     * });
     * </pre>
     */ Series.min = function(series) {
        return series.min();
    };
    /**
     * Get the min value in the series.
     *
     * @returns Returns the minimum of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const minSales = salesFigures.min();
     * </pre>
     */ Series.prototype.min = function() {
        var min;
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (value === null || value === undefined) continue; // Skip empty values.
                var numberValue = value; // Have to assume we are working with a number series here.;
                if (min === undefined) min = numberValue;
                else min = Math.min(min, numberValue);
            }
        } catch (e_20_1) {
            e_20 = {
                error: e_20_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_20) throw e_20.error;
            }
        }
        if (min === undefined) return 0;
        var e_20, _c;
        return min;
    };
    /**
     * Static version of the max function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series to find the maximum of.
     *
     * @returns Returns the maximum of number values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      Column: Series.max,
     * });
     * </pre>
     */ Series.max = function(series) {
        return series.max();
    };
    /**
     * Get the max value in the series.
     *
     * @returns Returns the maximum of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const maxSales = salesFigures.max();
     * </pre>
     */ Series.prototype.max = function() {
        var max;
        try {
            for(var _a = __values(this), _b = _a.next(); !_b.done; _b = _a.next()){
                var value = _b.value;
                if (value === null || value === undefined) continue; // Skip empty values.
                var numberValue = value; // Have to assume we are working with a number series here.
                if (max === undefined) max = numberValue;
                else max = Math.max(max, numberValue);
            }
        } catch (e_21_1) {
            e_21 = {
                error: e_21_1
            };
        } finally{
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            } finally{
                if (e_21) throw e_21.error;
            }
        }
        if (max === undefined) return 0;
        var e_21, _c;
        return max;
    };
    /**
     * Static version of the range function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.
     *
     * @param series Input series for which to find the range of values.
     *
     * @returns Returns the range of number values in the series.
     *
     * @example
     * <pre>
     *
     * const summary = dataFrame.summarize({
     *      Column: Series.range,
     * });
     * </pre>
     */ Series.range = function(series) {
        return series.range();
    };
    /**
     * Get the range of values in the series.
     *
     * @returns Returns the range of the number values in the series.
     *
     * @example
     * <pre>
     *
     * const range = salesFigures.range();
     * </pre>
     */ Series.prototype.range = function() {
        return this.max() - this.min();
    };
    /**
     * Invert the sign of every number value in the series.
     * This assumes that the input series contains numbers.
     *
     * @returns Returns a new series with all number values inverted.
     *
     * @example
     * <pre>
     *
     * const inverted = series.invert();
     * </pre>
     */ Series.prototype.invert = function() {
        return this.select(function(value) {
            if (value === null || value === undefined) return value;
            else return -value; // Assume input is a number series.
        });
    };
    /**
     * Counts the number of sequential values where the predicate evaluates to truthy.
     * Outputs 0 for values when the predicate evaluates to falsy.
     *
     * @param predicate User-defined function. Should evaluate to truthy to activate the counter or falsy to deactivate it.
     *
     * @returns Returns a new series that counts up the number of sequential values where the predicate evaluates to truthy. 0 values appear when the prediate evaluates to falsy.
     *
     * @example
     * <pre>
     *
     * const series = new Series([ 1, 10, 3, 15, 8, 5 ]);
     * const counted = series.counter(value => value >= 3);
     * console.log(counted.toString());
     * </pre>
     */ Series.prototype.counter = function(predicate) {
        return this.groupSequentialBy(predicate).selectMany(function(group, i) {
            if (predicate(group.first())) // This group matches the predicate.
            return range(1, group.count()).withIndex(group.getIndex()).toPairs(); //TODO: selectMany wipes the index. It needs to respect it!
            else // This group doesn't match the predicate.
            return replicate(0, group.count()).withIndex(group.getIndex()).toPairs(); //TODO: selectMany wipes the index. It needs to respect it!
        }).withIndex(function(pair) {
            return pair[0];
        }).select(function(pair) {
            return pair[1];
        });
    };
    /**
     * Gets a new series in reverse order.
     *
     * @return Returns a new series that is the reverse of the original.
     *
     * @example
     * <pre>
     *
     * const reversed = series.reverse();
     * </pre>
     */ Series.prototype.reverse = function() {
        var _this = this;
        return new Series(function() {
            return {
                values: new ReverseIterable(_this.getContent().values),
                index: new ReverseIterable(_this.getContent().index),
                pairs: new ReverseIterable(_this.getContent().pairs)
            };
        });
    };
    /**
     * Returns only the set of values in the series that are distinct.
     * Provide a user-defined selector to specify criteria for determining the distinctness.
     * This can be used to remove duplicate values from the series.
     *
     * @param selector Optional user-defined selector function that specifies the criteria used to make comparisons for duplicate values.
     *
     * @return Returns a series containing only unique values in the series.
     *
     * @example
     * <pre>
     *
     * const uniqueValues = series.distinct(); // Get only non-duplicated value in the series.
     * </pre>
     *
     * @example
     * <pre>
     *
     * const bucketedValues = series.distinct(value => Math.floor(value / 10)); // Lump values into buckets of 10.
     * </pre>
     */ Series.prototype.distinct = function(selector) {
        var _this = this;
        return new Series(function() {
            return {
                values: new DistinctIterable(_this.getContent().values, selector),
                pairs: new DistinctIterable(_this.getContent().pairs, function(pair) {
                    return selector && selector(pair[1]) || pair[1];
                })
            };
        });
    };
    /**
     * Collects values in the series into a new series of groups according to a user-defined selector function.
     *
     * @param selector User-defined selector function that specifies the criteriay to group by.
     *
     * @return Returns a new series of groups. Each group is a series with values that have been grouped by the 'selector' function.
     *
     * @example
     * <pre>
     *
     * const sales = ... product sales ...
     * const salesByProduct = sales.groupBy(sale => sale.ProductId);
     * for (const productSalesGroup of salesByProduct) {
     *      // ... do something with each product group ...
     *      const productId = productSalesGroup.first().ProductId;
     *      const totalSalesForProduct = productSalesGroup.deflate(sale => sale.Amount).sum();
     *      console.log(totalSalesForProduct);
     * }
     * </pre>
     */ Series.prototype.groupBy = function(selector) {
        var _this = this;
        if (!isFunction(selector)) throw new Error("Expected 'selector' parameter to 'Series.groupBy' to be a selector function that determines the value to group the series by.");
        return new Series(function() {
            var groups = []; // Each group, in order of discovery.
            var groupMap = {}; // Group map, records groups by key.
            var valueIndex = 0;
            try {
                for(var _a = __values(_this.getContent().pairs), _b = _a.next(); !_b.done; _b = _a.next()){
                    var pair = _b.value;
                    var groupKey = selector(pair[1], valueIndex);
                    ++valueIndex;
                    var existingGroup = groupMap[groupKey];
                    if (existingGroup) existingGroup.push(pair);
                    else {
                        var newGroup = [];
                        newGroup.push(pair);
                        groups.push(newGroup);
                        groupMap[groupKey] = newGroup;
                    }
                }
            } catch (e_22_1) {
                e_22 = {
                    error: e_22_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_22) throw e_22.error;
                }
            }
            var e_22, _c;
            return {
                values: groups.map(function(group) {
                    return new Series({
                        pairs: group
                    });
                })
            };
        });
    };
    /**
     * Collects values in the series into a new series of groups based on if the values are the same or according to a user-defined selector function.
     *
     * @param selector Optional selector that specifies the criteria for grouping.
     *
     * @return Returns a new series of groups. Each group is a series with values that are the same or have been grouped by the 'selector' function.
     *
     * @example
     * <pre>
     *
     * // Some ultra simple stock trading strategy backtesting...
     * const dailyStockPrice = ... daily stock price for a company ...
     * const priceGroups  = dailyStockPrice.groupBy(day => day.close > day.movingAverage);
     * for (const priceGroup of priceGroups) {
     *      // ... do something with each stock price group ...
     *
     *      const firstDay = priceGroup.first();
     *      if (firstDay.close > movingAverage) {
     *          // This group of days has the stock price above its moving average.
     *          // ... maybe enter a long trade here ...
     *      }
     *      else {
     *          // This group of days has the stock price below its moving average.
     *          // ... maybe enter a short trade here ...
     *      }
     * }
     * </pre>
     */ Series.prototype.groupSequentialBy = function(selector) {
        if (selector) {
            if (!isFunction(selector)) throw new Error("Expected 'selector' parameter to 'Series.groupSequentialBy' to be a selector function that determines the value to group the series by.");
        } else selector = function(value) {
            return value;
        };
        return this.variableWindow(function(a, b) {
            return selector(a) === selector(b);
        });
    };
    /**
     * Concatenate multiple series into a single series.
     *
     * @param series - Array of series to concatenate.
     *
     * @returns Returns a single series concatenated from multiple input series.
     */ Series.concat = function(series) {
        if (!isArray(series)) throw new Error("Expected 'series' parameter to 'Series.concat' to be an array of series.");
        return new Series(function() {
            var upcast = series; // Upcast so that we can access private index, values and pairs.
            var contents = upcast.map(function(series) {
                return series.getContent();
            });
            return {
                values: new ConcatIterable(contents.map(function(content) {
                    return content.values;
                })),
                pairs: new ConcatIterable(contents.map(function(content) {
                    return content.pairs;
                }))
            };
        });
    };
    /**
     * Concatenate multiple other series onto this series.
     *
     * @param series Multiple arguments. Each can be either a series or an array of series.
     *
     * @return Returns a single series concatenated from multiple input series.
     *
     * @example
     * <pre>
     *
     * const concatenated = a.concat(b);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const concatenated = a.concat(b, c);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const concatenated = a.concat([b, c]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const concatenated = a.concat(b, [c, d]);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const otherSeries = [... array of series...];
     * const concatenated = a.concat(otherSeries);
     * </pre>
     */ Series.prototype.concat = function() {
        var series = [];
        for(var _i = 0; _i < arguments.length; _i++)series[_i] = arguments[_i];
        var concatInput = [
            this
        ];
        try {
            for(var series_3 = __values(series), series_3_1 = series_3.next(); !series_3_1.done; series_3_1 = series_3.next()){
                var input = series_3_1.value;
                if (isArray(input)) try {
                    for(var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()){
                        var subInput = input_1_1.value;
                        concatInput.push(subInput);
                    }
                } catch (e_23_1) {
                    e_23 = {
                        error: e_23_1
                    };
                } finally{
                    try {
                        if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
                    } finally{
                        if (e_23) throw e_23.error;
                    }
                }
                else concatInput.push(input);
            }
        } catch (e_24_1) {
            e_24 = {
                error: e_24_1
            };
        } finally{
            try {
                if (series_3_1 && !series_3_1.done && (_b = series_3.return)) _b.call(series_3);
            } finally{
                if (e_24) throw e_24.error;
            }
        }
        var e_24, _b, e_23, _a;
        return Series.concat(concatInput);
    };
    /**
    * Zip together multiple series to create a new series.
    * Preserves the index of the first series.
    *
    * @param series - An iterable of series to be zipped.
    * @param zipper - Selector function that produces a new series based on the input series.
    *
    * @returns Returns a single series zipped from multiple input series.
    */ Series.zip = function(series, zipper) {
        var input = Array.from(series);
        if (input.length === 0) return new Series();
        var firstSeries = input[0];
        if (firstSeries.none()) return new Series();
        return new Series(function() {
            var firstSeriesUpCast = firstSeries;
            var upcast = input; // Upcast so that we can access private index, values and pairs.
            return {
                index: firstSeriesUpCast.getContent().index,
                values: new ZipIterable(upcast.map(function(s) {
                    return s.getContent().values;
                }), zipper)
            };
        });
    };
    Series.prototype.zip = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        var selector = args[args.length - 1];
        var input = [
            this
        ].concat(args.slice(0, args.length - 1));
        return Series.zip(input, function(values) {
            return selector.apply(void 0, __spread(values));
        });
    };
    /**
     * Sorts the series in ascending order by a value defined by the user-defined selector function.
     *
     * @param selector User-defined selector function that selects the value to sort by.
     *
     * @return Returns a new series that has been ordered accorrding to the value chosen by the selector function.
     *
     * @example
     * <pre>
     *
     * const orderedSeries = series.orderBy(value => value);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const orderedSeries = series.orderBy(value => value.NestedValue);
     * </pre>
     */ Series.prototype.orderBy = function(selector) {
        var content = this.getContent();
        return new OrderedSeries({
            values: content.values,
            pairs: content.pairs,
            selector: selector,
            direction: Direction.Ascending,
            parent: null
        });
    };
    /**
     * Sorts the series in descending order by a value defined by the user-defined selector function.
     *
     * @param selector User-defined selector function that selects the value to sort by.
     *
     * @return Returns a new series that has been ordered accorrding to the value chosen by the selector function.
     *
     * @example
     * <pre>
     *
     * const orderedSeries = series.orderByDescending(value => value);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const orderedSeries = series.orderByDescending(value => value.NestedValue);
     * </pre>
     */ Series.prototype.orderByDescending = function(selector) {
        var content = this.getContent();
        return new OrderedSeries({
            values: content.values,
            pairs: content.pairs,
            selector: selector,
            direction: Direction.Descending,
            parent: null
        });
    };
    /**
     * Creates a new series by merging two input dataframes.
     * The resulting series contains the union of value from the two input series.
     * These are the unique combination of values in both series.
     * This is basically a concatenation and then elimination of duplicates.
     *
     * @param other The other series to merge.
     * @param selector Optional user-defined selector function that selects the value to compare to determine distinctness.
     *
     * @return Returns the union of the two series.
     *
     * @example
     * <pre>
     *
     * const seriesA = ...
     * const seriesB = ...
     * const merged = seriesA.union(seriesB);
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Merge two sets of customer records that may contain the same
     * // customer record in each set. This is basically a concatenation
     * // of the series and then an elimination of any duplicate records
     * // that result.
     * const customerRecordsA = ...
     * const customerRecordsB = ...
     * const mergedCustomerRecords = customerRecordsA.union(
     *      customerRecordsB,
     *      customerRecord => customerRecord.CustomerId
     * );
     * </pre>
     *
     *
     * @example
     * <pre>
     *
     * // Note that you can achieve the exact same result as the previous
     * // example by doing a {@link Series.concat) and {@link Series.distinct}
     * // of the input series and then an elimination of any duplicate records
     * // that result.
     * const customerRecordsA = ...
     * const customerRecordsB = ...
     * const mergedCustomerRecords = customerRecordsA
     *      .concat(customerRecordsB)
     *      .distinct(customerRecord => customerRecord.CustomerId);
     * </pre>
     *
     */ Series.prototype.union = function(other, selector) {
        if (selector) {
            if (!isFunction(selector)) throw new Error("Expected optional 'selector' parameter to 'Series.union' to be a selector function.");
        }
        return this.concat(other).distinct(selector);
    };
    /**
     * Creates a new series by merging two input series.
     * The resulting series contains the intersection of values from the two input series.
     * These are only the values that appear in both series.
     *
     * @param inner The inner series to merge (the series you call the function on is the 'outer' series).
     * @param outerSelector Optional user-defined selector function that selects the key from the outer series that is used to match the two series.
     * @param innerSelector Optional user-defined selector function that selects the key from the inner series that is used to match the two series.
     *
     * @return Returns a new series that contains the intersection of values from the two input series.
     *
     * @example
     * <pre>
     *
     * const seriesA = ...
     * const seriesB = ...
     * const mergedDf = seriesA.intersection(seriesB);
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Merge two sets of customer records to find only the
     * // customers that appears in both.
     * const customerRecordsA = ...
     * const customerRecordsB = ...
     * const intersectionOfCustomerRecords = customerRecordsA.intersection(
     *      customerRecordsB,
     *      customerRecord => customerRecord.CustomerId
     * );
     * </pre>
     */ Series.prototype.intersection = function(inner, outerSelector, innerSelector) {
        if (outerSelector) {
            if (!isFunction(outerSelector)) throw new Error("Expected optional 'outerSelector' parameter to 'Series.intersection' to be a function.");
        } else outerSelector = function(value) {
            return value;
        };
        if (innerSelector) {
            if (!isFunction(innerSelector)) throw new Error("Expected optional 'innerSelector' parameter to 'Series.intersection' to be a function.");
        } else innerSelector = function(value) {
            return value;
        };
        var outer = this;
        return outer.filter(function(outerValue) {
            var outerKey = outerSelector(outerValue);
            return inner.filter(function(innerValue) {
                return outerKey === innerSelector(innerValue);
            }).any();
        });
    };
    /**
     * Creates a new series by merging two input series.
     * The resulting series contains only the values from the 1st series that don't appear in the 2nd series.
     * This is essentially subtracting the values from the 2nd series from the 1st and creating a new series with the remaining values.
     *
     * @param inner The inner series to merge (the series you call the function on is the 'outer' series).
     * @param outerSelector Optional user-defined selector function that selects the key from the outer series that is used to match the two series.
     * @param innerSelector Optional user-defined selector function that selects the key from the inner series that is used to match the two series.
     *
     * @return Returns a new series that contains only the values from the 1st series that don't appear in the 2nd series.
     *
     * @example
     * <pre>
     *
     * const seriesA = ...
     * const seriesB = ...
     * const remainingDf = seriesA.except(seriesB);
     * </pre>
     *
     * @example
     * <pre>
     *
     * // Find the list of customers haven't bought anything recently.
     * const allCustomers = ... list of all customers ...
     * const recentCustomers = ... list of customers who have purchased recently ...
     * const remainingCustomers = allCustomers.except(
     *      recentCustomers,
     *      customerRecord => customerRecord.CustomerId
     * );
     * </pre>
     */ Series.prototype.except = function(inner, outerSelector, innerSelector) {
        if (outerSelector) {
            if (!isFunction(outerSelector)) throw new Error("Expected optional 'outerSelector' parameter to 'Series.except' to be a function.");
        } else outerSelector = function(value) {
            return value;
        };
        if (innerSelector) {
            if (!isFunction(innerSelector)) throw new Error("Expected optional 'innerSelector' parameter to 'Series.except' to be a function.");
        } else innerSelector = function(value) {
            return value;
        };
        var outer = this;
        return outer.filter(function(outerValue) {
            var outerKey = outerSelector(outerValue);
            return inner.filter(function(innerValue) {
                return outerKey === innerSelector(innerValue);
            }).none();
        });
    };
    /**
      * Creates a new series by merging two input series.
      * The resulting dataframe contains only those value that have matching keys in both input series.
      *
      * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).
      * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.
      * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.
      * @param resultSelector User-defined function that merges outer and inner values.
      *
      * @return Returns the new merged series.
      *
      * @example
      * <pre>
      *
      * // Join together two sets of customers to find those
      * // that have bought both product A and product B.
      * const customerWhoBoughtProductA = ...
      * const customerWhoBoughtProductB = ...
      * const customersWhoBoughtBothProductsDf = customerWhoBoughtProductA.join(
      *          customerWhoBoughtProductB,
      *          customerA => customerA.CustomerId, // Join key.
      *          customerB => customerB.CustomerId, // Join key.
      *          (customerA, customerB) => {
      *              return {
      *                  // ... merge the results ...
      *              };
      *          }
      *      );
      * </pre>
      */ Series.prototype.join = function(inner, outerKeySelector, innerKeySelector, resultSelector) {
        if (!isFunction(outerKeySelector)) throw new Error("Expected 'outerKeySelector' parameter of 'Series.join' to be a selector function.");
        if (!isFunction(innerKeySelector)) throw new Error("Expected 'innerKeySelector' parameter of 'Series.join' to be a selector function.");
        if (!isFunction(resultSelector)) throw new Error("Expected 'resultSelector' parameter of 'Series.join' to be a selector function.");
        var outer = this;
        return new Series(function() {
            var innerMap = inner.groupBy(innerKeySelector).toObject(function(group) {
                return innerKeySelector(group.first());
            }, function(group) {
                return group;
            });
            var outerContent = outer.getContent();
            var output = [];
            try {
                for(var outer_1 = __values(outer), outer_1_1 = outer_1.next(); !outer_1_1.done; outer_1_1 = outer_1.next()){
                    var outerValue = outer_1_1.value;
                    var outerKey = outerKeySelector(outerValue);
                    var innerGroup = innerMap[outerKey];
                    if (innerGroup) try {
                        for(var innerGroup_1 = __values(innerGroup), innerGroup_1_1 = innerGroup_1.next(); !innerGroup_1_1.done; innerGroup_1_1 = innerGroup_1.next()){
                            var innerValue = innerGroup_1_1.value;
                            output.push(resultSelector(outerValue, innerValue));
                        }
                    } catch (e_25_1) {
                        e_25 = {
                            error: e_25_1
                        };
                    } finally{
                        try {
                            if (innerGroup_1_1 && !innerGroup_1_1.done && (_a = innerGroup_1.return)) _a.call(innerGroup_1);
                        } finally{
                            if (e_25) throw e_25.error;
                        }
                    }
                }
            } catch (e_26_1) {
                e_26 = {
                    error: e_26_1
                };
            } finally{
                try {
                    if (outer_1_1 && !outer_1_1.done && (_b = outer_1.return)) _b.call(outer_1);
                } finally{
                    if (e_26) throw e_26.error;
                }
            }
            var e_26, _b, e_25, _a;
            return {
                values: output
            };
        });
    };
    /**
     * Creates a new series by merging two input series.
     * The resulting series contains only those values that are only present in one or the other of the series, not both.
     *
     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).
     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.
     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.
     * @param resultSelector User-defined function that merges outer and inner values.
     *
     * Implementation from here:
     *
     * 	http://blogs.geniuscode.net/RyanDHatch/?p=116
     *
     * @return Returns the new merged series.
     *
     * @example
     * <pre>
     *
     * // Join together two sets of customers to find those
     * // that have bought either product A or product B, not not both.
     * const customerWhoBoughtProductA = ...
     * const customerWhoBoughtProductB = ...
     * const customersWhoBoughtEitherProductButNotBothDf = customerWhoBoughtProductA.joinOuter(
     *          customerWhoBoughtProductB,
     *          customerA => customerA.CustomerId, // Join key.
     *          customerB => customerB.CustomerId, // Join key.
     *          (customerA, customerB) => {
     *              return {
     *                  // ... merge the results ...
     *              };
     *          }
     *      );
     * </pre>
     */ Series.prototype.joinOuter = function(inner, outerKeySelector, innerKeySelector, resultSelector) {
        if (!isFunction(outerKeySelector)) throw new Error("Expected 'outerKeySelector' parameter of 'Series.joinOuter' to be a selector function.");
        if (!isFunction(innerKeySelector)) throw new Error("Expected 'innerKeySelector' parameter of 'Series.joinOuter' to be a selector function.");
        if (!isFunction(resultSelector)) throw new Error("Expected 'resultSelector' parameter of 'Series.joinOuter' to be a selector function.");
        // Get the results in the outer that are not in the inner.
        var outer = this;
        var outerResult = outer.except(inner, outerKeySelector, innerKeySelector).select(function(outer) {
            return resultSelector(outer, null);
        }).resetIndex();
        // Get the results in the inner that are not in the outer.
        var innerResult = inner.except(outer, innerKeySelector, outerKeySelector).select(function(inner) {
            return resultSelector(null, inner);
        }).resetIndex();
        // Get the intersection of results between inner and outer.
        var intersectionResults = outer.join(inner, outerKeySelector, innerKeySelector, resultSelector);
        return outerResult.concat(intersectionResults).concat(innerResult).resetIndex();
    };
    /**
     * Creates a new series by merging two input series.
     * The resulting series contains only those values that are present either in both series or only in the outer (left) series.
     *
     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).
     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.
     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.
     * @param resultSelector User-defined function that merges outer and inner values.
     *
     * Implementation from here:
     *
     * 	http://blogs.geniuscode.net/RyanDHatch/?p=116
     *
     * @return Returns the new merged series.
     *
     * @example
     * <pre>
     *
     * // Join together two sets of customers to find those
     * // that have bought either just product A or both product A and product B.
     * const customerWhoBoughtProductA = ...
     * const customerWhoBoughtProductB = ...
     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterLeft(
     *          customerWhoBoughtProductB,
     *          customerA => customerA.CustomerId, // Join key.
     *          customerB => customerB.CustomerId, // Join key.
     *          (customerA, customerB) => {
     *              return {
     *                  // ... merge the results ...
     *              };
     *          }
     *      );
     * </pre>
     */ Series.prototype.joinOuterLeft = function(inner, outerKeySelector, innerKeySelector, resultSelector) {
        if (!isFunction(outerKeySelector)) throw new Error("Expected 'outerKeySelector' parameter of 'Series.joinOuterLeft' to be a selector function.");
        if (!isFunction(innerKeySelector)) throw new Error("Expected 'innerKeySelector' parameter of 'Series.joinOuterLeft' to be a selector function.");
        if (!isFunction(resultSelector)) throw new Error("Expected 'resultSelector' parameter of 'Series.joinOuterLeft' to be a selector function.");
        // Get the results in the outer that are not in the inner.
        var outer = this;
        var outerResult = outer.except(inner, outerKeySelector, innerKeySelector).select(function(outer) {
            return resultSelector(outer, null);
        }).resetIndex();
        // Get the intersection of results between inner and outer.
        var intersectionResults = outer.join(inner, outerKeySelector, innerKeySelector, resultSelector);
        return outerResult.concat(intersectionResults).resetIndex();
    };
    /**
     * Creates a new series by merging two input series.
     * The resulting series contains only those values that are present either in both series or only in the inner (right) series.
     *
     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).
     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.
     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.
     * @param resultSelector User-defined function that merges outer and inner values.
     *
     * Implementation from here:
     *
     * 	http://blogs.geniuscode.net/RyanDHatch/?p=116
     *
     * @return Returns the new merged series.
     *
     * @example
     * <pre>
     *
     * // Join together two sets of customers to find those
     * // that have bought either just product B or both product A and product B.
     * const customerWhoBoughtProductA = ...
     * const customerWhoBoughtProductB = ...
     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterRight(
     *          customerWhoBoughtProductB,
     *          customerA => customerA.CustomerId, // Join key.
     *          customerB => customerB.CustomerId, // Join key.
     *          (customerA, customerB) => {
     *              return {
     *                  // ... merge the results ...
     *              };
     *          }
     *      );
     * </pre>
     */ Series.prototype.joinOuterRight = function(inner, outerKeySelector, innerKeySelector, resultSelector) {
        if (!isFunction(outerKeySelector)) throw new Error("Expected 'outerKeySelector' parameter of 'Series.joinOuterRight' to be a selector function.");
        if (!isFunction(innerKeySelector)) throw new Error("Expected 'innerKeySelector' parameter of 'Series.joinOuterRight' to be a selector function.");
        if (!isFunction(resultSelector)) throw new Error("Expected 'resultSelector' parameter of 'Series.joinOuterRight' to be a selector function.");
        // Get the results in the inner that are not in the outer.
        var outer = this;
        var innerResult = inner.except(outer, innerKeySelector, outerKeySelector).select(function(inner) {
            return resultSelector(null, inner);
        }).resetIndex();
        // Get the intersection of results between inner and outer.
        var intersectionResults = outer.join(inner, outerKeySelector, innerKeySelector, resultSelector);
        return intersectionResults.concat(innerResult).resetIndex();
    };
    /**
     * Produces a new series with all string values truncated to the requested maximum length.
     *
     * @param maxLength - The maximum length of the string values after truncation.
     *
     * @returns Returns a new series with strings that are truncated to the specified maximum length.
     *
     * @example
     * <pre>
     *
     * const truncated = series.truncateStrings(10); // Truncate all string values to max length of 10 characters.
     * </pre>
     */ Series.prototype.truncateStrings = function(maxLength) {
        if (!isNumber(maxLength)) throw new Error("Expected 'maxLength' parameter to 'Series.truncateStrings' to be a number.");
        return this.select(function(value) {
            if (isString(value)) {
                if (value.length > maxLength) return value.substring(0, maxLength);
            }
            return value;
        });
    };
    /**
     * Produces a new series with all number values rounded to the specified number of places.
     *
     * @param numDecimalPlaces The number of decimal places, defaults to 2.
     *
     * @returns Returns a new series with all number values rounded to the specified number of places.
     *
     * @example
     * <pre>
     *
     * const series = ... your data series ...
     * const rounded = series.round(); // Round numbers to two decimal places.
     * </pre>
     *
     * @example
     * <pre>
     *
     * const series = ... your data series ...
     * const rounded = series.round(3); // Round numbers to three decimal places.
     * </pre>
     */ Series.prototype.round = function(numDecimalPlaces) {
        if (numDecimalPlaces !== undefined) {
            if (!isNumber(numDecimalPlaces)) throw new Error("Expected 'numDecimalPlaces' parameter to 'Series.round' to be a number.");
        } else numDecimalPlaces = 2; // Default to two decimal places.
        return this.select(function(value) {
            if (isNumber(value)) return parseFloat(value.toFixed(numDecimalPlaces));
            return value;
        });
    };
    /**
     * Insert a pair at the start of the series.
     * Doesn't modify the original series! The returned series is entirely new and contains values from the original series plus the inserted pair.
     *
     * @param pair The index/value pair to insert.
     *
     * @return Returns a new series with the specified pair inserted.
     *
     * @example
     * <pre>
     *
     * const newIndex = ... index of the new row ...
     * const newRow = ... the new data row to insert ...
     * const insertedSeries = series.insertPair([newIndex, newRows]);
     * </pre>
     */ Series.prototype.insertPair = function(pair) {
        if (!isArray(pair)) throw new Error("Expected 'pair' parameter to 'Series.insertPair' to be an array.");
        if (pair.length !== 2) throw new Error("Expected 'pair' parameter to 'Series.insertPair' to be an array with two elements. The first element is the index, the second is the value.");
        return new Series({
            pairs: [
                pair
            ]
        }).concat(this);
    };
    /**
     * Append a pair to the end of a series.
     * Doesn't modify the original series! The returned series is entirely new and contains values from the original series plus the appended pair.
     *
     * @param pair The index/value pair to append.
     *
     * @return Returns a new series with the specified pair appended.
     *
     * @example
     * <pre>
     *
     * const newIndex = ... index of the new row ...
     * const newRow = ... the new data row to append ...
     * const appendedSeries = series.appendPair([newIndex, newRows]);
     * </pre>
     */ Series.prototype.appendPair = function(pair) {
        if (!isArray(pair)) throw new Error("Expected 'pair' parameter to 'Series.appendPair' to be an array.");
        if (pair.length !== 2) throw new Error("Expected 'pair' parameter to 'Series.appendPair' to be an array with two elements. The first element is the index, the second is the value.");
        return this.concat(new Series({
            pairs: [
                pair
            ]
        }));
    };
    /**
     * Removes values from the series by index.
     */ Series.prototype.remove = function(index) {
        var _this = this;
        return new Series(function() {
            var content = _this.getContent();
            return {
                pairs: new WhereIterable(content.pairs, function(pair) {
                    return pair[0] !== index;
                })
            };
        });
    };
    /**
     * Fill gaps in a series.
     *
     * @param comparer User-defined comparer function that is passed pairA and pairB, two consecutive values, return truthy if there is a gap between the value, or falsey if there is no gap.
     * @param generator User-defined generator function that is passed pairA and pairB, two consecutive values, returns an array of pairs that fills the gap between the values.
     *
     * @return Returns a new series with gaps filled in.
     *
     * @example
     * <pre>
     *
     *   var sequenceWithGaps = ...
     *
     *  // Predicate that determines if there is a gap.
     *  var gapExists = (pairA, pairB) => {
     *      // Returns true if there is a gap.
     *      return true;
     *  };
     *
     *  // Generator function that produces new rows to fill the game.
     *  var gapFiller = (pairA, pairB) => {
     *      // Create an array of index, value pairs that fill the gaps between pairA and pairB.
     *      return [
     *          newPair1,
     *          newPair2,
     *          newPair3,
     *      ];
     *  };
     *
     *  var sequenceWithoutGaps = sequenceWithGaps.fillGaps(gapExists, gapFiller);
     * </pre>
     */ Series.prototype.fillGaps = function(comparer, generator) {
        if (!isFunction(comparer)) throw new Error("Expected 'comparer' parameter to 'Series.fillGaps' to be a comparer function that compares two values and returns a boolean.");
        if (!isFunction(generator)) throw new Error("Expected 'generator' parameter to 'Series.fillGaps' to be a generator function that takes two values and returns an array of generated pairs to span the gap.");
        return this.rollingWindow(2).selectMany(function(window) {
            var pairs = window.toPairs();
            var pairA = pairs[0];
            var pairB = pairs[1];
            if (!comparer(pairA, pairB)) return [
                pairA
            ];
            var generatedRows = generator(pairA, pairB);
            if (!isArray(generatedRows)) throw new Error("Expected return from 'generator' parameter to 'Series.fillGaps' to be an array of pairs, instead got a " + typeof generatedRows);
            return [
                pairA
            ].concat(generatedRows);
        }).withIndex(function(pair) {
            return pair[0];
        }).select(function(pair) {
            return pair[1];
        }).concat(this.tail(1));
    };
    /**
     * Returns the specified default series if the input series is empty.
     *
     * @param defaultSequence Default series to return if the input series is empty.
     *
     * @return Returns 'defaultSequence' if the input series is empty.
     *
     * @example
     * <pre>
     *
     * const emptySeries = new Series();
     * const defaultSeries = new Series([ 1, 2, 3 ]);
     * expect(emptyDataFrame.defaultIfEmpty(defaultSeries)).to.eql(defaultSeries);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const nonEmptySeries = new Series([ 100 ]);
     * const defaultSeries = new Series([ 1, 2, 3 ]);
     * expect(nonEmptySeries.defaultIfEmpty(defaultSeries)).to.eql(nonEmptySeries);
     * </pre>
     */ Series.prototype.defaultIfEmpty = function(defaultSequence) {
        if (this.none()) {
            if (defaultSequence instanceof Series) return defaultSequence;
            else if (isArray(defaultSequence)) return new Series(defaultSequence);
            else throw new Error("Expected 'defaultSequence' parameter to 'Series.defaultIfEmpty' to be an array or a series.");
        } else return this;
    };
    /**
     * Detect the the frequency of the types of the values in the series.
     * This is a good way to understand the shape of your data.
     *
     * @return Returns a {@link DataFrame} with rows that confirm to {@link ITypeFrequency} that describes the data types contained in the original series.
     *
     * @example
     * <pre>
     *
     * const dataTypes = series.detectTypes();
     * console.log(dataTypes.toString());
     * </pre>
     */ Series.prototype.detectTypes = function() {
        var _this = this;
        return new DataFrame(function() {
            var totalValues = _this.count();
            var typeFrequencies = _this.select(function(value) {
                var valueType = typeof value;
                if (valueType === "object") {
                    if (isDate(value)) valueType = "date";
                }
                return valueType;
            }).aggregate({}, function(accumulated, valueType) {
                var typeInfo = accumulated[valueType];
                if (!typeInfo) {
                    typeInfo = {
                        count: 0
                    };
                    accumulated[valueType] = typeInfo;
                }
                ++typeInfo.count;
                return accumulated;
            });
            return {
                columnNames: [
                    "Type",
                    "Frequency"
                ],
                rows: Object.keys(typeFrequencies).map(function(valueType) {
                    return [
                        valueType,
                        typeFrequencies[valueType].count / totalValues * 100
                    ];
                })
            };
        });
    };
    /**
     * Detect the frequency of the values in the series.
     * This is a good way to understand the shape of your data.
     *
     * @return Returns a {@link DataFrame} with rows that conform to {@link IValueFrequency} that describes the values contained in the original series.
     *
     * @example
     * <pre>
     *
     * const dataValues = series.detectValues();
     * console.log(dataValues.toString());
     * </pre>
     */ Series.prototype.detectValues = function() {
        var _this = this;
        return new DataFrame(function() {
            var totalValues = _this.count();
            var valueFrequencies = _this.aggregate(new Map(), function(accumulated, value) {
                var valueInfo = accumulated.get(value);
                if (!valueInfo) {
                    valueInfo = {
                        count: 0,
                        value: value
                    };
                    accumulated.set(value, valueInfo);
                }
                ++valueInfo.count;
                return accumulated;
            });
            return {
                columnNames: [
                    "Value",
                    "Frequency"
                ],
                rows: Array.from(valueFrequencies.keys()).map(function(value) {
                    var valueInfo = valueFrequencies.get(value);
                    return [
                        valueInfo.value,
                        valueInfo.count / totalValues * 100
                    ];
                })
            };
        });
    };
    /**
     * Organise all values in the series into the specified number of buckets.
     * Assumes that the series is a series of numbers.
     *
     * WARNING: This function is deprecated and will be removed in the future.
     *
     * @param numBuckets - The number of buckets to create.
     *
     * @returns Returns a dataframe containing bucketed values. The input values are divided up into these buckets.
     *
     * @example
     * <pre>
     *
     * const buckets = series.bucket(20); // Distribute values into 20 evenly spaced buckets.
     * console.log(buckets.toString());
     * </pre>
     */ Series.prototype.bucket = function(numBuckets) {
        console.warn("Series.bucket is deprecated and will be removed in the future.");
        if (!isNumber(numBuckets)) throw new Error("Expected 'numBuckets' parameter to 'Series.bucket' to be a number.");
        if (this.none()) return new DataFrame();
        var numberSeries = this;
        var min = numberSeries.min();
        var max = numberSeries.max();
        var range = max - min;
        var width = range / (numBuckets - 1);
        return numberSeries.select(function(v) {
            var bucket = Math.floor((v - min) / width);
            var bucketMin = bucket * width + min;
            return {
                Value: v,
                Bucket: bucket,
                Min: bucketMin,
                Mid: bucketMin + width * 0.5,
                Max: bucketMin + width
            };
        }).inflate();
    };
    /**
     * Counts frequencies in the series to produce a frequency table.
     *
     * @param options - Options for computing the frequency table (e.g. `numGroups` which defaults to 10).
     *
     * @returns Returns a dataframe for the frequency table showing the frequency for the band of values in each group.
     *
     * @example
     * <pre>
     *
     * const series = new Series([ 1, 2, 3, 4 ]);
     * // Or
     * const series = dataFrame.getSeries("SomeColumn");
     *
     * const frequencyTable = series.frequency();
     * console.log(frequencyTable.toArray());
     * </pre>
     * @example
     * <pre>
     *
     * const series = new Series([ 37, 63, 56, 54, 39, 49, 55, 114, 59, 55 ]);
     * const frequencyTable = series.frequency({
     *      lower: 40,
     *      upper: 90,
     *      interval: 10,
     * })
     * console.log(frequencyTable.toArray());
     * </pre>
     */ Series.prototype.frequency = function(options) {
        var _this = this;
        if (this.none()) return new DataFrame();
        return new DataFrame(function() {
            var numberSeries = _this;
            var captureValues = options && options.captureValues || false;
            var min = Number.MAX_VALUE;
            var max = Number.MIN_VALUE;
            var numValues = 0;
            try {
                //
                // Compute min, max and total.
                //
                for(var numberSeries_2 = __values(numberSeries), numberSeries_2_1 = numberSeries_2.next(); !numberSeries_2_1.done; numberSeries_2_1 = numberSeries_2.next()){
                    var value = numberSeries_2_1.value;
                    min = Math.min(value, min);
                    max = Math.max(value, max);
                    numValues += 1;
                }
            } catch (e_27_1) {
                e_27 = {
                    error: e_27_1
                };
            } finally{
                try {
                    if (numberSeries_2_1 && !numberSeries_2_1.done && (_a = numberSeries_2.return)) _a.call(numberSeries_2);
                } finally{
                    if (e_27) throw e_27.error;
                }
            }
            var lower;
            if (options && options.lower !== undefined) lower = options.lower;
            else lower = min;
            var upper;
            if (options && options.upper !== undefined) upper = options.upper;
            else upper = max;
            var interval = options && options.interval;
            var range = upper - lower;
            var numGroups;
            if (interval !== undefined) numGroups = Math.ceil(range / interval);
            else numGroups = 10;
            if (numValues < numGroups) numGroups = numValues;
            if (interval === undefined) interval = range / (numGroups - 1);
            var groups = new Array(numGroups);
            // 
            // Initialize groups.
            //
            for(var groupIndex = 0; groupIndex < numGroups; ++groupIndex){
                var minValue = lower + groupIndex * interval;
                groups[groupIndex] = {
                    lower: minValue,
                    upper: minValue + interval,
                    count: 0,
                    proportion: 0,
                    cumulative: 0
                };
                if (captureValues) groups[groupIndex].values = [];
            }
            var beforeGroup = {
                upper: lower,
                count: 0,
                proportion: 0,
                cumulative: 0
            };
            if (captureValues) beforeGroup.values = [];
            var afterGroup = {
                lower: upper,
                count: 0,
                proportion: 0,
                cumulative: 0
            };
            if (captureValues) afterGroup.values = [];
            try {
                //
                // Count groups.
                //
                for(var numberSeries_3 = __values(numberSeries), numberSeries_3_1 = numberSeries_3.next(); !numberSeries_3_1.done; numberSeries_3_1 = numberSeries_3.next()){
                    var value = numberSeries_3_1.value;
                    var group = void 0;
                    if (value < lower) group = beforeGroup; // Value is less than the body of the data set.
                    else if (value > upper) group = afterGroup; // Value is more than the body of the data set.
                    else {
                        var groupIndex = Math.floor((value - lower) / interval);
                        group = groups[groupIndex]; // Value is within the body of the data set.
                    }
                    group.count += 1;
                    if (captureValues) group.values.push(value);
                }
            } catch (e_28_1) {
                e_28 = {
                    error: e_28_1
                };
            } finally{
                try {
                    if (numberSeries_3_1 && !numberSeries_3_1.done && (_b = numberSeries_3.return)) _b.call(numberSeries_3);
                } finally{
                    if (e_28) throw e_28.error;
                }
            }
            var cumulative = 0;
            if (beforeGroup.count > 0) groups.unshift(beforeGroup);
            if (afterGroup.count > 0) groups.push(afterGroup);
            try {
                //
                // Compute proportions.
                //
                for(var groups_1 = __values(groups), groups_1_1 = groups_1.next(); !groups_1_1.done; groups_1_1 = groups_1.next()){
                    var group = groups_1_1.value;
                    group.proportion = group.count / numValues;
                    cumulative += group.proportion;
                    group.cumulative = cumulative;
                }
            } catch (e_29_1) {
                e_29 = {
                    error: e_29_1
                };
            } finally{
                try {
                    if (groups_1_1 && !groups_1_1.done && (_c = groups_1.return)) _c.call(groups_1);
                } finally{
                    if (e_29) throw e_29.error;
                }
            }
            var e_27, _a, e_28, _b, e_29, _c;
            return {
                values: groups
            };
        });
    };
    /***
     * Allows the series to be queried to confirm that it is actually a series.
     * Used from JavaScript to tell the difference between a Series and a DataFrame.
     *
     * @return Returns the string "series".
     */ Series.prototype.getTypeCode = function() {
        return "series";
    };
    Series.defaultCountIterable = new CountIterable();
    Series.defaultEmptyIterable = new EmptyIterable();
    return Series;
}();
/**
 * @hidden
 * A series that has been ordered.
 */ var OrderedSeries = /** @class */ function(_super) {
    __extends(OrderedSeries, _super);
    function OrderedSeries(config) {
        var _this = this;
        var valueSortSpecs = [];
        var pairSortSpecs = [];
        var sortLevel = 0;
        var parent = config.parent;
        var parents = [];
        while(parent !== null){
            parents.push(parent);
            parent = parent.config.parent;
        }
        parents.reverse();
        try {
            for(var parents_1 = __values(parents), parents_1_1 = parents_1.next(); !parents_1_1.done; parents_1_1 = parents_1.next()){
                var parent_1 = parents_1_1.value;
                var parentConfig = parent_1.config;
                valueSortSpecs.push(OrderedSeries.makeSortSpec(sortLevel, parentConfig.selector, parentConfig.direction));
                pairSortSpecs.push(OrderedSeries.makeSortSpec(sortLevel, OrderedSeries.makePairsSelector(parentConfig.selector), parentConfig.direction));
                ++sortLevel;
            }
        } catch (e_30_1) {
            e_30 = {
                error: e_30_1
            };
        } finally{
            try {
                if (parents_1_1 && !parents_1_1.done && (_a = parents_1.return)) _a.call(parents_1);
            } finally{
                if (e_30) throw e_30.error;
            }
        }
        valueSortSpecs.push(OrderedSeries.makeSortSpec(sortLevel, config.selector, config.direction));
        pairSortSpecs.push(OrderedSeries.makeSortSpec(sortLevel, OrderedSeries.makePairsSelector(config.selector), config.direction));
        _this = _super.call(this, {
            values: new OrderedIterable(config.values, valueSortSpecs),
            pairs: new OrderedIterable(config.pairs, pairSortSpecs)
        }) || this;
        _this.config = config;
        var e_30, _a;
        return _this;
    }
    //
    // Helper function to create a sort spec.
    //
    OrderedSeries.makeSortSpec = function(sortLevel, selector, direction) {
        return {
            sortLevel: sortLevel,
            selector: selector,
            direction: direction
        };
    };
    //
    // Helper function to make a sort selector for pairs, this captures the parent correct when generating the closure.
    //
    OrderedSeries.makePairsSelector = function(selector) {
        return function(pair, index) {
            return selector(pair[1], index);
        };
    };
    /**
     * Applys additional sorting (ascending) to an already sorted series.
     *
     * @param selector User-defined selector that selects the additional value to sort by.
     *
     * @return Returns a new series has been additionally sorted by the value chosen by the selector function.
     *
     * @example
     * <pre>
     *
     * // Order sales by salesperson and then by amount (from least to most).
     * const ordered = sales.orderBy(sale => sale.SalesPerson).thenBy(sale => sale.Amount);
     * </pre>
     */ OrderedSeries.prototype.thenBy = function(selector) {
        return new OrderedSeries({
            values: this.config.values,
            pairs: this.config.pairs,
            selector: selector,
            direction: Direction.Ascending,
            parent: this
        });
    };
    /**
     * Applys additional sorting (descending) to an already sorted series.
     *
     * @param selector User-defined selector that selects the additional value to sort by.
     *
     * @return Returns a new series has been additionally sorted by the value chosen by the selector function.
     *
     * @example
     * <pre>
     *
     * // Order sales by salesperson and then by amount (from most to least).
     * const ordered = sales.orderBy(sale => sale.SalesPerson).thenByDescending(sale => sale.Amount);
     * </pre>
     */ OrderedSeries.prototype.thenByDescending = function(selector) {
        return new OrderedSeries({
            values: this.config.values,
            pairs: this.config.pairs,
            selector: selector,
            direction: Direction.Descending,
            parent: this
        });
    };
    return OrderedSeries;
}(Series);
/**
 * Class that represents an index for a Series.
 */ var Index = /** @class */ function(_super) {
    __extends(Index, _super);
    function Index(config) {
        return _super.call(this, config) || this;
    }
    /**
     * Get the type of the index.
     *
     * @returns Returns a string that specifies the type of the index.
     */ Index.prototype.getType = function() {
        if (!this._type) {
            //
            // Detect the type.
            //
            if (this.any()) this._type = determineType(this.first());
            else this._type = "empty";
        }
        return this._type;
    };
    /**
     * Get the less than operation for the index.
     *
     * @returns Returns a function that can be used to compare a value against an index value.
     */ Index.prototype.getLessThan = function() {
        switch(this.getType()){
            case "date":
                return function(d1, d2) {
                    return (0, _esmDefault.default)(d1).isBefore(d2);
                };
            case "string":
            case "number":
                return function(v1, v2) {
                    return v1 < v2;
                };
            case "empty":
                return function() {
                    return true;
                }; // Series is empty, so this makes no difference.
            default:
                throw new Error("No less than operation available for type: " + this.getType());
        }
    };
    /**
     * Get the less than or equal to operation for the index.
     *
     * @returns Returns a function that can be used to compare a value against an index value.
     */ Index.prototype.getLessThanOrEqualTo = function() {
        var _this = this;
        return function(v1, v2) {
            return !_this.getGreaterThan()(v1, v2);
        }; //TODO: Should expand  this out.
    };
    /**
     * Get the greater than operation for the index.
     *
     * @returns Returns a function that can be used to compare a value against an index value.
     */ Index.prototype.getGreaterThan = function() {
        switch(this.getType()){
            case "date":
                return function(d1, d2) {
                    return (0, _esmDefault.default)(d1).isAfter(d2);
                };
            case "string":
            case "number":
                return function(v1, v2) {
                    return v1 > v2;
                };
            case "empty":
                return function() {
                    return true;
                }; // Series is empty, so this makes no difference.
            default:
                throw new Error("No greater than operation available for type: " + this.getType());
        }
    };
    return Index;
}(Series);
function createCommonjsModule(fn, module) {
    return module = {
        exports: {}
    }, fn(module, module.exports), module.exports;
}
var isBuffer = function isBuffer(arg) {
    return arg instanceof Buffer;
};
var inherits_browser = createCommonjsModule(function(module) {
    if (typeof Object.create === "function") // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    };
    else // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    };
});
var inherits = createCommonjsModule(function(module) {
    try {
        var util$1 = util;
        if (typeof util$1.inherits !== "function") throw "";
        module.exports = util$1.inherits;
    } catch (e) {
        module.exports = inherits_browser;
    }
});
var util = createCommonjsModule(function(module, exports) {
    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
        var keys = Object.keys(obj);
        var descriptors = {};
        for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
        return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
        if (!isString(f)) {
            var objects = [];
            for(var i = 0; i < arguments.length; i++)objects.push(inspect(arguments[i]));
            return objects.join(" ");
        }
        var i = 1;
        var args = arguments;
        var len = args.length;
        var str = String(f).replace(formatRegExp, function(x) {
            if (x === "%%") return "%";
            if (i >= len) return x;
            switch(x){
                case "%s":
                    return String(args[i++]);
                case "%d":
                    return Number(args[i++]);
                case "%j":
                    try {
                        return JSON.stringify(args[i++]);
                    } catch (_) {
                        return "[Circular]";
                    }
                default:
                    return x;
            }
        });
        for(var x = args[i]; i < len; x = args[++i])if (isNull(x) || !isObject(x)) str += " " + x;
        else str += " " + inspect(x);
        return str;
    };
    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    exports.deprecate = function(fn, msg) {
        if (typeof process !== "undefined" && process.noDeprecation === true) return fn;
        // Allow for deprecating things in the process of starting up.
        if (typeof process === "undefined") return function() {
            return exports.deprecate(fn, msg).apply(this, arguments);
        };
        var warned = false;
        function deprecated() {
            if (!warned) {
                if (process.throwDeprecation) throw new Error(msg);
                else if (process.traceDeprecation) console.trace(msg);
                else console.error(msg);
                warned = true;
            }
            return fn.apply(this, arguments);
        }
        return deprecated;
    };
    var debugs = {};
    var debugEnviron;
    exports.debuglog = function(set) {
        if (isUndefined(debugEnviron)) debugEnviron = "";
        set = set.toUpperCase();
        if (!debugs[set]) {
            if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
                var pid = process.pid;
                debugs[set] = function() {
                    var msg = exports.format.apply(exports, arguments);
                    console.error("%s %d: %s", set, pid, msg);
                };
            } else debugs[set] = function() {};
        }
        return debugs[set];
    };
    /**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function inspect(obj, opts) {
        // default options
        var ctx = {
            seen: [],
            stylize: stylizeNoColor
        };
        // legacy...
        if (arguments.length >= 3) ctx.depth = arguments[2];
        if (arguments.length >= 4) ctx.colors = arguments[3];
        if (isBoolean(opts)) // legacy...
        ctx.showHidden = opts;
        else if (opts) // got an "options" object
        exports._extend(ctx, opts);
        // set default options
        if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
        if (isUndefined(ctx.depth)) ctx.depth = 2;
        if (isUndefined(ctx.colors)) ctx.colors = false;
        if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
        if (ctx.colors) ctx.stylize = stylizeWithColor;
        return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
        "bold": [
            1,
            22
        ],
        "italic": [
            3,
            23
        ],
        "underline": [
            4,
            24
        ],
        "inverse": [
            7,
            27
        ],
        "white": [
            37,
            39
        ],
        "grey": [
            90,
            39
        ],
        "black": [
            30,
            39
        ],
        "blue": [
            34,
            39
        ],
        "cyan": [
            36,
            39
        ],
        "green": [
            32,
            39
        ],
        "magenta": [
            35,
            39
        ],
        "red": [
            31,
            39
        ],
        "yellow": [
            33,
            39
        ]
    };
    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
        "special": "cyan",
        "number": "yellow",
        "boolean": "yellow",
        "undefined": "grey",
        "null": "bold",
        "string": "green",
        "date": "magenta",
        // "name": intentionally not styling
        "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
        var style = inspect.styles[styleType];
        if (style) return "\x1b[" + inspect.colors[style][0] + "m" + str + "\x1b[" + inspect.colors[style][1] + "m";
        else return str;
    }
    function stylizeNoColor(str, styleType) {
        return str;
    }
    function arrayToHash(array) {
        var hash = {};
        array.forEach(function(val, idx) {
            hash[val] = true;
        });
        return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
        // Provide a hook for user-specified inspect functions.
        // Check that value is an object with an inspect function on it
        if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
        value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
        !(value.constructor && value.constructor.prototype === value)) {
            var ret = value.inspect(recurseTimes, ctx);
            if (!isString(ret)) ret = formatValue(ctx, ret, recurseTimes);
            return ret;
        }
        // Primitive types cannot have properties
        var primitive = formatPrimitive(ctx, value);
        if (primitive) return primitive;
        // Look up the keys of the object.
        var keys = Object.keys(value);
        var visibleKeys = arrayToHash(keys);
        if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
        // IE doesn't make error fields non-enumerable
        // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
        if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) return formatError(value);
        // Some type of object without properties can be shortcutted.
        if (keys.length === 0) {
            if (isFunction(value)) {
                var name = value.name ? ": " + value.name : "";
                return ctx.stylize("[Function" + name + "]", "special");
            }
            if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
            if (isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), "date");
            if (isError(value)) return formatError(value);
        }
        var base = "", array = false, braces = [
            "{",
            "}"
        ];
        // Make Array say that they are Array
        if (isArray(value)) {
            array = true;
            braces = [
                "[",
                "]"
            ];
        }
        // Make functions say that they are functions
        if (isFunction(value)) {
            var n = value.name ? ": " + value.name : "";
            base = " [Function" + n + "]";
        }
        // Make RegExps say that they are RegExps
        if (isRegExp(value)) base = " " + RegExp.prototype.toString.call(value);
        // Make dates with properties first say the date
        if (isDate(value)) base = " " + Date.prototype.toUTCString.call(value);
        // Make error with message first say the error
        if (isError(value)) base = " " + formatError(value);
        if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
        if (recurseTimes < 0) {
            if (isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
            else return ctx.stylize("[Object]", "special");
        }
        ctx.seen.push(value);
        var output;
        if (array) output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
        else output = keys.map(function(key) {
            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
        ctx.seen.pop();
        return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
        if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
        if (isString(value)) {
            var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
            return ctx.stylize(simple, "string");
        }
        if (isNumber(value)) return ctx.stylize("" + value, "number");
        if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
        // For some reason typeof null is "object", so special case here.
        if (isNull(value)) return ctx.stylize("null", "null");
    }
    function formatError(value) {
        return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
        var output = [];
        for(var i = 0, l = value.length; i < l; ++i)if (hasOwnProperty(value, String(i))) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        else output.push("");
        keys.forEach(function(key) {
            if (!key.match(/^\d+$/)) output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        });
        return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
        var name, str, desc;
        desc = Object.getOwnPropertyDescriptor(value, key) || {
            value: value[key]
        };
        if (desc.get) {
            if (desc.set) str = ctx.stylize("[Getter/Setter]", "special");
            else str = ctx.stylize("[Getter]", "special");
        } else if (desc.set) str = ctx.stylize("[Setter]", "special");
        if (!hasOwnProperty(visibleKeys, key)) name = "[" + key + "]";
        if (!str) {
            if (ctx.seen.indexOf(desc.value) < 0) {
                if (isNull(recurseTimes)) str = formatValue(ctx, desc.value, null);
                else str = formatValue(ctx, desc.value, recurseTimes - 1);
                if (str.indexOf("\n") > -1) {
                    if (array) str = str.split("\n").map(function(line) {
                        return "  " + line;
                    }).join("\n").substr(2);
                    else str = "\n" + str.split("\n").map(function(line) {
                        return "   " + line;
                    }).join("\n");
                }
            } else str = ctx.stylize("[Circular]", "special");
        }
        if (isUndefined(name)) {
            if (array && key.match(/^\d+$/)) return str;
            name = JSON.stringify("" + key);
            if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                name = name.substr(1, name.length - 2);
                name = ctx.stylize(name, "name");
            } else {
                name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                name = ctx.stylize(name, "string");
            }
        }
        return name + ": " + str;
    }
    function reduceToSingleString(output, base, braces) {
        var length = output.reduce(function(prev, cur) {
            cur.indexOf("\n");
            return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
        }, 0);
        if (length > 60) return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
        return braces[0] + base + " " + output.join(", ") + " " + braces[1];
    }
    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
        return Array.isArray(ar);
    }
    exports.isArray = isArray;
    function isBoolean(arg) {
        return typeof arg === "boolean";
    }
    exports.isBoolean = isBoolean;
    function isNull(arg) {
        return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
        return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
        return typeof arg === "number";
    }
    exports.isNumber = isNumber;
    function isString(arg) {
        return typeof arg === "string";
    }
    exports.isString = isString;
    function isSymbol(arg) {
        return typeof arg === "symbol";
    }
    exports.isSymbol = isSymbol;
    function isUndefined(arg) {
        return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp(re) {
        return isObject(re) && objectToString(re) === "[object RegExp]";
    }
    exports.isRegExp = isRegExp;
    function isObject(arg) {
        return typeof arg === "object" && arg !== null;
    }
    exports.isObject = isObject;
    function isDate(d) {
        return isObject(d) && objectToString(d) === "[object Date]";
    }
    exports.isDate = isDate;
    function isError(e) {
        return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports.isError = isError;
    function isFunction(arg) {
        return typeof arg === "function";
    }
    exports.isFunction = isFunction;
    function isPrimitive(arg) {
        return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
        typeof arg === "undefined";
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = isBuffer;
    function objectToString(o) {
        return Object.prototype.toString.call(o);
    }
    function pad(n) {
        return n < 10 ? "0" + n.toString(10) : n.toString(10);
    }
    var months = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
    ];
    // 26 Feb 16:19:34
    function timestamp() {
        var d = new Date();
        var time = [
            pad(d.getHours()),
            pad(d.getMinutes()),
            pad(d.getSeconds())
        ].join(":");
        return [
            d.getDate(),
            months[d.getMonth()],
            time
        ].join(" ");
    }
    // log is just a thin wrapper to console.log that prepends a timestamp
    exports.log = function() {
        console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
    };
    /**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ exports.inherits = inherits;
    exports._extend = function(origin, add) {
        // Don't do anything if add isn't an object
        if (!add || !isObject(add)) return origin;
        var keys = Object.keys(add);
        var i = keys.length;
        while(i--)origin[keys[i]] = add[keys[i]];
        return origin;
    };
    function hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : undefined;
    exports.promisify = function promisify(original) {
        if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
        if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
            var fn = original[kCustomPromisifiedSymbol];
            if (typeof fn !== "function") throw new TypeError('The "util.promisify.custom" argument must be of type Function');
            Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                value: fn,
                enumerable: false,
                writable: false,
                configurable: true
            });
            return fn;
        }
        function fn() {
            var promiseResolve, promiseReject;
            var promise = new Promise(function(resolve, reject) {
                promiseResolve = resolve;
                promiseReject = reject;
            });
            var args = [];
            for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
            args.push(function(err, value) {
                if (err) promiseReject(err);
                else promiseResolve(value);
            });
            try {
                original.apply(this, args);
            } catch (err) {
                promiseReject(err);
            }
            return promise;
        }
        Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
        if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
        return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
    };
    exports.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
        // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
        // Because `null` is a special error value in callbacks which means "no error
        // occurred", we error-wrap so the callback consumer can distinguish between
        // "the promise rejected with null" or "the promise fulfilled with undefined".
        if (!reason) {
            var newReason = new Error("Promise was rejected with a falsy value");
            newReason.reason = reason;
            reason = newReason;
        }
        return cb(reason);
    }
    function callbackify(original) {
        if (typeof original !== "function") throw new TypeError('The "original" argument must be of type Function');
        // We DO NOT return the promise as it gives the user a false sense that
        // the promise is actually somehow related to the callback's execution
        // and that the callback throwing will reject the promise.
        function callbackified() {
            var args = [];
            for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
            var maybeCb = args.pop();
            if (typeof maybeCb !== "function") throw new TypeError("The last argument must be of type Function");
            var self = this;
            var cb = function() {
                return maybeCb.apply(self, arguments);
            };
            // In true node style we process the callback on `nextTick` with all the
            // implications (stack, `uncaughtException`, `async_hooks`)
            original.apply(this, args).then(function(ret) {
                process.nextTick(cb, null, ret);
            }, function(rej) {
                process.nextTick(callbackifyOnRejected, rej, cb);
            });
        }
        Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
        Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
        return callbackified;
    }
    exports.callbackify = callbackify;
});
var util_1 = util.format;
var util_2 = util.deprecate;
var util_3 = util.debuglog;
var util_4 = util.inspect;
var util_5 = util.isArray;
var util_6 = util.isBoolean;
var util_7 = util.isNull;
var util_8 = util.isNullOrUndefined;
var util_9 = util.isNumber;
var util_10 = util.isString;
var util_11 = util.isSymbol;
var util_12 = util.isUndefined;
var util_13 = util.isRegExp;
var util_14 = util.isObject;
var util_15 = util.isDate;
var util_16 = util.isError;
var util_17 = util.isFunction;
var util_18 = util.isPrimitive;
var util_19 = util.isBuffer;
var util_20 = util.log;
var util_21 = util.inherits;
var util_22 = util._extend;
var util_23 = util.promisify;
var util_24 = util.callbackify;
(0, _esmDefault.default).extend((0, _customParseFormatDefault.default));
/**
 * Convert a regular JavaScript obejct to a dataframe.
 * Each row in the dataframe represents a field from the object.
 *
 * @param obj - The JavaScript object to convert to a dataframe.
 *
 * @returns Returns a dataframe that lists the fields in the pass-in object.
 */ function fromObject(obj) {
    return new DataFrame(Object.keys(obj).map(function(fieldName) {
        return {
            Field: fieldName,
            Value: obj[fieldName]
        };
    }));
}
/**
 * Deserialize a dataframe from a JSON text string.
 *
 * @param jsonTextString The JSON text to deserialize.
 *
 * @returns Returns a dataframe that has been deserialized from the JSON data.
 */ function fromJSON(jsonTextString) {
    if (!isString(jsonTextString)) throw new Error("Expected 'jsonTextString' parameter to 'dataForge.fromJSON' to be a string containing data encoded in the JSON format.");
    return new DataFrame({
        values: JSON.parse(jsonTextString)
    });
}
/**
 * Deserialize a dataframe from a JSON5 text string.
 *
 * @param jsonTextString The JSON5 text to deserialize.
 *
 * @returns Returns a dataframe that has been deserialized from the JSON data.
 */ function fromJSON5(jsonTextString) {
    if (!isString(jsonTextString)) throw new Error("Expected 'jsonTextString' parameter to 'dataForge.fromJSON5' to be a string containing data encoded in the JSON5 format.");
    return new DataFrame({
        values: (0, _json5Default.default).parse(jsonTextString)
    });
}
/**
 * Deserialize a DataFrame from a CSV text string.
 *
 * @param csvTextString The CSV text to deserialize.
 * @param config Optional configuration options for parsing the CSV data.
 * The config object is passed directly to [PapaParse.parse](https://www.papaparse.com/docs#strings), please see [PapaParse docs for additional options](https://www.papaparse.com/docs#config).
 *
 * @returns Returns a dataframe that has been deserialized from the CSV data.
 */ function fromCSV(csvTextString, config) {
    if (!isString(csvTextString)) throw new Error("Expected 'csvTextString' parameter to 'dataForge.fromCSV' to be a string containing data encoded in the CSV format.");
    if (config) {
        if (!isObject(config)) throw new Error("Expected 'config' parameter to 'dataForge.fromCSV' to be an object with CSV parsing configuration options.");
        if (config.columnNames) {
            if (!util_17(config.columnNames[Symbol.iterator])) {
                if (!isArray(config.columnNames)) throw new Error("Expect 'columnNames' field of 'config' parameter to DataForge.fromCSV to be an array or iterable of strings that specifies column names.");
            }
            try {
                for(var _a = __values(config.columnNames), _b = _a.next(); !_b.done; _b = _a.next()){
                    var columnName = _b.value;
                    if (!isString(columnName)) throw new Error("Expect 'columnNames' field of 'config' parameter to DataForge.fromCSV to be an array of strings that specify column names.");
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
        }
        if (config.skipEmptyLines === undefined) {
            config = Object.assign({}, config); // Clone the config. Don't want to modify the original.
            config.skipEmptyLines = true;
        }
    } else config = {
        skipEmptyLines: true
    };
    var parsed = (0, _papaparseDefault.default).parse(csvTextString, config);
    var rows = parsed.data;
    if (rows.length === 0) return new DataFrame();
    var columnNames;
    rows = rows.map(function(row) {
        return row.map(function(cell) {
            return isString(cell) ? cell.trim() : cell;
        }); // Trim each cell that is still a string.
    });
    if (config && config.columnNames) columnNames = config.columnNames;
    else columnNames = rows.shift();
    var e_1, _c;
    return new DataFrame({
        rows: rows,
        columnNames: columnNames
    });
}
var concat = Series.concat;
var zip = Series.zip;
/**
 * Generate a series from a range of numbers.
 *
 * @param start - The value of the first number in the range.
 * @param count - The number of sequential values in the range.
 *
 * @returns Returns a series with a sequence of generated values. The series contains 'count' values beginning at 'start'.
 */ function range(start, count) {
    if (!isNumber(start)) throw new Error("Expect 'start' parameter to 'dataForge.range' function to be a number.");
    if (!isNumber(count)) throw new Error("Expect 'count' parameter to 'dataForge.range' function to be a number.");
    var values = [];
    for(var valueIndex = 0; valueIndex < count; ++valueIndex)values.push(start + valueIndex);
    return new Series(values);
}
/**
 * Replicate a particular value N times to create a series.
 *
 * @param value The value to replicate.
 * @param count The number of times to replicate the value.
 *
 * @returns Returns a new series that contains N copies of the value.
 */ function replicate(value, count) {
    var values = [];
    for(var i = 0; i < count; ++i)values.push(value);
    return new Series(values);
}
/**
 * Generate a data-frame containing a matrix of values.
 *
 * @param numColumns - The number of columns in the data-frame.
 * @param numRows - The number of rows in the data-frame.
 * @param start - The starting value.
 * @param increment - The value to increment by for each new value.
 *
 * @returns Returns a dataframe that contains a matrix of generated values.
 */ function matrix(numColumns, numRows, start, increment) {
    if (!isNumber(numColumns)) throw new Error("Expect 'numColumns' parameter to 'dataForge.matrix' function to be a number.");
    if (!isNumber(numRows)) throw new Error("Expect 'numRows' parameter to 'dataForge.matrix' function to be a number.");
    if (!isNumber(start)) throw new Error("Expect 'start' parameter to 'dataForge.matrix' function to be a number.");
    if (!isNumber(increment)) throw new Error("Expect 'increment' parameter to 'dataForge.matrix' function to be a number.");
    var rows = [];
    var columnNames = [];
    var nextValue = start;
    for(var colIndex = 0; colIndex < numColumns; ++colIndex)columnNames.push((colIndex + 1).toString());
    for(var rowIndex = 0; rowIndex < numRows; ++rowIndex){
        var row = [];
        for(var colIndex = 0; colIndex < numColumns; ++colIndex)row.push(nextValue + colIndex * increment);
        nextValue += numColumns * increment;
        rows.push(row);
    }
    return new DataFrame({
        columnNames: columnNames,
        rows: rows
    });
}

},{"3a2015660cc06b91":"fCgem","2c37ca11564a19db":"d5jf4","easy-table":"bV1Jj","dayjs/esm":"9VPlD","typy":"5Tr7k","json5":"lbQRg","papaparse":"5w3wE","dayjs/esm/plugin/customParseFormat":"dVNkW","numeral":"3XQOl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
var base64 = require("acfe16d8a1ed30ab");
var ieee754 = require("66d29fdfe55f86a6");
var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = "0123456789abcdef";
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

},{"acfe16d8a1ed30ab":"eIiSV","66d29fdfe55f86a6":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e1) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e1) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"bV1Jj":[function(require,module,exports) {
var wcwidth;
try {
    wcwidth = require("a7d8cd9b521faae5");
} catch (e) {}
module.exports = Table;
function Table() {
    this.rows = [];
    this.row = {
        __printers: {}
    };
}
/**
 * Push the current row to the table and start a new one
 *
 * @returns {Table} `this`
 */ Table.prototype.newRow = function() {
    this.rows.push(this.row);
    this.row = {
        __printers: {}
    };
    return this;
};
/**
 * Write cell in the current row
 *
 * @param {String} col          - Column name
 * @param {Any} val             - Cell value
 * @param {Function} [printer]  - Printer function to format the value
 * @returns {Table} `this`
 */ Table.prototype.cell = function(col, val, printer) {
    this.row[col] = val;
    this.row.__printers[col] = printer || string;
    return this;
};
/**
 * String to separate columns
 */ Table.prototype.separator = "  ";
function string(val) {
    return val === undefined ? "" : "" + val;
}
function length(str) {
    var s = str.replace(/\u001b\[\d+m/g, "");
    return wcwidth == null ? s.length : wcwidth(s);
}
/**
 * Default printer
 */ Table.string = string;
/**
 * Create a printer which right aligns the content by padding with `ch` on the left
 *
 * @param {String} ch
 * @returns {Function}
 */ Table.leftPadder = leftPadder;
function leftPadder(ch) {
    return function(val, width) {
        var str = string(val);
        var len = length(str);
        var pad = width > len ? Array(width - len + 1).join(ch) : "";
        return pad + str;
    };
}
/**
 * Printer which right aligns the content
 */ var padLeft = Table.padLeft = leftPadder(" ");
/**
 * Create a printer which pads with `ch` on the right
 *
 * @param {String} ch
 * @returns {Function}
 */ Table.rightPadder = rightPadder;
function rightPadder(ch) {
    return function padRight(val, width) {
        var str = string(val);
        var len = length(str);
        var pad = width > len ? Array(width - len + 1).join(ch) : "";
        return str + pad;
    };
}
var padRight = rightPadder(" ");
/**
 * Create a printer for numbers
 *
 * Will do right alignment and optionally fix the number of digits after decimal point
 *
 * @param {Number} [digits] - Number of digits for fixpoint notation
 * @returns {Function}
 */ Table.number = function(digits) {
    return function(val, width) {
        if (val == null) return "";
        if (typeof val != "number") throw new Error("" + val + " is not a number");
        var str = digits == null ? val + "" : val.toFixed(digits);
        return padLeft(str, width);
    };
};
function each(row, fn) {
    for(var key in row){
        if (key == "__printers") continue;
        fn(key, row[key]);
    }
}
/**
 * Get list of columns in printing order
 *
 * @returns {string[]}
 */ Table.prototype.columns = function() {
    var cols = {};
    for(var i = 0; i < 2; i++)this.rows.forEach(function(row) {
        var idx = 0;
        each(row, function(key) {
            idx = Math.max(idx, cols[key] || 0);
            cols[key] = idx;
            idx++;
        });
    });
    return Object.keys(cols).sort(function(a, b) {
        return cols[a] - cols[b];
    });
};
/**
 * Format just rows, i.e. print the table without headers and totals
 *
 * @returns {String} String representaion of the table
 */ Table.prototype.print = function() {
    var cols = this.columns();
    var separator = this.separator;
    var widths = {};
    var out = "";
    // Calc widths
    this.rows.forEach(function(row) {
        each(row, function(key, val) {
            var str = row.__printers[key].call(row, val);
            widths[key] = Math.max(length(str), widths[key] || 0);
        });
    });
    // Now print
    this.rows.forEach(function(row) {
        var line = "";
        cols.forEach(function(key) {
            var width = widths[key];
            var str = row.hasOwnProperty(key) ? "" + row.__printers[key].call(row, row[key], width) : "";
            line += padRight(str, width) + separator;
        });
        line = line.slice(0, -separator.length);
        out += line + "\n";
    });
    return out;
};
/**
 * Format the table
 *
 * @returns {String}
 */ Table.prototype.toString = function() {
    var cols = this.columns();
    var out = new Table();
    // copy options
    out.separator = this.separator;
    // Write header
    cols.forEach(function(col) {
        out.cell(col, col);
    });
    out.newRow();
    out.pushDelimeter(cols);
    // Write body
    out.rows = out.rows.concat(this.rows);
    // Totals
    if (this.totals && this.rows.length) {
        out.pushDelimeter(cols);
        this.forEachTotal(out.cell.bind(out));
        out.newRow();
    }
    return out.print();
};
/**
 * Push delimeter row to the table (with each cell filled with dashs during printing)
 *
 * @param {String[]} [cols]
 * @returns {Table} `this`
 */ Table.prototype.pushDelimeter = function(cols) {
    cols = cols || this.columns();
    cols.forEach(function(col) {
        this.cell(col, undefined, leftPadder("-"));
    }, this);
    return this.newRow();
};
/**
 * Compute all totals and yield the results to `cb`
 *
 * @param {Function} cb - Callback function with signature `(column, value, printer)`
 */ Table.prototype.forEachTotal = function(cb) {
    for(var key in this.totals){
        var aggr = this.totals[key];
        var acc = aggr.init;
        var len = this.rows.length;
        this.rows.forEach(function(row, idx) {
            acc = aggr.reduce.call(row, acc, row[key], idx, len);
        });
        cb(key, acc, aggr.printer);
    }
};
/**
 * Format the table so that each row represents column and each column represents row
 *
 * @param {Object} [opts]
 * @param {String} [ops.separator] - Column separation string
 * @param {Function} [opts.namePrinter] - Printer to format column names
 * @returns {String}
 */ Table.prototype.printTransposed = function(opts) {
    opts = opts || {};
    var out = new Table;
    out.separator = opts.separator || this.separator;
    this.columns().forEach(function(col) {
        out.cell(0, col, opts.namePrinter);
        this.rows.forEach(function(row, idx) {
            out.cell(idx + 1, row[col], row.__printers[col]);
        });
        out.newRow();
    }, this);
    return out.print();
};
/**
 * Sort the table
 *
 * @param {Function|string[]} [cmp] - Either compare function or a list of columns to sort on
 * @returns {Table} `this`
 */ Table.prototype.sort = function(cmp) {
    if (typeof cmp == "function") {
        this.rows.sort(cmp);
        return this;
    }
    var keys = Array.isArray(cmp) ? cmp : this.columns();
    var comparators = keys.map(function(key) {
        var order = "asc";
        var m = /(.*)\|\s*(asc|des)\s*$/.exec(key);
        if (m) {
            key = m[1];
            order = m[2];
        }
        return function(a, b) {
            return order == "asc" ? compare(a[key], b[key]) : compare(b[key], a[key]);
        };
    });
    return this.sort(function(a, b) {
        for(var i = 0; i < comparators.length; i++){
            var order = comparators[i](a, b);
            if (order != 0) return order;
        }
        return 0;
    });
};
function compare(a, b) {
    if (a === b) return 0;
    if (a === undefined) return 1;
    if (b === undefined) return -1;
    if (a === null) return 1;
    if (b === null) return -1;
    if (a > b) return 1;
    if (a < b) return -1;
    return compare(String(a), String(b));
}
/**
 * Add a total for the column
 *
 * @param {String} col - column name
 * @param {Object} [opts]
 * @param {Function} [opts.reduce = sum] - reduce(acc, val, idx, length) function to compute the total value
 * @param {Function} [opts.printer = padLeft] - Printer to format the total cell
 * @param {Any} [opts.init = 0] - Initial value for reduction
 * @returns {Table} `this`
 */ Table.prototype.total = function(col, opts) {
    opts = opts || {};
    this.totals = this.totals || {};
    this.totals[col] = {
        reduce: opts.reduce || Table.aggr.sum,
        printer: opts.printer || padLeft,
        init: opts.init == null ? 0 : opts.init
    };
    return this;
};
/**
 * Predefined helpers for totals
 */ Table.aggr = {};
/**
 * Create a printer which formats the value with `printer`,
 * adds the `prefix` to it and right aligns the whole thing
 *
 * @param {String} prefix
 * @param {Function} printer
 * @returns {printer}
 */ Table.aggr.printer = function(prefix, printer) {
    printer = printer || string;
    return function(val, width) {
        return padLeft(prefix + printer(val), width);
    };
};
/**
 * Sum reduction
 */ Table.aggr.sum = function(acc, val) {
    return acc + val;
};
/**
 * Average reduction
 */ Table.aggr.avg = function(acc, val, idx, len) {
    acc = acc + val;
    return idx + 1 == len ? acc / len : acc;
};
/**
 * Print the array or object
 *
 * @param {Array|Object} obj - Object to print
 * @param {Function|Object} [format] - Format options
 * @param {Function} [cb] - Table post processing and formating
 * @returns {String}
 */ Table.print = function(obj, format, cb) {
    var opts = format || {};
    format = typeof format == "function" ? format : function(obj, cell) {
        for(var key in obj){
            if (!obj.hasOwnProperty(key)) continue;
            var params = opts[key] || {};
            cell(params.name || key, obj[key], params.printer);
        }
    };
    var t = new Table;
    var cell = t.cell.bind(t);
    if (Array.isArray(obj)) {
        cb = cb || function(t) {
            return t.toString();
        };
        obj.forEach(function(item) {
            format(item, cell);
            t.newRow();
        });
    } else {
        cb = cb || function(t) {
            return t.printTransposed({
                separator: " : "
            });
        };
        format(obj, cell);
        t.newRow();
    }
    return cb(t);
};
/**
 * Same as `Table.print()` but yields the result to `console.log()`
 */ Table.log = function(obj, format, cb) {
    console.log(Table.print(obj, format, cb));
};
/**
 * Same as `.toString()` but yields the result to `console.log()`
 */ Table.prototype.log = function() {
    console.log(this.toString());
};

},{"a7d8cd9b521faae5":"66rXq"}],"66rXq":[function(require,module,exports) {
"use strict";
var defaults = require("18dcc2fdd3058189");
var combining = require("4bbc2acdeba932f8");
var DEFAULTS = {
    nul: 0,
    control: 0
};
module.exports = function wcwidth(str) {
    return wcswidth(str, DEFAULTS);
};
module.exports.config = function(opts) {
    opts = defaults(opts || {}, DEFAULTS);
    return function wcwidth(str) {
        return wcswidth(str, opts);
    };
};
/*
 *  The following functions define the column width of an ISO 10646
 *  character as follows:
 *  - The null character (U+0000) has a column width of 0.
 *  - Other C0/C1 control characters and DEL will lead to a return value
 *    of -1.
 *  - Non-spacing and enclosing combining characters (general category
 *    code Mn or Me in the
 *    Unicode database) have a column width of 0.
 *  - SOFT HYPHEN (U+00AD) has a column width of 1.
 *  - Other format characters (general category code Cf in the Unicode
 *    database) and ZERO WIDTH
 *    SPACE (U+200B) have a column width of 0.
 *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)
 *    have a column width of 0.
 *  - Spacing characters in the East Asian Wide (W) or East Asian
 *    Full-width (F) category as
 *    defined in Unicode Technical Report #11 have a column width of 2.
 *  - All remaining characters (including all printable ISO 8859-1 and
 *    WGL4 characters, Unicode control characters, etc.) have a column
 *    width of 1.
 *  This implementation assumes that characters are encoded in ISO 10646.
*/ function wcswidth(str, opts) {
    if (typeof str !== "string") return wcwidth(str, opts);
    var s = 0;
    for(var i = 0; i < str.length; i++){
        var n = wcwidth(str.charCodeAt(i), opts);
        if (n < 0) return -1;
        s += n;
    }
    return s;
}
function wcwidth(ucs, opts) {
    // test for 8-bit control characters
    if (ucs === 0) return opts.nul;
    if (ucs < 32 || ucs >= 0x7f && ucs < 0xa0) return opts.control;
    // binary search in table of non-spacing characters
    if (bisearch(ucs)) return 0;
    // if we arrive here, ucs is not a combining or C0/C1 control character
    return 1 + (ucs >= 0x1100 && (ucs <= 0x115f || // Hangul Jamo init. consonants
    ucs == 0x2329 || ucs == 0x232a || ucs >= 0x2e80 && ucs <= 0xa4cf && ucs != 0x303f || // CJK ... Yi
    ucs >= 0xac00 && ucs <= 0xd7a3 || // Hangul Syllables
    ucs >= 0xf900 && ucs <= 0xfaff || // CJK Compatibility Ideographs
    ucs >= 0xfe10 && ucs <= 0xfe19 || // Vertical forms
    ucs >= 0xfe30 && ucs <= 0xfe6f || // CJK Compatibility Forms
    ucs >= 0xff00 && ucs <= 0xff60 || // Fullwidth Forms
    ucs >= 0xffe0 && ucs <= 0xffe6 || ucs >= 0x20000 && ucs <= 0x2fffd || ucs >= 0x30000 && ucs <= 0x3fffd));
}
function bisearch(ucs) {
    var min = 0;
    var max = combining.length - 1;
    var mid;
    if (ucs < combining[0][0] || ucs > combining[max][1]) return false;
    while(max >= min){
        mid = Math.floor((min + max) / 2);
        if (ucs > combining[mid][1]) min = mid + 1;
        else if (ucs < combining[mid][0]) max = mid - 1;
        else return true;
    }
    return false;
}

},{"18dcc2fdd3058189":"3IMPZ","4bbc2acdeba932f8":"gj3qA"}],"3IMPZ":[function(require,module,exports) {
var clone = require("b471dd5056c3d48d");
module.exports = function(options, defaults) {
    options = options || {};
    Object.keys(defaults).forEach(function(key) {
        if (typeof options[key] === "undefined") options[key] = clone(defaults[key]);
    });
    return options;
};

},{"b471dd5056c3d48d":"l3pwy"}],"l3pwy":[function(require,module,exports) {
var Buffer = require("475dc8f5d2046429").Buffer;
var clone = function() {
    "use strict";
    /**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
*/ function clone(parent, circular, depth, prototype) {
        var filter;
        if (typeof circular === "object") {
            depth = circular.depth;
            prototype = circular.prototype;
            filter = circular.filter;
            circular = circular.circular;
        }
        // maintain two arrays for circular references, where corresponding parents
        // and children have the same index
        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof Buffer != "undefined";
        if (typeof circular == "undefined") circular = true;
        if (typeof depth == "undefined") depth = Infinity;
        // recurse this function so we don't reset allParents and allChildren
        function _clone(parent, depth) {
            // cloning null always returns null
            if (parent === null) return null;
            if (depth == 0) return parent;
            var child;
            var proto;
            if (typeof parent != "object") return parent;
            if (clone.__isArray(parent)) child = [];
            else if (clone.__isRegExp(parent)) {
                child = new RegExp(parent.source, __getRegExpFlags(parent));
                if (parent.lastIndex) child.lastIndex = parent.lastIndex;
            } else if (clone.__isDate(parent)) child = new Date(parent.getTime());
            else if (useBuffer && Buffer.isBuffer(parent)) {
                if (Buffer.allocUnsafe) // Node.js >= 4.5.0
                child = Buffer.allocUnsafe(parent.length);
                else // Older Node.js versions
                child = new Buffer(parent.length);
                parent.copy(child);
                return child;
            } else if (typeof prototype == "undefined") {
                proto = Object.getPrototypeOf(parent);
                child = Object.create(proto);
            } else {
                child = Object.create(prototype);
                proto = prototype;
            }
            if (circular) {
                var index = allParents.indexOf(parent);
                if (index != -1) return allChildren[index];
                allParents.push(parent);
                allChildren.push(child);
            }
            for(var i in parent){
                var attrs;
                if (proto) attrs = Object.getOwnPropertyDescriptor(proto, i);
                if (attrs && attrs.set == null) continue;
                child[i] = _clone(parent[i], depth - 1);
            }
            return child;
        }
        return _clone(parent, depth);
    }
    /**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */ clone.clonePrototype = function clonePrototype(parent) {
        if (parent === null) return null;
        var c = function() {};
        c.prototype = parent;
        return new c();
    };
    // private utility functions
    function __objToStr(o) {
        return Object.prototype.toString.call(o);
    }
    clone.__objToStr = __objToStr;
    function __isDate(o) {
        return typeof o === "object" && __objToStr(o) === "[object Date]";
    }
    clone.__isDate = __isDate;
    function __isArray(o) {
        return typeof o === "object" && __objToStr(o) === "[object Array]";
    }
    clone.__isArray = __isArray;
    function __isRegExp(o) {
        return typeof o === "object" && __objToStr(o) === "[object RegExp]";
    }
    clone.__isRegExp = __isRegExp;
    function __getRegExpFlags(re) {
        var flags = "";
        if (re.global) flags += "g";
        if (re.ignoreCase) flags += "i";
        if (re.multiline) flags += "m";
        return flags;
    }
    clone.__getRegExpFlags = __getRegExpFlags;
    return clone;
}();
if (0, module.exports) module.exports = clone;

},{"475dc8f5d2046429":"fCgem"}],"gj3qA":[function(require,module,exports) {
module.exports = [
    [
        0x0300,
        0x036F
    ],
    [
        0x0483,
        0x0486
    ],
    [
        0x0488,
        0x0489
    ],
    [
        0x0591,
        0x05BD
    ],
    [
        0x05BF,
        0x05BF
    ],
    [
        0x05C1,
        0x05C2
    ],
    [
        0x05C4,
        0x05C5
    ],
    [
        0x05C7,
        0x05C7
    ],
    [
        0x0600,
        0x0603
    ],
    [
        0x0610,
        0x0615
    ],
    [
        0x064B,
        0x065E
    ],
    [
        0x0670,
        0x0670
    ],
    [
        0x06D6,
        0x06E4
    ],
    [
        0x06E7,
        0x06E8
    ],
    [
        0x06EA,
        0x06ED
    ],
    [
        0x070F,
        0x070F
    ],
    [
        0x0711,
        0x0711
    ],
    [
        0x0730,
        0x074A
    ],
    [
        0x07A6,
        0x07B0
    ],
    [
        0x07EB,
        0x07F3
    ],
    [
        0x0901,
        0x0902
    ],
    [
        0x093C,
        0x093C
    ],
    [
        0x0941,
        0x0948
    ],
    [
        0x094D,
        0x094D
    ],
    [
        0x0951,
        0x0954
    ],
    [
        0x0962,
        0x0963
    ],
    [
        0x0981,
        0x0981
    ],
    [
        0x09BC,
        0x09BC
    ],
    [
        0x09C1,
        0x09C4
    ],
    [
        0x09CD,
        0x09CD
    ],
    [
        0x09E2,
        0x09E3
    ],
    [
        0x0A01,
        0x0A02
    ],
    [
        0x0A3C,
        0x0A3C
    ],
    [
        0x0A41,
        0x0A42
    ],
    [
        0x0A47,
        0x0A48
    ],
    [
        0x0A4B,
        0x0A4D
    ],
    [
        0x0A70,
        0x0A71
    ],
    [
        0x0A81,
        0x0A82
    ],
    [
        0x0ABC,
        0x0ABC
    ],
    [
        0x0AC1,
        0x0AC5
    ],
    [
        0x0AC7,
        0x0AC8
    ],
    [
        0x0ACD,
        0x0ACD
    ],
    [
        0x0AE2,
        0x0AE3
    ],
    [
        0x0B01,
        0x0B01
    ],
    [
        0x0B3C,
        0x0B3C
    ],
    [
        0x0B3F,
        0x0B3F
    ],
    [
        0x0B41,
        0x0B43
    ],
    [
        0x0B4D,
        0x0B4D
    ],
    [
        0x0B56,
        0x0B56
    ],
    [
        0x0B82,
        0x0B82
    ],
    [
        0x0BC0,
        0x0BC0
    ],
    [
        0x0BCD,
        0x0BCD
    ],
    [
        0x0C3E,
        0x0C40
    ],
    [
        0x0C46,
        0x0C48
    ],
    [
        0x0C4A,
        0x0C4D
    ],
    [
        0x0C55,
        0x0C56
    ],
    [
        0x0CBC,
        0x0CBC
    ],
    [
        0x0CBF,
        0x0CBF
    ],
    [
        0x0CC6,
        0x0CC6
    ],
    [
        0x0CCC,
        0x0CCD
    ],
    [
        0x0CE2,
        0x0CE3
    ],
    [
        0x0D41,
        0x0D43
    ],
    [
        0x0D4D,
        0x0D4D
    ],
    [
        0x0DCA,
        0x0DCA
    ],
    [
        0x0DD2,
        0x0DD4
    ],
    [
        0x0DD6,
        0x0DD6
    ],
    [
        0x0E31,
        0x0E31
    ],
    [
        0x0E34,
        0x0E3A
    ],
    [
        0x0E47,
        0x0E4E
    ],
    [
        0x0EB1,
        0x0EB1
    ],
    [
        0x0EB4,
        0x0EB9
    ],
    [
        0x0EBB,
        0x0EBC
    ],
    [
        0x0EC8,
        0x0ECD
    ],
    [
        0x0F18,
        0x0F19
    ],
    [
        0x0F35,
        0x0F35
    ],
    [
        0x0F37,
        0x0F37
    ],
    [
        0x0F39,
        0x0F39
    ],
    [
        0x0F71,
        0x0F7E
    ],
    [
        0x0F80,
        0x0F84
    ],
    [
        0x0F86,
        0x0F87
    ],
    [
        0x0F90,
        0x0F97
    ],
    [
        0x0F99,
        0x0FBC
    ],
    [
        0x0FC6,
        0x0FC6
    ],
    [
        0x102D,
        0x1030
    ],
    [
        0x1032,
        0x1032
    ],
    [
        0x1036,
        0x1037
    ],
    [
        0x1039,
        0x1039
    ],
    [
        0x1058,
        0x1059
    ],
    [
        0x1160,
        0x11FF
    ],
    [
        0x135F,
        0x135F
    ],
    [
        0x1712,
        0x1714
    ],
    [
        0x1732,
        0x1734
    ],
    [
        0x1752,
        0x1753
    ],
    [
        0x1772,
        0x1773
    ],
    [
        0x17B4,
        0x17B5
    ],
    [
        0x17B7,
        0x17BD
    ],
    [
        0x17C6,
        0x17C6
    ],
    [
        0x17C9,
        0x17D3
    ],
    [
        0x17DD,
        0x17DD
    ],
    [
        0x180B,
        0x180D
    ],
    [
        0x18A9,
        0x18A9
    ],
    [
        0x1920,
        0x1922
    ],
    [
        0x1927,
        0x1928
    ],
    [
        0x1932,
        0x1932
    ],
    [
        0x1939,
        0x193B
    ],
    [
        0x1A17,
        0x1A18
    ],
    [
        0x1B00,
        0x1B03
    ],
    [
        0x1B34,
        0x1B34
    ],
    [
        0x1B36,
        0x1B3A
    ],
    [
        0x1B3C,
        0x1B3C
    ],
    [
        0x1B42,
        0x1B42
    ],
    [
        0x1B6B,
        0x1B73
    ],
    [
        0x1DC0,
        0x1DCA
    ],
    [
        0x1DFE,
        0x1DFF
    ],
    [
        0x200B,
        0x200F
    ],
    [
        0x202A,
        0x202E
    ],
    [
        0x2060,
        0x2063
    ],
    [
        0x206A,
        0x206F
    ],
    [
        0x20D0,
        0x20EF
    ],
    [
        0x302A,
        0x302F
    ],
    [
        0x3099,
        0x309A
    ],
    [
        0xA806,
        0xA806
    ],
    [
        0xA80B,
        0xA80B
    ],
    [
        0xA825,
        0xA826
    ],
    [
        0xFB1E,
        0xFB1E
    ],
    [
        0xFE00,
        0xFE0F
    ],
    [
        0xFE20,
        0xFE23
    ],
    [
        0xFEFF,
        0xFEFF
    ],
    [
        0xFFF9,
        0xFFFB
    ],
    [
        0x10A01,
        0x10A03
    ],
    [
        0x10A05,
        0x10A06
    ],
    [
        0x10A0C,
        0x10A0F
    ],
    [
        0x10A38,
        0x10A3A
    ],
    [
        0x10A3F,
        0x10A3F
    ],
    [
        0x1D167,
        0x1D169
    ],
    [
        0x1D173,
        0x1D182
    ],
    [
        0x1D185,
        0x1D18B
    ],
    [
        0x1D1AA,
        0x1D1AD
    ],
    [
        0x1D242,
        0x1D244
    ],
    [
        0xE0001,
        0xE0001
    ],
    [
        0xE0020,
        0xE007F
    ],
    [
        0xE0100,
        0xE01EF
    ]
];

},{}],"9VPlD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constant = require("./constant");
var _en = require("./locale/en");
var _enDefault = parcelHelpers.interopDefault(_en);
var _utils = require("./utils");
var _utilsDefault = parcelHelpers.interopDefault(_utils);
var L = "en"; // global locale
var Ls = {}; // global loaded locale
Ls[L] = (0, _enDefault.default);
var isDayjs = function isDayjs(d) {
    return d instanceof Dayjs;
}; // eslint-disable-line no-use-before-define
var parseLocale = function parseLocale(preset, object, isLocal) {
    var l;
    if (!preset) return L;
    if (typeof preset === "string") {
        var presetLower = preset.toLowerCase();
        if (Ls[presetLower]) l = presetLower;
        if (object) {
            Ls[presetLower] = object;
            l = presetLower;
        }
        var presetSplit = preset.split("-");
        if (!l && presetSplit.length > 1) return parseLocale(presetSplit[0]);
    } else {
        var name = preset.name;
        Ls[name] = preset;
        l = name;
    }
    if (!isLocal && l) L = l;
    return l || !isLocal && L;
};
var dayjs = function dayjs(date, c) {
    if (isDayjs(date)) return date.clone();
     // eslint-disable-next-line no-nested-ternary
    var cfg = typeof c === "object" ? c : {};
    cfg.date = date;
    cfg.args = arguments; // eslint-disable-line prefer-rest-params
    return new Dayjs(cfg); // eslint-disable-line no-use-before-define
};
var wrapper = function wrapper(date, instance) {
    return dayjs(date, {
        locale: instance.$L,
        utc: instance.$u,
        x: instance.$x,
        $offset: instance.$offset // todo: refactor; do not use this.$offset in you code
    });
};
var Utils = (0, _utilsDefault.default); // for plugin use
Utils.l = parseLocale;
Utils.i = isDayjs;
Utils.w = wrapper;
var parseDate = function parseDate(cfg) {
    var date = cfg.date, utc = cfg.utc;
    if (date === null) return new Date(NaN); // null is invalid
    if (Utils.u(date)) return new Date(); // today
    if (date instanceof Date) return new Date(date);
    if (typeof date === "string" && !/Z$/i.test(date)) {
        var d = date.match(_constant.REGEX_PARSE);
        if (d) {
            var m = d[2] - 1 || 0;
            var ms = (d[7] || "0").substring(0, 3);
            if (utc) return new Date(Date.UTC(d[1], m, d[3] || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms));
            return new Date(d[1], m, d[3] || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms);
        }
    }
    return new Date(date); // everything else
};
var Dayjs = /*#__PURE__*/ function() {
    function Dayjs(cfg) {
        this.$L = parseLocale(cfg.locale, null, true);
        this.parse(cfg); // for plugin
    }
    var _proto = Dayjs.prototype;
    _proto.parse = function parse(cfg) {
        this.$d = parseDate(cfg);
        this.$x = cfg.x || {};
        this.init();
    };
    _proto.init = function init() {
        var $d = this.$d;
        this.$y = $d.getFullYear();
        this.$M = $d.getMonth();
        this.$D = $d.getDate();
        this.$W = $d.getDay();
        this.$H = $d.getHours();
        this.$m = $d.getMinutes();
        this.$s = $d.getSeconds();
        this.$ms = $d.getMilliseconds();
    } // eslint-disable-next-line class-methods-use-this
    ;
    _proto.$utils = function $utils() {
        return Utils;
    };
    _proto.isValid = function isValid() {
        return !(this.$d.toString() === _constant.INVALID_DATE_STRING);
    };
    _proto.isSame = function isSame(that, units) {
        var other = dayjs(that);
        return this.startOf(units) <= other && other <= this.endOf(units);
    };
    _proto.isAfter = function isAfter(that, units) {
        return dayjs(that) < this.startOf(units);
    };
    _proto.isBefore = function isBefore(that, units) {
        return this.endOf(units) < dayjs(that);
    };
    _proto.$g = function $g(input, get, set) {
        if (Utils.u(input)) return this[get];
        return this.set(set, input);
    };
    _proto.unix = function unix() {
        return Math.floor(this.valueOf() / 1000);
    };
    _proto.valueOf = function valueOf() {
        // timezone(hour) * 60 * 60 * 1000 => ms
        return this.$d.getTime();
    };
    _proto.startOf = function startOf(units, _startOf) {
        var _this = this;
        // startOf -> endOf
        var isStartOf = !Utils.u(_startOf) ? _startOf : true;
        var unit = Utils.p(units);
        var instanceFactory = function instanceFactory(d, m) {
            var ins = Utils.w(_this.$u ? Date.UTC(_this.$y, m, d) : new Date(_this.$y, m, d), _this);
            return isStartOf ? ins : ins.endOf(_constant.D);
        };
        var instanceFactorySet = function instanceFactorySet(method, slice) {
            var argumentStart = [
                0,
                0,
                0,
                0
            ];
            var argumentEnd = [
                23,
                59,
                59,
                999
            ];
            return Utils.w(_this.toDate()[method].apply(_this.toDate("s"), (isStartOf ? argumentStart : argumentEnd).slice(slice)), _this);
        };
        var $W = this.$W, $M = this.$M, $D = this.$D;
        var utcPad = "set" + (this.$u ? "UTC" : "");
        switch(unit){
            case _constant.Y:
                return isStartOf ? instanceFactory(1, 0) : instanceFactory(31, 11);
            case _constant.M:
                return isStartOf ? instanceFactory(1, $M) : instanceFactory(0, $M + 1);
            case _constant.W:
                var weekStart = this.$locale().weekStart || 0;
                var gap = ($W < weekStart ? $W + 7 : $W) - weekStart;
                return instanceFactory(isStartOf ? $D - gap : $D + (6 - gap), $M);
            case _constant.D:
            case _constant.DATE:
                return instanceFactorySet(utcPad + "Hours", 0);
            case _constant.H:
                return instanceFactorySet(utcPad + "Minutes", 1);
            case _constant.MIN:
                return instanceFactorySet(utcPad + "Seconds", 2);
            case _constant.S:
                return instanceFactorySet(utcPad + "Milliseconds", 3);
            default:
                return this.clone();
        }
    };
    _proto.endOf = function endOf(arg) {
        return this.startOf(arg, false);
    };
    _proto.$set = function $set(units, _int) {
        var _C$D$C$DATE$C$M$C$Y$C;
        // private set
        var unit = Utils.p(units);
        var utcPad = "set" + (this.$u ? "UTC" : "");
        var name = (_C$D$C$DATE$C$M$C$Y$C = {}, _C$D$C$DATE$C$M$C$Y$C[_constant.D] = utcPad + "Date", _C$D$C$DATE$C$M$C$Y$C[_constant.DATE] = utcPad + "Date", _C$D$C$DATE$C$M$C$Y$C[_constant.M] = utcPad + "Month", _C$D$C$DATE$C$M$C$Y$C[_constant.Y] = utcPad + "FullYear", _C$D$C$DATE$C$M$C$Y$C[_constant.H] = utcPad + "Hours", _C$D$C$DATE$C$M$C$Y$C[_constant.MIN] = utcPad + "Minutes", _C$D$C$DATE$C$M$C$Y$C[_constant.S] = utcPad + "Seconds", _C$D$C$DATE$C$M$C$Y$C[_constant.MS] = utcPad + "Milliseconds", _C$D$C$DATE$C$M$C$Y$C)[unit];
        var arg = unit === _constant.D ? this.$D + (_int - this.$W) : _int;
        if (unit === _constant.M || unit === _constant.Y) {
            // clone is for badMutable plugin
            var date = this.clone().set(_constant.DATE, 1);
            date.$d[name](arg);
            date.init();
            this.$d = date.set(_constant.DATE, Math.min(this.$D, date.daysInMonth())).$d;
        } else if (name) this.$d[name](arg);
        this.init();
        return this;
    };
    _proto.set = function set(string, _int2) {
        return this.clone().$set(string, _int2);
    };
    _proto.get = function get(unit) {
        return this[Utils.p(unit)]();
    };
    _proto.add = function add(number, units) {
        var _this2 = this, _C$MIN$C$H$C$S$unit;
        number = Number(number); // eslint-disable-line no-param-reassign
        var unit = Utils.p(units);
        var instanceFactorySet = function instanceFactorySet(n) {
            var d = dayjs(_this2);
            return Utils.w(d.date(d.date() + Math.round(n * number)), _this2);
        };
        if (unit === _constant.M) return this.set(_constant.M, this.$M + number);
        if (unit === _constant.Y) return this.set(_constant.Y, this.$y + number);
        if (unit === _constant.D) return instanceFactorySet(1);
        if (unit === _constant.W) return instanceFactorySet(7);
        var step = (_C$MIN$C$H$C$S$unit = {}, _C$MIN$C$H$C$S$unit[_constant.MIN] = _constant.MILLISECONDS_A_MINUTE, _C$MIN$C$H$C$S$unit[_constant.H] = _constant.MILLISECONDS_A_HOUR, _C$MIN$C$H$C$S$unit[_constant.S] = _constant.MILLISECONDS_A_SECOND, _C$MIN$C$H$C$S$unit)[unit] || 1; // ms
        var nextTimeStamp = this.$d.getTime() + number * step;
        return Utils.w(nextTimeStamp, this);
    };
    _proto.subtract = function subtract(number, string) {
        return this.add(number * -1, string);
    };
    _proto.format = function format(formatStr) {
        var _this3 = this;
        var locale = this.$locale();
        if (!this.isValid()) return locale.invalidDate || _constant.INVALID_DATE_STRING;
        var str = formatStr || _constant.FORMAT_DEFAULT;
        var zoneStr = Utils.z(this);
        var $H = this.$H, $m = this.$m, $M = this.$M;
        var weekdays = locale.weekdays, months = locale.months, meridiem = locale.meridiem;
        var getShort = function getShort(arr, index, full, length) {
            return arr && (arr[index] || arr(_this3, str)) || full[index].slice(0, length);
        };
        var get$H = function get$H(num) {
            return Utils.s($H % 12 || 12, num, "0");
        };
        var meridiemFunc = meridiem || function(hour, minute, isLowercase) {
            var m = hour < 12 ? "AM" : "PM";
            return isLowercase ? m.toLowerCase() : m;
        };
        var matches = {
            YY: String(this.$y).slice(-2),
            YYYY: this.$y,
            M: $M + 1,
            MM: Utils.s($M + 1, 2, "0"),
            MMM: getShort(locale.monthsShort, $M, months, 3),
            MMMM: getShort(months, $M),
            D: this.$D,
            DD: Utils.s(this.$D, 2, "0"),
            d: String(this.$W),
            dd: getShort(locale.weekdaysMin, this.$W, weekdays, 2),
            ddd: getShort(locale.weekdaysShort, this.$W, weekdays, 3),
            dddd: weekdays[this.$W],
            H: String($H),
            HH: Utils.s($H, 2, "0"),
            h: get$H(1),
            hh: get$H(2),
            a: meridiemFunc($H, $m, true),
            A: meridiemFunc($H, $m, false),
            m: String($m),
            mm: Utils.s($m, 2, "0"),
            s: String(this.$s),
            ss: Utils.s(this.$s, 2, "0"),
            SSS: Utils.s(this.$ms, 3, "0"),
            Z: zoneStr // 'ZZ' logic below
        };
        return str.replace(_constant.REGEX_FORMAT, function(match, $1) {
            return $1 || matches[match] || zoneStr.replace(":", "");
        }); // 'ZZ'
    };
    _proto.utcOffset = function utcOffset() {
        // Because a bug at FF24, we're rounding the timezone offset around 15 minutes
        // https://github.com/moment/moment/pull/1871
        return -Math.round(this.$d.getTimezoneOffset() / 15) * 15;
    };
    _proto.diff = function diff(input, units, _float) {
        var _C$Y$C$M$C$Q$C$W$C$D$;
        var unit = Utils.p(units);
        var that = dayjs(input);
        var zoneDelta = (that.utcOffset() - this.utcOffset()) * _constant.MILLISECONDS_A_MINUTE;
        var diff = this - that;
        var result = Utils.m(this, that);
        result = (_C$Y$C$M$C$Q$C$W$C$D$ = {}, _C$Y$C$M$C$Q$C$W$C$D$[_constant.Y] = result / 12, _C$Y$C$M$C$Q$C$W$C$D$[_constant.M] = result, _C$Y$C$M$C$Q$C$W$C$D$[_constant.Q] = result / 3, _C$Y$C$M$C$Q$C$W$C$D$[_constant.W] = (diff - zoneDelta) / _constant.MILLISECONDS_A_WEEK, _C$Y$C$M$C$Q$C$W$C$D$[_constant.D] = (diff - zoneDelta) / _constant.MILLISECONDS_A_DAY, _C$Y$C$M$C$Q$C$W$C$D$[_constant.H] = diff / _constant.MILLISECONDS_A_HOUR, _C$Y$C$M$C$Q$C$W$C$D$[_constant.MIN] = diff / _constant.MILLISECONDS_A_MINUTE, _C$Y$C$M$C$Q$C$W$C$D$[_constant.S] = diff / _constant.MILLISECONDS_A_SECOND, _C$Y$C$M$C$Q$C$W$C$D$)[unit] || diff; // milliseconds
        return _float ? result : Utils.a(result);
    };
    _proto.daysInMonth = function daysInMonth() {
        return this.endOf(_constant.M).$D;
    };
    _proto.$locale = function $locale() {
        // get locale object
        return Ls[this.$L];
    };
    _proto.locale = function locale(preset, object) {
        if (!preset) return this.$L;
        var that = this.clone();
        var nextLocaleName = parseLocale(preset, object, true);
        if (nextLocaleName) that.$L = nextLocaleName;
        return that;
    };
    _proto.clone = function clone() {
        return Utils.w(this.$d, this);
    };
    _proto.toDate = function toDate() {
        return new Date(this.valueOf());
    };
    _proto.toJSON = function toJSON() {
        return this.isValid() ? this.toISOString() : null;
    };
    _proto.toISOString = function toISOString() {
        // ie 8 return
        // new Dayjs(this.valueOf() + this.$d.getTimezoneOffset() * 60000)
        // .format('YYYY-MM-DDTHH:mm:ss.SSS[Z]')
        return this.$d.toISOString();
    };
    _proto.toString = function toString() {
        return this.$d.toUTCString();
    };
    return Dayjs;
}();
var proto = Dayjs.prototype;
dayjs.prototype = proto;
[
    [
        "$ms",
        _constant.MS
    ],
    [
        "$s",
        _constant.S
    ],
    [
        "$m",
        _constant.MIN
    ],
    [
        "$H",
        _constant.H
    ],
    [
        "$W",
        _constant.D
    ],
    [
        "$M",
        _constant.M
    ],
    [
        "$y",
        _constant.Y
    ],
    [
        "$D",
        _constant.DATE
    ]
].forEach(function(g) {
    proto[g[1]] = function(input) {
        return this.$g(input, g[0], g[1]);
    };
});
dayjs.extend = function(plugin, option) {
    if (!plugin.$i) {
        // install plugin only once
        plugin(option, Dayjs, dayjs);
        plugin.$i = true;
    }
    return dayjs;
};
dayjs.locale = parseLocale;
dayjs.isDayjs = isDayjs;
dayjs.unix = function(timestamp) {
    return dayjs(timestamp * 1e3);
};
dayjs.en = Ls[L];
dayjs.Ls = Ls;
dayjs.p = {};
exports.default = dayjs;

},{"./constant":"eQUnh","./locale/en":"3Hh40","./utils":"ev8r6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eQUnh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SECONDS_A_MINUTE", ()=>SECONDS_A_MINUTE);
parcelHelpers.export(exports, "SECONDS_A_HOUR", ()=>SECONDS_A_HOUR);
parcelHelpers.export(exports, "SECONDS_A_DAY", ()=>SECONDS_A_DAY);
parcelHelpers.export(exports, "SECONDS_A_WEEK", ()=>SECONDS_A_WEEK);
parcelHelpers.export(exports, "MILLISECONDS_A_SECOND", ()=>MILLISECONDS_A_SECOND);
parcelHelpers.export(exports, "MILLISECONDS_A_MINUTE", ()=>MILLISECONDS_A_MINUTE);
parcelHelpers.export(exports, "MILLISECONDS_A_HOUR", ()=>MILLISECONDS_A_HOUR);
parcelHelpers.export(exports, "MILLISECONDS_A_DAY", ()=>MILLISECONDS_A_DAY);
parcelHelpers.export(exports, "MILLISECONDS_A_WEEK", ()=>MILLISECONDS_A_WEEK);
parcelHelpers.export(exports, "MS", ()=>MS);
parcelHelpers.export(exports, "S", ()=>S);
parcelHelpers.export(exports, "MIN", ()=>MIN);
parcelHelpers.export(exports, "H", ()=>H);
parcelHelpers.export(exports, "D", ()=>D);
parcelHelpers.export(exports, "W", ()=>W);
parcelHelpers.export(exports, "M", ()=>M);
parcelHelpers.export(exports, "Q", ()=>Q);
parcelHelpers.export(exports, "Y", ()=>Y);
parcelHelpers.export(exports, "DATE", ()=>DATE);
parcelHelpers.export(exports, "FORMAT_DEFAULT", ()=>FORMAT_DEFAULT);
parcelHelpers.export(exports, "INVALID_DATE_STRING", ()=>INVALID_DATE_STRING);
parcelHelpers.export(exports, "REGEX_PARSE", ()=>REGEX_PARSE);
parcelHelpers.export(exports, "REGEX_FORMAT", ()=>REGEX_FORMAT);
var SECONDS_A_MINUTE = 60;
var SECONDS_A_HOUR = SECONDS_A_MINUTE * 60;
var SECONDS_A_DAY = SECONDS_A_HOUR * 24;
var SECONDS_A_WEEK = SECONDS_A_DAY * 7;
var MILLISECONDS_A_SECOND = 1e3;
var MILLISECONDS_A_MINUTE = SECONDS_A_MINUTE * MILLISECONDS_A_SECOND;
var MILLISECONDS_A_HOUR = SECONDS_A_HOUR * MILLISECONDS_A_SECOND;
var MILLISECONDS_A_DAY = SECONDS_A_DAY * MILLISECONDS_A_SECOND;
var MILLISECONDS_A_WEEK = SECONDS_A_WEEK * MILLISECONDS_A_SECOND; // English locales
var MS = "millisecond";
var S = "second";
var MIN = "minute";
var H = "hour";
var D = "day";
var W = "week";
var M = "month";
var Q = "quarter";
var Y = "year";
var DATE = "date";
var FORMAT_DEFAULT = "YYYY-MM-DDTHH:mm:ssZ";
var INVALID_DATE_STRING = "Invalid Date"; // regex
var REGEX_PARSE = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/;
var REGEX_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"3Hh40":[function(require,module,exports) {
// English [en]
// We don't need weekdaysShort, weekdaysMin, monthsShort in en.js locale
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = {
    name: "en",
    weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
    months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
    ordinal: function ordinal(n) {
        var s = [
            "th",
            "st",
            "nd",
            "rd"
        ];
        var v = n % 100;
        return "[" + n + (s[(v - 20) % 10] || s[v] || s[0]) + "]";
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ev8r6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _constant = require("./constant");
var padStart = function padStart(string, length, pad) {
    var s = String(string);
    if (!s || s.length >= length) return string;
    return "" + Array(length + 1 - s.length).join(pad) + string;
};
var padZoneStr = function padZoneStr(instance) {
    var negMinutes = -instance.utcOffset();
    var minutes = Math.abs(negMinutes);
    var hourOffset = Math.floor(minutes / 60);
    var minuteOffset = minutes % 60;
    return "" + (negMinutes <= 0 ? "+" : "-") + padStart(hourOffset, 2, "0") + ":" + padStart(minuteOffset, 2, "0");
};
var monthDiff = function monthDiff(a, b) {
    // function from moment.js in order to keep the same result
    if (a.date() < b.date()) return -monthDiff(b, a);
    var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month());
    var anchor = a.clone().add(wholeMonthDiff, _constant.M);
    var c = b - anchor < 0;
    var anchor2 = a.clone().add(wholeMonthDiff + (c ? -1 : 1), _constant.M);
    return +(-(wholeMonthDiff + (b - anchor) / (c ? anchor - anchor2 : anchor2 - anchor)) || 0);
};
var absFloor = function absFloor(n) {
    return n < 0 ? Math.ceil(n) || 0 : Math.floor(n);
};
var prettyUnit = function prettyUnit(u) {
    var special = {
        M: _constant.M,
        y: _constant.Y,
        w: _constant.W,
        d: _constant.D,
        D: _constant.DATE,
        h: _constant.H,
        m: _constant.MIN,
        s: _constant.S,
        ms: _constant.MS,
        Q: _constant.Q
    };
    return special[u] || String(u || "").toLowerCase().replace(/s$/, "");
};
var isUndefined = function isUndefined(s) {
    return s === undefined;
};
exports.default = {
    s: padStart,
    z: padZoneStr,
    m: monthDiff,
    a: absFloor,
    p: prettyUnit,
    u: isUndefined
};

},{"./constant":"eQUnh","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Tr7k":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: !0
}), exports.addCustomTypes = exports.Schema = exports.t = void 0;
var _typy = require("d36dab58062d2d24"), _typy2 = _interopRequireDefault(_typy);
function _interopRequireDefault(a) {
    return a && a.__esModule ? a : {
        default: a
    };
}
var t = function(a, b) {
    return new _typy2.default().t(a, b);
}, Schema = _typy2.default.Schema, addCustomTypes = function(a) {
    if (t(a).isObject) Object.keys(a).forEach(function(b) {
        if (t(a[b]).isFunction) _typy2.default.prototype.__defineGetter__(b, function() {
            return a[b](this.input);
        });
        else throw new Error("validator " + b + " is not a function");
    });
    else throw new Error("validators must be key value pairs");
};
exports.default = t, exports.t = t, exports.Schema = Schema, exports.addCustomTypes = addCustomTypes;

},{"d36dab58062d2d24":"8cdeF"}],"8cdeF":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: !0
});
var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
    return typeof a;
} : function(a) {
    return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
}, _createClass = function() {
    function a(a, b) {
        for(var c, d = 0; d < b.length; d++)c = b[d], c.enumerable = c.enumerable || !1, c.configurable = !0, "value" in c && (c.writable = !0), Object.defineProperty(a, c.key, c);
    }
    return function(b, c, d) {
        return c && a(b.prototype, c), d && a(b, d), b;
    };
}(), _util = require("c5e818c71eebc052");
function _classCallCheck(a, b) {
    if (!(a instanceof b)) throw new TypeError("Cannot call a class as a function");
}
var Typy = function() {
    function a() {
        var b = this;
        _classCallCheck(this, a), this.t = function(a, c) {
            if (b.input = a, b.schemaCheck = null, c) {
                if ("string" == typeof c) b.input = (0, _util.getNestedObject)(b.input, c);
                else {
                    var d = (0, _util.convertSchemaAndGetMatch)(b.input, c);
                    -1 === d ? (b.schemaCheck = !1, b.input = a) : (b.schemaCheck = !0, b.input = d);
                }
            }
            return b;
        };
    }
    return _createClass(a, [
        {
            key: "isValid",
            get: function get() {
                return null !== this.schemaCheck && !0 === this.schemaCheck && null !== this.input && void 0 !== this.input;
            }
        },
        {
            key: "isDefined",
            get: function get() {
                return "undefined" != typeof this.input;
            }
        },
        {
            key: "isUndefined",
            get: function get() {
                return "undefined" == typeof this.input;
            }
        },
        {
            key: "isNull",
            get: function get() {
                return null === this.input && "object" === _typeof(this.input);
            }
        },
        {
            key: "isNullOrUndefined",
            get: function get() {
                return !!(this.isNull || this.isUndefined);
            }
        },
        {
            key: "isBoolean",
            get: function get() {
                return _typeof(this.input) === _typeof(!0);
            }
        },
        {
            key: "isTrue",
            get: function get() {
                return !0 === this.input;
            }
        },
        {
            key: "isFalse",
            get: function get() {
                return !1 === this.input;
            }
        },
        {
            key: "isTruthy",
            get: function get() {
                return !!this.input;
            }
        },
        {
            key: "isFalsy",
            get: function get() {
                return !this.input;
            }
        },
        {
            key: "isObject",
            get: function get() {
                return "object" === _typeof(this.input) && this.input === Object(this.input) && "[object Array]" !== Object.prototype.toString.call(this.input) && "[object Date]" !== Object.prototype.toString.call(this.input);
            }
        },
        {
            key: "isEmptyObject",
            get: function get() {
                return !!(this.isObject && 0 === Object.keys(this.input).length);
            }
        },
        {
            key: "isString",
            get: function get() {
                return "string" == typeof this.input;
            }
        },
        {
            key: "isEmptyString",
            get: function get() {
                return !!(this.isString && 0 === this.input.length);
            }
        },
        {
            key: "isNumber",
            get: function get() {
                return !!Number.isFinite(this.input);
            }
        },
        {
            key: "isArray",
            get: function get() {
                return !!Array.isArray(this.input);
            }
        },
        {
            key: "isEmptyArray",
            get: function get() {
                return !!(this.isArray && 0 === this.input.length);
            }
        },
        {
            key: "isFunction",
            get: function get() {
                return "function" == typeof this.input;
            }
        },
        {
            key: "isDate",
            get: function get() {
                return this.input instanceof Date || "[object Date]" === Object.prototype.toString.call(this.input);
            }
        },
        {
            key: "isSymbol",
            get: function get() {
                return "symbol" === _typeof(this.input) || "object" === _typeof(this.input) && "[object Symbol]" === Object.prototype.toString.call(this.input);
            }
        },
        {
            key: "safeObject",
            get: function get() {
                return this.input;
            }
        },
        {
            key: "safeObjectOrEmpty",
            get: function get() {
                return this.input ? this.input : {};
            }
        },
        {
            key: "safeString",
            get: function get() {
                return this.isString ? this.input : "";
            }
        },
        {
            key: "safeNumber",
            get: function get() {
                return this.isNumber ? this.input : 0;
            }
        },
        {
            key: "safeBoolean",
            get: function get() {
                return !!this.isBoolean && this.input;
            }
        },
        {
            key: "safeFunction",
            get: function get() {
                return this.isFunction ? this.input : function() {};
            }
        },
        {
            key: "safeArray",
            get: function get() {
                return this.isArray ? this.input : this.isNullOrUndefined ? [] : [
                    this.input
                ];
            }
        }
    ]), a;
}();
Typy.Schema = {
    Number: 1,
    String: "typy",
    Boolean: !0,
    Null: null,
    Undefined: void 0,
    Array: [],
    Function: function Function() {},
    Date: new Date,
    Symbol: Symbol("")
}, exports.default = Typy, module.exports = exports["default"];

},{"c5e818c71eebc052":"4RT6V"}],"4RT6V":[function(require,module,exports) {
"use strict";
var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(a) {
    return typeof a;
} : function(a) {
    return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a;
}, getNestedObject = function(a, b) {
    if (void 0 === b || "string" == typeof b) {
        if ("undefined" != typeof a && "string" == typeof b) {
            var c = /[.\[\]'"]/g, d = b.split(c).filter(function(a) {
                return "" !== a;
            });
            a = d.reduce(function(a, b) {
                return a && "undefined" !== a[b] ? a[b] : void 0;
            }, a);
        }
        return a;
    }
}, buildSchema = function(a) {
    if ("[object Array]" === Object.prototype.toString.call(a)) a.forEach(function(a) {
        return buildSchema(a);
    });
    else if ("[object Object]" === Object.prototype.toString.call(a)) Object.keys(a).forEach(function(b) {
        return buildSchema(a[b]);
    });
    else return "undefined" == typeof a ? "undefined" : _typeof(a);
    return a;
}, getSchemaMatch = function(a, b) {
    var c = !1;
    if ("[object Array]" === Object.prototype.toString.call(a)) {
        if (b.length) for(var d = 0; d < a.length; d += 1){
            if (!getSchemaMatch(a[d], b[d])) {
                c = !1;
                break;
            }
            c = !0;
        }
        else return !0;
    } else if ("[object Object]" === Object.prototype.toString.call(a)) for(var e in a){
        if (!getSchemaMatch(a[e], b[e])) {
            c = !1;
            break;
        }
        c = !0;
    }
    else return ("undefined" == typeof b ? "undefined" : _typeof(b)) === ("undefined" == typeof a ? "undefined" : _typeof(a));
    return c;
}, convertSchemaAndGetMatch = function(a, b) {
    var c = buildSchema(b);
    return getSchemaMatch(a, c) ? a : -1;
};
module.exports = {
    getNestedObject: getNestedObject,
    buildSchema: buildSchema,
    getSchemaMatch: getSchemaMatch,
    convertSchemaAndGetMatch: convertSchemaAndGetMatch
};

},{}],"lbQRg":[function(require,module,exports) {
(function(global, factory) {
    module.exports = factory();
})(this, function() {
    "use strict";
    function createCommonjsModule(fn, module1) {
        return module1 = {
            exports: {}
        }, fn(module1, module1.exports), module1.exports;
    }
    var _global = createCommonjsModule(function(module1) {
        // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
        var global = module1.exports = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
        if (typeof __g == "number") __g = global;
         // eslint-disable-line no-undef
    });
    var _core = createCommonjsModule(function(module1) {
        var core = module1.exports = {
            version: "2.6.5"
        };
        if (typeof __e == "number") __e = core;
         // eslint-disable-line no-undef
    });
    var _core_1 = _core.version;
    var _isObject = function(it) {
        return typeof it === "object" ? it !== null : typeof it === "function";
    };
    var _anObject = function(it) {
        if (!_isObject(it)) throw TypeError(it + " is not an object!");
        return it;
    };
    var _fails = function(exec) {
        try {
            return !!exec();
        } catch (e) {
            return true;
        }
    };
    // Thank's IE8 for his funny defineProperty
    var _descriptors = !_fails(function() {
        return Object.defineProperty({}, "a", {
            get: function() {
                return 7;
            }
        }).a != 7;
    });
    var document = _global.document;
    // typeof document.createElement is 'object' in old IE
    var is = _isObject(document) && _isObject(document.createElement);
    var _domCreate = function(it) {
        return is ? document.createElement(it) : {};
    };
    var _ie8DomDefine = !_descriptors && !_fails(function() {
        return Object.defineProperty(_domCreate("div"), "a", {
            get: function() {
                return 7;
            }
        }).a != 7;
    });
    // 7.1.1 ToPrimitive(input [, PreferredType])
    // instead of the ES6 spec version, we didn't implement @@toPrimitive case
    // and the second argument - flag - preferred type is a string
    var _toPrimitive = function(it, S) {
        if (!_isObject(it)) return it;
        var fn, val;
        if (S && typeof (fn = it.toString) == "function" && !_isObject(val = fn.call(it))) return val;
        if (typeof (fn = it.valueOf) == "function" && !_isObject(val = fn.call(it))) return val;
        if (!S && typeof (fn = it.toString) == "function" && !_isObject(val = fn.call(it))) return val;
        throw TypeError("Can't convert object to primitive value");
    };
    var dP = Object.defineProperty;
    var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
        _anObject(O);
        P = _toPrimitive(P, true);
        _anObject(Attributes);
        if (_ie8DomDefine) try {
            return dP(O, P, Attributes);
        } catch (e) {}
        if ("get" in Attributes || "set" in Attributes) throw TypeError("Accessors not supported!");
        if ("value" in Attributes) O[P] = Attributes.value;
        return O;
    };
    var _objectDp = {
        f: f
    };
    var _propertyDesc = function(bitmap, value) {
        return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value: value
        };
    };
    var _hide = _descriptors ? function(object, key, value) {
        return _objectDp.f(object, key, _propertyDesc(1, value));
    } : function(object, key, value) {
        object[key] = value;
        return object;
    };
    var hasOwnProperty = {}.hasOwnProperty;
    var _has = function(it, key) {
        return hasOwnProperty.call(it, key);
    };
    var id = 0;
    var px = Math.random();
    var _uid = function(key) {
        return "Symbol(".concat(key === undefined ? "" : key, ")_", (++id + px).toString(36));
    };
    var _library = false;
    var _shared = createCommonjsModule(function(module1) {
        var SHARED = "__core-js_shared__";
        var store = _global[SHARED] || (_global[SHARED] = {});
        (module1.exports = function(key, value) {
            return store[key] || (store[key] = value !== undefined ? value : {});
        })("versions", []).push({
            version: _core.version,
            mode: _library ? "pure" : "global",
            copyright: "\xa9 2019 Denis Pushkarev (zloirock.ru)"
        });
    });
    var _functionToString = _shared("native-function-to-string", Function.toString);
    var _redefine = createCommonjsModule(function(module1) {
        var SRC = _uid("src");
        var TO_STRING = "toString";
        var TPL = ("" + _functionToString).split(TO_STRING);
        _core.inspectSource = function(it) {
            return _functionToString.call(it);
        };
        (module1.exports = function(O, key, val, safe) {
            var isFunction = typeof val == "function";
            if (isFunction) _has(val, "name") || _hide(val, "name", key);
            if (O[key] === val) return;
            if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? "" + O[key] : TPL.join(String(key)));
            if (O === _global) O[key] = val;
            else if (!safe) {
                delete O[key];
                _hide(O, key, val);
            } else if (O[key]) O[key] = val;
            else _hide(O, key, val);
        // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
        })(Function.prototype, TO_STRING, function toString() {
            return typeof this == "function" && this[SRC] || _functionToString.call(this);
        });
    });
    var _aFunction = function(it) {
        if (typeof it != "function") throw TypeError(it + " is not a function!");
        return it;
    };
    // optional / simple context binding
    var _ctx = function(fn, that, length) {
        _aFunction(fn);
        if (that === undefined) return fn;
        switch(length){
            case 1:
                return function(a) {
                    return fn.call(that, a);
                };
            case 2:
                return function(a, b) {
                    return fn.call(that, a, b);
                };
            case 3:
                return function(a, b, c) {
                    return fn.call(that, a, b, c);
                };
        }
        return function() {
            return fn.apply(that, arguments);
        };
    };
    var PROTOTYPE = "prototype";
    var $export = function(type, name, source) {
        var IS_FORCED = type & $export.F;
        var IS_GLOBAL = type & $export.G;
        var IS_STATIC = type & $export.S;
        var IS_PROTO = type & $export.P;
        var IS_BIND = type & $export.B;
        var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];
        var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
        var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
        var key, own, out, exp;
        if (IS_GLOBAL) source = name;
        for(key in source){
            // contains in native
            own = !IS_FORCED && target && target[key] !== undefined;
            // export native or passed
            out = (own ? target : source)[key];
            // bind timers to global for call from export context
            exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == "function" ? _ctx(Function.call, out) : out;
            // extend global
            if (target) _redefine(target, key, out, type & $export.U);
            // export
            if (exports[key] != out) _hide(exports, key, exp);
            if (IS_PROTO && expProto[key] != out) expProto[key] = out;
        }
    };
    _global.core = _core;
    // type bitmap
    $export.F = 1; // forced
    $export.G = 2; // global
    $export.S = 4; // static
    $export.P = 8; // proto
    $export.B = 16; // bind
    $export.W = 32; // wrap
    $export.U = 64; // safe
    $export.R = 128; // real proto method for `library`
    var _export = $export;
    // 7.1.4 ToInteger
    var ceil = Math.ceil;
    var floor = Math.floor;
    var _toInteger = function(it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
    };
    // 7.2.1 RequireObjectCoercible(argument)
    var _defined = function(it) {
        if (it == undefined) throw TypeError("Can't call method on  " + it);
        return it;
    };
    // true  -> String#at
    // false -> String#codePointAt
    var _stringAt = function(TO_STRING) {
        return function(that, pos) {
            var s = String(_defined(that));
            var i = _toInteger(pos);
            var l = s.length;
            var a, b;
            if (i < 0 || i >= l) return TO_STRING ? "" : undefined;
            a = s.charCodeAt(i);
            return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
        };
    };
    var $at = _stringAt(false);
    _export(_export.P, "String", {
        // 21.1.3.3 String.prototype.codePointAt(pos)
        codePointAt: function codePointAt(pos) {
            return $at(this, pos);
        }
    });
    var codePointAt = _core.String.codePointAt;
    var max = Math.max;
    var min = Math.min;
    var _toAbsoluteIndex = function(index, length) {
        index = _toInteger(index);
        return index < 0 ? max(index + length, 0) : min(index, length);
    };
    var fromCharCode = String.fromCharCode;
    var $fromCodePoint = String.fromCodePoint;
    // length should be 1, old FF problem
    _export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), "String", {
        // 21.1.2.2 String.fromCodePoint(...codePoints)
        fromCodePoint: function fromCodePoint(x) {
            var arguments$1 = arguments;
            // eslint-disable-line no-unused-vars
            var res = [];
            var aLen = arguments.length;
            var i = 0;
            var code;
            while(aLen > i){
                code = +arguments$1[i++];
                if (_toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + " is not a valid code point");
                res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
            }
            return res.join("");
        }
    });
    var fromCodePoint = _core.String.fromCodePoint;
    // This is a generated file. Do not edit.
    var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
    var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
    var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
    var unicode = {
        Space_Separator: Space_Separator,
        ID_Start: ID_Start,
        ID_Continue: ID_Continue
    };
    var util = {
        isSpaceSeparator: function isSpaceSeparator(c) {
            return typeof c === "string" && unicode.Space_Separator.test(c);
        },
        isIdStartChar: function isIdStartChar(c) {
            return typeof c === "string" && (c >= "a" && c <= "z" || c >= "A" && c <= "Z" || c === "$" || c === "_" || unicode.ID_Start.test(c));
        },
        isIdContinueChar: function isIdContinueChar(c) {
            return typeof c === "string" && (c >= "a" && c <= "z" || c >= "A" && c <= "Z" || c >= "0" && c <= "9" || c === "$" || c === "_" || c === "‌" || c === "‍" || unicode.ID_Continue.test(c));
        },
        isDigit: function isDigit(c) {
            return typeof c === "string" && /[0-9]/.test(c);
        },
        isHexDigit: function isHexDigit(c) {
            return typeof c === "string" && /[0-9A-Fa-f]/.test(c);
        }
    };
    var source;
    var parseState;
    var stack;
    var pos;
    var line;
    var column;
    var token;
    var key;
    var root;
    var parse = function parse(text, reviver) {
        source = String(text);
        parseState = "start";
        stack = [];
        pos = 0;
        line = 1;
        column = 0;
        token = undefined;
        key = undefined;
        root = undefined;
        do {
            token = lex();
            // This code is unreachable.
            // if (!parseStates[parseState]) {
            //     throw invalidParseState()
            // }
            parseStates[parseState]();
        }while (token.type !== "eof");
        if (typeof reviver === "function") return internalize({
            "": root
        }, "", reviver);
        return root;
    };
    function internalize(holder, name, reviver) {
        var value = holder[name];
        if (value != null && typeof value === "object") for(var key in value){
            var replacement = internalize(value, key, reviver);
            if (replacement === undefined) delete value[key];
            else value[key] = replacement;
        }
        return reviver.call(holder, name, value);
    }
    var lexState;
    var buffer;
    var doubleQuote;
    var sign;
    var c;
    function lex() {
        lexState = "default";
        buffer = "";
        doubleQuote = false;
        sign = 1;
        for(;;){
            c = peek();
            // This code is unreachable.
            // if (!lexStates[lexState]) {
            //     throw invalidLexState(lexState)
            // }
            var token = lexStates[lexState]();
            if (token) return token;
        }
    }
    function peek() {
        if (source[pos]) return String.fromCodePoint(source.codePointAt(pos));
    }
    function read() {
        var c = peek();
        if (c === "\n") {
            line++;
            column = 0;
        } else if (c) column += c.length;
        else column++;
        if (c) pos += c.length;
        return c;
    }
    var lexStates = {
        default: function default$1() {
            switch(c){
                case "	":
                case "\v":
                case "\f":
                case " ":
                case "\xa0":
                case "\uFEFF":
                case "\n":
                case "\r":
                case "\u2028":
                case "\u2029":
                    read();
                    return;
                case "/":
                    read();
                    lexState = "comment";
                    return;
                case undefined:
                    read();
                    return newToken("eof");
            }
            if (util.isSpaceSeparator(c)) {
                read();
                return;
            }
            // This code is unreachable.
            // if (!lexStates[parseState]) {
            //     throw invalidLexState(parseState)
            // }
            return lexStates[parseState]();
        },
        comment: function comment() {
            switch(c){
                case "*":
                    read();
                    lexState = "multiLineComment";
                    return;
                case "/":
                    read();
                    lexState = "singleLineComment";
                    return;
            }
            throw invalidChar(read());
        },
        multiLineComment: function multiLineComment() {
            switch(c){
                case "*":
                    read();
                    lexState = "multiLineCommentAsterisk";
                    return;
                case undefined:
                    throw invalidChar(read());
            }
            read();
        },
        multiLineCommentAsterisk: function multiLineCommentAsterisk() {
            switch(c){
                case "*":
                    read();
                    return;
                case "/":
                    read();
                    lexState = "default";
                    return;
                case undefined:
                    throw invalidChar(read());
            }
            read();
            lexState = "multiLineComment";
        },
        singleLineComment: function singleLineComment() {
            switch(c){
                case "\n":
                case "\r":
                case "\u2028":
                case "\u2029":
                    read();
                    lexState = "default";
                    return;
                case undefined:
                    read();
                    return newToken("eof");
            }
            read();
        },
        value: function value() {
            switch(c){
                case "{":
                case "[":
                    return newToken("punctuator", read());
                case "n":
                    read();
                    literal("ull");
                    return newToken("null", null);
                case "t":
                    read();
                    literal("rue");
                    return newToken("boolean", true);
                case "f":
                    read();
                    literal("alse");
                    return newToken("boolean", false);
                case "-":
                case "+":
                    if (read() === "-") sign = -1;
                    lexState = "sign";
                    return;
                case ".":
                    buffer = read();
                    lexState = "decimalPointLeading";
                    return;
                case "0":
                    buffer = read();
                    lexState = "zero";
                    return;
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                    buffer = read();
                    lexState = "decimalInteger";
                    return;
                case "I":
                    read();
                    literal("nfinity");
                    return newToken("numeric", Infinity);
                case "N":
                    read();
                    literal("aN");
                    return newToken("numeric", NaN);
                case '"':
                case "'":
                    doubleQuote = read() === '"';
                    buffer = "";
                    lexState = "string";
                    return;
            }
            throw invalidChar(read());
        },
        identifierNameStartEscape: function identifierNameStartEscape() {
            if (c !== "u") throw invalidChar(read());
            read();
            var u = unicodeEscape();
            switch(u){
                case "$":
                case "_":
                    break;
                default:
                    if (!util.isIdStartChar(u)) throw invalidIdentifier();
                    break;
            }
            buffer += u;
            lexState = "identifierName";
        },
        identifierName: function identifierName() {
            switch(c){
                case "$":
                case "_":
                case "‌":
                case "‍":
                    buffer += read();
                    return;
                case "\\":
                    read();
                    lexState = "identifierNameEscape";
                    return;
            }
            if (util.isIdContinueChar(c)) {
                buffer += read();
                return;
            }
            return newToken("identifier", buffer);
        },
        identifierNameEscape: function identifierNameEscape() {
            if (c !== "u") throw invalidChar(read());
            read();
            var u = unicodeEscape();
            switch(u){
                case "$":
                case "_":
                case "‌":
                case "‍":
                    break;
                default:
                    if (!util.isIdContinueChar(u)) throw invalidIdentifier();
                    break;
            }
            buffer += u;
            lexState = "identifierName";
        },
        sign: function sign$1() {
            switch(c){
                case ".":
                    buffer = read();
                    lexState = "decimalPointLeading";
                    return;
                case "0":
                    buffer = read();
                    lexState = "zero";
                    return;
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                    buffer = read();
                    lexState = "decimalInteger";
                    return;
                case "I":
                    read();
                    literal("nfinity");
                    return newToken("numeric", sign * Infinity);
                case "N":
                    read();
                    literal("aN");
                    return newToken("numeric", NaN);
            }
            throw invalidChar(read());
        },
        zero: function zero() {
            switch(c){
                case ".":
                    buffer += read();
                    lexState = "decimalPoint";
                    return;
                case "e":
                case "E":
                    buffer += read();
                    lexState = "decimalExponent";
                    return;
                case "x":
                case "X":
                    buffer += read();
                    lexState = "hexadecimal";
                    return;
            }
            return newToken("numeric", sign * 0);
        },
        decimalInteger: function decimalInteger() {
            switch(c){
                case ".":
                    buffer += read();
                    lexState = "decimalPoint";
                    return;
                case "e":
                case "E":
                    buffer += read();
                    lexState = "decimalExponent";
                    return;
            }
            if (util.isDigit(c)) {
                buffer += read();
                return;
            }
            return newToken("numeric", sign * Number(buffer));
        },
        decimalPointLeading: function decimalPointLeading() {
            if (util.isDigit(c)) {
                buffer += read();
                lexState = "decimalFraction";
                return;
            }
            throw invalidChar(read());
        },
        decimalPoint: function decimalPoint() {
            switch(c){
                case "e":
                case "E":
                    buffer += read();
                    lexState = "decimalExponent";
                    return;
            }
            if (util.isDigit(c)) {
                buffer += read();
                lexState = "decimalFraction";
                return;
            }
            return newToken("numeric", sign * Number(buffer));
        },
        decimalFraction: function decimalFraction() {
            switch(c){
                case "e":
                case "E":
                    buffer += read();
                    lexState = "decimalExponent";
                    return;
            }
            if (util.isDigit(c)) {
                buffer += read();
                return;
            }
            return newToken("numeric", sign * Number(buffer));
        },
        decimalExponent: function decimalExponent() {
            switch(c){
                case "+":
                case "-":
                    buffer += read();
                    lexState = "decimalExponentSign";
                    return;
            }
            if (util.isDigit(c)) {
                buffer += read();
                lexState = "decimalExponentInteger";
                return;
            }
            throw invalidChar(read());
        },
        decimalExponentSign: function decimalExponentSign() {
            if (util.isDigit(c)) {
                buffer += read();
                lexState = "decimalExponentInteger";
                return;
            }
            throw invalidChar(read());
        },
        decimalExponentInteger: function decimalExponentInteger() {
            if (util.isDigit(c)) {
                buffer += read();
                return;
            }
            return newToken("numeric", sign * Number(buffer));
        },
        hexadecimal: function hexadecimal() {
            if (util.isHexDigit(c)) {
                buffer += read();
                lexState = "hexadecimalInteger";
                return;
            }
            throw invalidChar(read());
        },
        hexadecimalInteger: function hexadecimalInteger() {
            if (util.isHexDigit(c)) {
                buffer += read();
                return;
            }
            return newToken("numeric", sign * Number(buffer));
        },
        string: function string() {
            switch(c){
                case "\\":
                    read();
                    buffer += escape();
                    return;
                case '"':
                    if (doubleQuote) {
                        read();
                        return newToken("string", buffer);
                    }
                    buffer += read();
                    return;
                case "'":
                    if (!doubleQuote) {
                        read();
                        return newToken("string", buffer);
                    }
                    buffer += read();
                    return;
                case "\n":
                case "\r":
                    throw invalidChar(read());
                case "\u2028":
                case "\u2029":
                    separatorChar(c);
                    break;
                case undefined:
                    throw invalidChar(read());
            }
            buffer += read();
        },
        start: function start() {
            switch(c){
                case "{":
                case "[":
                    return newToken("punctuator", read());
            }
            lexState = "value";
        },
        beforePropertyName: function beforePropertyName() {
            switch(c){
                case "$":
                case "_":
                    buffer = read();
                    lexState = "identifierName";
                    return;
                case "\\":
                    read();
                    lexState = "identifierNameStartEscape";
                    return;
                case "}":
                    return newToken("punctuator", read());
                case '"':
                case "'":
                    doubleQuote = read() === '"';
                    lexState = "string";
                    return;
            }
            if (util.isIdStartChar(c)) {
                buffer += read();
                lexState = "identifierName";
                return;
            }
            throw invalidChar(read());
        },
        afterPropertyName: function afterPropertyName() {
            if (c === ":") return newToken("punctuator", read());
            throw invalidChar(read());
        },
        beforePropertyValue: function beforePropertyValue() {
            lexState = "value";
        },
        afterPropertyValue: function afterPropertyValue() {
            switch(c){
                case ",":
                case "}":
                    return newToken("punctuator", read());
            }
            throw invalidChar(read());
        },
        beforeArrayValue: function beforeArrayValue() {
            if (c === "]") return newToken("punctuator", read());
            lexState = "value";
        },
        afterArrayValue: function afterArrayValue() {
            switch(c){
                case ",":
                case "]":
                    return newToken("punctuator", read());
            }
            throw invalidChar(read());
        },
        end: function end() {
            // This code is unreachable since it's handled by the default lexState.
            // if (c === undefined) {
            //     read()
            //     return newToken('eof')
            // }
            throw invalidChar(read());
        }
    };
    function newToken(type, value) {
        return {
            type: type,
            value: value,
            line: line,
            column: column
        };
    }
    function literal(s) {
        for(var i = 0, list = s; i < list.length; i += 1){
            var c = list[i];
            var p = peek();
            if (p !== c) throw invalidChar(read());
            read();
        }
    }
    function escape() {
        var c = peek();
        switch(c){
            case "b":
                read();
                return "\b";
            case "f":
                read();
                return "\f";
            case "n":
                read();
                return "\n";
            case "r":
                read();
                return "\r";
            case "t":
                read();
                return "	";
            case "v":
                read();
                return "\v";
            case "0":
                read();
                if (util.isDigit(peek())) throw invalidChar(read());
                return "\0";
            case "x":
                read();
                return hexEscape();
            case "u":
                read();
                return unicodeEscape();
            case "\n":
            case "\u2028":
            case "\u2029":
                read();
                return "";
            case "\r":
                read();
                if (peek() === "\n") read();
                return "";
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                throw invalidChar(read());
            case undefined:
                throw invalidChar(read());
        }
        return read();
    }
    function hexEscape() {
        var buffer = "";
        var c = peek();
        if (!util.isHexDigit(c)) throw invalidChar(read());
        buffer += read();
        c = peek();
        if (!util.isHexDigit(c)) throw invalidChar(read());
        buffer += read();
        return String.fromCodePoint(parseInt(buffer, 16));
    }
    function unicodeEscape() {
        var buffer = "";
        var count = 4;
        while(count-- > 0){
            var c = peek();
            if (!util.isHexDigit(c)) throw invalidChar(read());
            buffer += read();
        }
        return String.fromCodePoint(parseInt(buffer, 16));
    }
    var parseStates = {
        start: function start() {
            if (token.type === "eof") throw invalidEOF();
            push();
        },
        beforePropertyName: function beforePropertyName() {
            switch(token.type){
                case "identifier":
                case "string":
                    key = token.value;
                    parseState = "afterPropertyName";
                    return;
                case "punctuator":
                    // This code is unreachable since it's handled by the lexState.
                    // if (token.value !== '}') {
                    //     throw invalidToken()
                    // }
                    pop();
                    return;
                case "eof":
                    throw invalidEOF();
            }
        // This code is unreachable since it's handled by the lexState.
        // throw invalidToken()
        },
        afterPropertyName: function afterPropertyName() {
            // This code is unreachable since it's handled by the lexState.
            // if (token.type !== 'punctuator' || token.value !== ':') {
            //     throw invalidToken()
            // }
            if (token.type === "eof") throw invalidEOF();
            parseState = "beforePropertyValue";
        },
        beforePropertyValue: function beforePropertyValue() {
            if (token.type === "eof") throw invalidEOF();
            push();
        },
        beforeArrayValue: function beforeArrayValue() {
            if (token.type === "eof") throw invalidEOF();
            if (token.type === "punctuator" && token.value === "]") {
                pop();
                return;
            }
            push();
        },
        afterPropertyValue: function afterPropertyValue() {
            // This code is unreachable since it's handled by the lexState.
            // if (token.type !== 'punctuator') {
            //     throw invalidToken()
            // }
            if (token.type === "eof") throw invalidEOF();
            switch(token.value){
                case ",":
                    parseState = "beforePropertyName";
                    return;
                case "}":
                    pop();
            }
        // This code is unreachable since it's handled by the lexState.
        // throw invalidToken()
        },
        afterArrayValue: function afterArrayValue() {
            // This code is unreachable since it's handled by the lexState.
            // if (token.type !== 'punctuator') {
            //     throw invalidToken()
            // }
            if (token.type === "eof") throw invalidEOF();
            switch(token.value){
                case ",":
                    parseState = "beforeArrayValue";
                    return;
                case "]":
                    pop();
            }
        // This code is unreachable since it's handled by the lexState.
        // throw invalidToken()
        },
        end: function end() {
        // This code is unreachable since it's handled by the lexState.
        // if (token.type !== 'eof') {
        //     throw invalidToken()
        // }
        }
    };
    function push() {
        var value;
        switch(token.type){
            case "punctuator":
                switch(token.value){
                    case "{":
                        value = {};
                        break;
                    case "[":
                        value = [];
                        break;
                }
                break;
            case "null":
            case "boolean":
            case "numeric":
            case "string":
                value = token.value;
                break;
        }
        if (root === undefined) root = value;
        else {
            var parent = stack[stack.length - 1];
            if (Array.isArray(parent)) parent.push(value);
            else parent[key] = value;
        }
        if (value !== null && typeof value === "object") {
            stack.push(value);
            if (Array.isArray(value)) parseState = "beforeArrayValue";
            else parseState = "beforePropertyName";
        } else {
            var current = stack[stack.length - 1];
            if (current == null) parseState = "end";
            else if (Array.isArray(current)) parseState = "afterArrayValue";
            else parseState = "afterPropertyValue";
        }
    }
    function pop() {
        stack.pop();
        var current = stack[stack.length - 1];
        if (current == null) parseState = "end";
        else if (Array.isArray(current)) parseState = "afterArrayValue";
        else parseState = "afterPropertyValue";
    }
    // This code is unreachable.
    // function invalidParseState () {
    //     return new Error(`JSON5: invalid parse state '${parseState}'`)
    // }
    // This code is unreachable.
    // function invalidLexState (state) {
    //     return new Error(`JSON5: invalid lex state '${state}'`)
    // }
    function invalidChar(c) {
        if (c === undefined) return syntaxError("JSON5: invalid end of input at " + line + ":" + column);
        return syntaxError("JSON5: invalid character '" + formatChar(c) + "' at " + line + ":" + column);
    }
    function invalidEOF() {
        return syntaxError("JSON5: invalid end of input at " + line + ":" + column);
    }
    // This code is unreachable.
    // function invalidToken () {
    //     if (token.type === 'eof') {
    //         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)
    //     }
    //     const c = String.fromCodePoint(token.value.codePointAt(0))
    //     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)
    // }
    function invalidIdentifier() {
        column -= 5;
        return syntaxError("JSON5: invalid identifier character at " + line + ":" + column);
    }
    function separatorChar(c) {
        console.warn("JSON5: '" + formatChar(c) + "' in strings is not valid ECMAScript; consider escaping");
    }
    function formatChar(c) {
        var replacements = {
            "'": "\\'",
            '"': '\\"',
            "\\": "\\\\",
            "\b": "\\b",
            "\f": "\\f",
            "\n": "\\n",
            "\r": "\\r",
            "	": "\\t",
            "\v": "\\v",
            "\0": "\\0",
            "\u2028": "\\u2028",
            "\u2029": "\\u2029"
        };
        if (replacements[c]) return replacements[c];
        if (c < " ") {
            var hexString = c.charCodeAt(0).toString(16);
            return "\\x" + ("00" + hexString).substring(hexString.length);
        }
        return c;
    }
    function syntaxError(message) {
        var err = new SyntaxError(message);
        err.lineNumber = line;
        err.columnNumber = column;
        return err;
    }
    var stringify = function stringify(value, replacer, space) {
        var stack = [];
        var indent = "";
        var propertyList;
        var replacerFunc;
        var gap = "";
        var quote;
        if (replacer != null && typeof replacer === "object" && !Array.isArray(replacer)) {
            space = replacer.space;
            quote = replacer.quote;
            replacer = replacer.replacer;
        }
        if (typeof replacer === "function") replacerFunc = replacer;
        else if (Array.isArray(replacer)) {
            propertyList = [];
            for(var i = 0, list = replacer; i < list.length; i += 1){
                var v = list[i];
                var item = void 0;
                if (typeof v === "string") item = v;
                else if (typeof v === "number" || v instanceof String || v instanceof Number) item = String(v);
                if (item !== undefined && propertyList.indexOf(item) < 0) propertyList.push(item);
            }
        }
        if (space instanceof Number) space = Number(space);
        else if (space instanceof String) space = String(space);
        if (typeof space === "number") {
            if (space > 0) {
                space = Math.min(10, Math.floor(space));
                gap = "          ".substr(0, space);
            }
        } else if (typeof space === "string") gap = space.substr(0, 10);
        return serializeProperty("", {
            "": value
        });
        function serializeProperty(key, holder) {
            var value = holder[key];
            if (value != null) {
                if (typeof value.toJSON5 === "function") value = value.toJSON5(key);
                else if (typeof value.toJSON === "function") value = value.toJSON(key);
            }
            if (replacerFunc) value = replacerFunc.call(holder, key, value);
            if (value instanceof Number) value = Number(value);
            else if (value instanceof String) value = String(value);
            else if (value instanceof Boolean) value = value.valueOf();
            switch(value){
                case null:
                    return "null";
                case true:
                    return "true";
                case false:
                    return "false";
            }
            if (typeof value === "string") return quoteString(value, false);
            if (typeof value === "number") return String(value);
            if (typeof value === "object") return Array.isArray(value) ? serializeArray(value) : serializeObject(value);
            return undefined;
        }
        function quoteString(value) {
            var quotes = {
                "'": 0.1,
                '"': 0.2
            };
            var replacements = {
                "'": "\\'",
                '"': '\\"',
                "\\": "\\\\",
                "\b": "\\b",
                "\f": "\\f",
                "\n": "\\n",
                "\r": "\\r",
                "	": "\\t",
                "\v": "\\v",
                "\0": "\\0",
                "\u2028": "\\u2028",
                "\u2029": "\\u2029"
            };
            var product = "";
            for(var i = 0; i < value.length; i++){
                var c = value[i];
                switch(c){
                    case "'":
                    case '"':
                        quotes[c]++;
                        product += c;
                        continue;
                    case "\0":
                        if (util.isDigit(value[i + 1])) {
                            product += "\\x00";
                            continue;
                        }
                }
                if (replacements[c]) {
                    product += replacements[c];
                    continue;
                }
                if (c < " ") {
                    var hexString = c.charCodeAt(0).toString(16);
                    product += "\\x" + ("00" + hexString).substring(hexString.length);
                    continue;
                }
                product += c;
            }
            var quoteChar = quote || Object.keys(quotes).reduce(function(a, b) {
                return quotes[a] < quotes[b] ? a : b;
            });
            product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]);
            return quoteChar + product + quoteChar;
        }
        function serializeObject(value) {
            if (stack.indexOf(value) >= 0) throw TypeError("Converting circular structure to JSON5");
            stack.push(value);
            var stepback = indent;
            indent = indent + gap;
            var keys = propertyList || Object.keys(value);
            var partial = [];
            for(var i = 0, list = keys; i < list.length; i += 1){
                var key = list[i];
                var propertyString = serializeProperty(key, value);
                if (propertyString !== undefined) {
                    var member = serializeKey(key) + ":";
                    if (gap !== "") member += " ";
                    member += propertyString;
                    partial.push(member);
                }
            }
            var final;
            if (partial.length === 0) final = "{}";
            else {
                var properties;
                if (gap === "") {
                    properties = partial.join(",");
                    final = "{" + properties + "}";
                } else {
                    var separator = ",\n" + indent;
                    properties = partial.join(separator);
                    final = "{\n" + indent + properties + ",\n" + stepback + "}";
                }
            }
            stack.pop();
            indent = stepback;
            return final;
        }
        function serializeKey(key) {
            if (key.length === 0) return quoteString(key, true);
            var firstChar = String.fromCodePoint(key.codePointAt(0));
            if (!util.isIdStartChar(firstChar)) return quoteString(key, true);
            for(var i = firstChar.length; i < key.length; i++){
                if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) return quoteString(key, true);
            }
            return key;
        }
        function serializeArray(value) {
            if (stack.indexOf(value) >= 0) throw TypeError("Converting circular structure to JSON5");
            stack.push(value);
            var stepback = indent;
            indent = indent + gap;
            var partial = [];
            for(var i = 0; i < value.length; i++){
                var propertyString = serializeProperty(String(i), value);
                partial.push(propertyString !== undefined ? propertyString : "null");
            }
            var final;
            if (partial.length === 0) final = "[]";
            else if (gap === "") {
                var properties = partial.join(",");
                final = "[" + properties + "]";
            } else {
                var separator = ",\n" + indent;
                var properties$1 = partial.join(separator);
                final = "[\n" + indent + properties$1 + ",\n" + stepback + "]";
            }
            stack.pop();
            indent = stepback;
            return final;
        }
    };
    var JSON5 = {
        parse: parse,
        stringify: stringify
    };
    var lib = JSON5;
    var es5 = lib;
    return es5;
});

},{}],"5w3wE":[function(require,module,exports) {
/* @license
Papa Parse
v5.2.0
https://github.com/mholt/PapaParse
License: MIT
*/ !function(e, t) {
    "function" == typeof define && define.amd ? define([], t) : module.exports = t();
}(this, function s() {
    "use strict";
    var f = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== f ? f : {};
    var n = !f.document && !!f.postMessage, o = n && /blob:/i.test((f.location || {}).protocol), a = {}, h = 0, b = {
        parse: function(e, t) {
            var i = (t = t || {}).dynamicTyping || !1;
            U(i) && (t.dynamicTypingFunction = i, i = {});
            if (t.dynamicTyping = i, t.transform = !!U(t.transform) && t.transform, t.worker && b.WORKERS_SUPPORTED) {
                var r = function() {
                    if (!b.WORKERS_SUPPORTED) return !1;
                    var e = (i = f.URL || f.webkitURL || null, r = s.toString(), b.BLOB_URL || (b.BLOB_URL = i.createObjectURL(new Blob([
                        "(",
                        r,
                        ")();"
                    ], {
                        type: "text/javascript"
                    })))), t = new f.Worker(e);
                    var i, r;
                    return t.onmessage = _, t.id = h++, a[t.id] = t;
                }();
                return r.userStep = t.step, r.userChunk = t.chunk, r.userComplete = t.complete, r.userError = t.error, t.step = U(t.step), t.chunk = U(t.chunk), t.complete = U(t.complete), t.error = U(t.error), delete t.worker, void r.postMessage({
                    input: e,
                    config: t,
                    workerId: r.id
                });
            }
            var n = null;
            b.NODE_STREAM_INPUT, "string" == typeof e ? n = t.download ? new l(t) : new p(t) : !0 === e.readable && U(e.read) && U(e.on) ? n = new g(t) : (f.File && e instanceof File || e instanceof Object) && (n = new c(t));
            return n.stream(e);
        },
        unparse: function(e, t) {
            var n = !1, _ = !0, m = ",", v = "\r\n", s = '"', a = s + s, i = !1, r = null;
            !function() {
                if ("object" != typeof t) return;
                "string" != typeof t.delimiter || b.BAD_DELIMITERS.filter(function(e) {
                    return -1 !== t.delimiter.indexOf(e);
                }).length || (m = t.delimiter);
                ("boolean" == typeof t.quotes || "function" == typeof t.quotes || Array.isArray(t.quotes)) && (n = t.quotes);
                "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (i = t.skipEmptyLines);
                "string" == typeof t.newline && (v = t.newline);
                "string" == typeof t.quoteChar && (s = t.quoteChar);
                "boolean" == typeof t.header && (_ = t.header);
                if (Array.isArray(t.columns)) {
                    if (0 === t.columns.length) throw new Error("Option columns is empty");
                    r = t.columns;
                }
                void 0 !== t.escapeChar && (a = t.escapeChar + s);
            }();
            var o = new RegExp(q(s), "g");
            "string" == typeof e && (e = JSON.parse(e));
            if (Array.isArray(e)) {
                if (!e.length || Array.isArray(e[0])) return u(null, e, i);
                if ("object" == typeof e[0]) return u(r || h(e[0]), e, i);
            } else if ("object" == typeof e) return "string" == typeof e.data && (e.data = JSON.parse(e.data)), Array.isArray(e.data) && (e.fields || (e.fields = e.meta && e.meta.fields), e.fields || (e.fields = Array.isArray(e.data[0]) ? e.fields : h(e.data[0])), Array.isArray(e.data[0]) || "object" == typeof e.data[0] || (e.data = [
                e.data
            ])), u(e.fields || [], e.data || [], i);
            throw new Error("Unable to serialize unrecognized input");
            function h(e) {
                if ("object" != typeof e) return [];
                var t = [];
                for(var i in e)t.push(i);
                return t;
            }
            function u(e, t, i) {
                var r = "";
                "string" == typeof e && (e = JSON.parse(e)), "string" == typeof t && (t = JSON.parse(t));
                var n = Array.isArray(e) && 0 < e.length, s = !Array.isArray(t[0]);
                if (n && _) {
                    for(var a = 0; a < e.length; a++)0 < a && (r += m), r += y(e[a], a);
                    0 < t.length && (r += v);
                }
                for(var o = 0; o < t.length; o++){
                    var h = n ? e.length : t[o].length, u = !1, f = n ? 0 === Object.keys(t[o]).length : 0 === t[o].length;
                    if (i && !n && (u = "greedy" === i ? "" === t[o].join("").trim() : 1 === t[o].length && 0 === t[o][0].length), "greedy" === i && n) {
                        for(var d = [], l = 0; l < h; l++){
                            var c = s ? e[l] : l;
                            d.push(t[o][c]);
                        }
                        u = "" === d.join("").trim();
                    }
                    if (!u) {
                        for(var p = 0; p < h; p++){
                            0 < p && !f && (r += m);
                            var g = n && s ? e[p] : p;
                            r += y(t[o][g], p);
                        }
                        o < t.length - 1 && (!i || 0 < h && !f) && (r += v);
                    }
                }
                return r;
            }
            function y(e, t) {
                if (null == e) return "";
                if (e.constructor === Date) return JSON.stringify(e).slice(1, 25);
                var i = e.toString().replace(o, a), r = "boolean" == typeof n && n || "function" == typeof n && n(e, t) || Array.isArray(n) && n[t] || function(e, t) {
                    for(var i = 0; i < t.length; i++)if (-1 < e.indexOf(t[i])) return !0;
                    return !1;
                }(i, b.BAD_DELIMITERS) || -1 < i.indexOf(m) || " " === i.charAt(0) || " " === i.charAt(i.length - 1);
                return r ? s + i + s : i;
            }
        }
    };
    if (b.RECORD_SEP = String.fromCharCode(30), b.UNIT_SEP = String.fromCharCode(31), b.BYTE_ORDER_MARK = "\uFEFF", b.BAD_DELIMITERS = [
        "\r",
        "\n",
        '"',
        b.BYTE_ORDER_MARK
    ], b.WORKERS_SUPPORTED = !n && !!f.Worker, b.NODE_STREAM_INPUT = 1, b.LocalChunkSize = 10485760, b.RemoteChunkSize = 5242880, b.DefaultDelimiter = ",", b.Parser = w, b.ParserHandle = i, b.NetworkStreamer = l, b.FileStreamer = c, b.StringStreamer = p, b.ReadableStreamStreamer = g, f.jQuery) {
        var d = f.jQuery;
        d.fn.parse = function(o) {
            var i = o.config || {}, h = [];
            return this.each(function(e) {
                if (!("INPUT" === d(this).prop("tagName").toUpperCase() && "file" === d(this).attr("type").toLowerCase() && f.FileReader) || !this.files || 0 === this.files.length) return !0;
                for(var t = 0; t < this.files.length; t++)h.push({
                    file: this.files[t],
                    inputElem: this,
                    instanceConfig: d.extend({}, i)
                });
            }), e(), this;
            function e() {
                if (0 !== h.length) {
                    var e, t, i, r, n = h[0];
                    if (U(o.before)) {
                        var s = o.before(n.file, n.inputElem);
                        if ("object" == typeof s) {
                            if ("abort" === s.action) return e = "AbortError", t = n.file, i = n.inputElem, r = s.reason, void (U(o.error) && o.error({
                                name: e
                            }, t, i, r));
                            if ("skip" === s.action) return void u();
                            "object" == typeof s.config && (n.instanceConfig = d.extend(n.instanceConfig, s.config));
                        } else if ("skip" === s) return void u();
                    }
                    var a = n.instanceConfig.complete;
                    n.instanceConfig.complete = function(e) {
                        U(a) && a(e, n.file, n.inputElem), u();
                    }, b.parse(n.file, n.instanceConfig);
                } else U(o.complete) && o.complete();
            }
            function u() {
                h.splice(0, 1), e();
            }
        };
    }
    function u(e) {
        this._handle = null, this._finished = !1, this._completed = !1, this._halted = !1, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = !0, this._completeResults = {
            data: [],
            errors: [],
            meta: {}
        }, (function(e) {
            var t = E(e);
            t.chunkSize = parseInt(t.chunkSize), e.step || e.chunk || (t.chunkSize = null);
            this._handle = new i(t), (this._handle.streamer = this)._config = t;
        }).call(this, e), this.parseChunk = function(e, t) {
            if (this.isFirstChunk && U(this._config.beforeFirstChunk)) {
                var i = this._config.beforeFirstChunk(e);
                void 0 !== i && (e = i);
            }
            this.isFirstChunk = !1, this._halted = !1;
            var r = this._partialLine + e;
            this._partialLine = "";
            var n = this._handle.parse(r, this._baseIndex, !this._finished);
            if (!this._handle.paused() && !this._handle.aborted()) {
                var s = n.meta.cursor;
                this._finished || (this._partialLine = r.substring(s - this._baseIndex), this._baseIndex = s), n && n.data && (this._rowCount += n.data.length);
                var a = this._finished || this._config.preview && this._rowCount >= this._config.preview;
                if (o) f.postMessage({
                    results: n,
                    workerId: b.WORKER_ID,
                    finished: a
                });
                else if (U(this._config.chunk) && !t) {
                    if (this._config.chunk(n, this._handle), this._handle.paused() || this._handle.aborted()) return void (this._halted = !0);
                    n = void 0, this._completeResults = void 0;
                }
                return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(n.data), this._completeResults.errors = this._completeResults.errors.concat(n.errors), this._completeResults.meta = n.meta), this._completed || !a || !U(this._config.complete) || n && n.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = !0), a || n && n.meta.paused || this._nextChunk(), n;
            }
            this._halted = !0;
        }, this._sendError = function(e) {
            U(this._config.error) ? this._config.error(e) : o && this._config.error && f.postMessage({
                workerId: b.WORKER_ID,
                error: e,
                finished: !1
            });
        };
    }
    function l(e) {
        var r;
        (e = e || {}).chunkSize || (e.chunkSize = b.RemoteChunkSize), u.call(this, e), this._nextChunk = n ? function() {
            this._readChunk(), this._chunkLoaded();
        } : function() {
            this._readChunk();
        }, this.stream = function(e) {
            this._input = e, this._nextChunk();
        }, this._readChunk = function() {
            if (this._finished) this._chunkLoaded();
            else {
                if (r = new XMLHttpRequest, this._config.withCredentials && (r.withCredentials = this._config.withCredentials), n || (r.onload = y(this._chunkLoaded, this), r.onerror = y(this._chunkError, this)), r.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !n), this._config.downloadRequestHeaders) {
                    var e = this._config.downloadRequestHeaders;
                    for(var t in e)r.setRequestHeader(t, e[t]);
                }
                if (this._config.chunkSize) {
                    var i = this._start + this._config.chunkSize - 1;
                    r.setRequestHeader("Range", "bytes=" + this._start + "-" + i);
                }
                try {
                    r.send(this._config.downloadRequestBody);
                } catch (e1) {
                    this._chunkError(e1.message);
                }
                n && 0 === r.status && this._chunkError();
            }
        }, this._chunkLoaded = function() {
            4 === r.readyState && (r.status < 200 || 400 <= r.status ? this._chunkError() : (this._start += this._config.chunkSize ? this._config.chunkSize : r.responseText.length, this._finished = !this._config.chunkSize || this._start >= function(e) {
                var t = e.getResponseHeader("Content-Range");
                if (null === t) return -1;
                return parseInt(t.substring(t.lastIndexOf("/") + 1));
            }(r), this.parseChunk(r.responseText)));
        }, this._chunkError = function(e) {
            var t = r.statusText || e;
            this._sendError(new Error(t));
        };
    }
    function c(e) {
        var r, n;
        (e = e || {}).chunkSize || (e.chunkSize = b.LocalChunkSize), u.call(this, e);
        var s = "undefined" != typeof FileReader;
        this.stream = function(e) {
            this._input = e, n = e.slice || e.webkitSlice || e.mozSlice, s ? ((r = new FileReader).onload = y(this._chunkLoaded, this), r.onerror = y(this._chunkError, this)) : r = new FileReaderSync, this._nextChunk();
        }, this._nextChunk = function() {
            this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
        }, this._readChunk = function() {
            var e = this._input;
            if (this._config.chunkSize) {
                var t = Math.min(this._start + this._config.chunkSize, this._input.size);
                e = n.call(e, this._start, t);
            }
            var i = r.readAsText(e, this._config.encoding);
            s || this._chunkLoaded({
                target: {
                    result: i
                }
            });
        }, this._chunkLoaded = function(e) {
            this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e.target.result);
        }, this._chunkError = function() {
            this._sendError(r.error);
        };
    }
    function p(e) {
        var i;
        u.call(this, e = e || {}), this.stream = function(e) {
            return i = e, this._nextChunk();
        }, this._nextChunk = function() {
            if (!this._finished) {
                var e, t = this._config.chunkSize;
                return t ? (e = i.substring(0, t), i = i.substring(t)) : (e = i, i = ""), this._finished = !i, this.parseChunk(e);
            }
        };
    }
    function g(e) {
        u.call(this, e = e || {});
        var t = [], i = !0, r = !1;
        this.pause = function() {
            u.prototype.pause.apply(this, arguments), this._input.pause();
        }, this.resume = function() {
            u.prototype.resume.apply(this, arguments), this._input.resume();
        }, this.stream = function(e) {
            this._input = e, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
        }, this._checkIsFinished = function() {
            r && 1 === t.length && (this._finished = !0);
        }, this._nextChunk = function() {
            this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : i = !0;
        }, this._streamData = y(function(e) {
            try {
                t.push("string" == typeof e ? e : e.toString(this._config.encoding)), i && (i = !1, this._checkIsFinished(), this.parseChunk(t.shift()));
            } catch (e1) {
                this._streamError(e1);
            }
        }, this), this._streamError = y(function(e) {
            this._streamCleanUp(), this._sendError(e);
        }, this), this._streamEnd = y(function() {
            this._streamCleanUp(), r = !0, this._streamData("");
        }, this), this._streamCleanUp = y(function() {
            this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
        }, this);
    }
    function i(m) {
        var a, o, h, r = Math.pow(2, 53), n = -r, s = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)(e[-+]?\d+)?\s*$/, u = /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/, t = this, i = 0, f = 0, d = !1, e = !1, l = [], c = {
            data: [],
            errors: [],
            meta: {}
        };
        if (U(m.step)) {
            var p = m.step;
            m.step = function(e) {
                if (c = e, _()) g();
                else {
                    if (g(), 0 === c.data.length) return;
                    i += e.data.length, m.preview && i > m.preview ? o.abort() : (c.data = c.data[0], p(c, t));
                }
            };
        }
        function v(e) {
            return "greedy" === m.skipEmptyLines ? "" === e.join("").trim() : 1 === e.length && 0 === e[0].length;
        }
        function g() {
            if (c && h && (k("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + b.DefaultDelimiter + "'"), h = !1), m.skipEmptyLines) for(var e = 0; e < c.data.length; e++)v(c.data[e]) && c.data.splice(e--, 1);
            return _() && function() {
                if (!c) return;
                function e(e) {
                    U(m.transformHeader) && (e = m.transformHeader(e)), l.push(e);
                }
                if (Array.isArray(c.data[0])) {
                    for(var t = 0; _() && t < c.data.length; t++)c.data[t].forEach(e);
                    c.data.splice(0, 1);
                } else c.data.forEach(e);
            }(), function() {
                if (!c || !m.header && !m.dynamicTyping && !m.transform) return c;
                function e(e, t) {
                    var i, r = m.header ? {} : [];
                    for(i = 0; i < e.length; i++){
                        var n = i, s = e[i];
                        m.header && (n = i >= l.length ? "__parsed_extra" : l[i]), m.transform && (s = m.transform(s, n)), s = y(n, s), "__parsed_extra" === n ? (r[n] = r[n] || [], r[n].push(s)) : r[n] = s;
                    }
                    return m.header && (i > l.length ? k("FieldMismatch", "TooManyFields", "Too many fields: expected " + l.length + " fields but parsed " + i, f + t) : i < l.length && k("FieldMismatch", "TooFewFields", "Too few fields: expected " + l.length + " fields but parsed " + i, f + t)), r;
                }
                var t = 1;
                !c.data.length || Array.isArray(c.data[0]) ? (c.data = c.data.map(e), t = c.data.length) : c.data = e(c.data, 0);
                m.header && c.meta && (c.meta.fields = l);
                return f += t, c;
            }();
        }
        function _() {
            return m.header && 0 === l.length;
        }
        function y(e, t) {
            var i;
            return i = e, m.dynamicTypingFunction && void 0 === m.dynamicTyping[i] && (m.dynamicTyping[i] = m.dynamicTypingFunction(i)), !0 === (m.dynamicTyping[i] || m.dynamicTyping) ? "true" === t || "TRUE" === t || "false" !== t && "FALSE" !== t && (function(e) {
                if (s.test(e)) {
                    var t = parseFloat(e);
                    if (n < t && t < r) return !0;
                }
                return !1;
            }(t) ? parseFloat(t) : u.test(t) ? new Date(t) : "" === t ? null : t) : t;
        }
        function k(e, t, i, r) {
            var n = {
                type: e,
                code: t,
                message: i
            };
            void 0 !== r && (n.row = r), c.errors.push(n);
        }
        this.parse = function(e, t, i) {
            var r = m.quoteChar || '"';
            if (m.newline || (m.newline = function(e, t) {
                e = e.substring(0, 1048576);
                var i = new RegExp(q(t) + "([^]*?)" + q(t), "gm"), r = (e = e.replace(i, "")).split("\r"), n = e.split("\n"), s = 1 < n.length && n[0].length < r[0].length;
                if (1 === r.length || s) return "\n";
                for(var a = 0, o = 0; o < r.length; o++)"\n" === r[o][0] && a++;
                return a >= r.length / 2 ? "\r\n" : "\r";
            }(e, r)), h = !1, m.delimiter) U(m.delimiter) && (m.delimiter = m.delimiter(e), c.meta.delimiter = m.delimiter);
            else {
                var n = function(e, t, i, r, n) {
                    var s, a, o, h;
                    n = n || [
                        ",",
                        "	",
                        "|",
                        ";",
                        b.RECORD_SEP,
                        b.UNIT_SEP
                    ];
                    for(var u = 0; u < n.length; u++){
                        var f = n[u], d = 0, l = 0, c = 0;
                        o = void 0;
                        for(var p = new w({
                            comments: r,
                            delimiter: f,
                            newline: t,
                            preview: 10
                        }).parse(e), g = 0; g < p.data.length; g++)if (i && v(p.data[g])) c++;
                        else {
                            var _ = p.data[g].length;
                            l += _, void 0 !== o ? 0 < _ && (d += Math.abs(_ - o), o = _) : o = _;
                        }
                        0 < p.data.length && (l /= p.data.length - c), (void 0 === a || d <= a) && (void 0 === h || h < l) && 1.99 < l && (a = d, s = f, h = l);
                    }
                    return {
                        successful: !!(m.delimiter = s),
                        bestDelimiter: s
                    };
                }(e, m.newline, m.skipEmptyLines, m.comments, m.delimitersToGuess);
                n.successful ? m.delimiter = n.bestDelimiter : (h = !0, m.delimiter = b.DefaultDelimiter), c.meta.delimiter = m.delimiter;
            }
            var s = E(m);
            return m.preview && m.header && s.preview++, a = e, o = new w(s), c = o.parse(a, t, i), g(), d ? {
                meta: {
                    paused: !0
                }
            } : c || {
                meta: {
                    paused: !1
                }
            };
        }, this.paused = function() {
            return d;
        }, this.pause = function() {
            d = !0, o.abort(), a = U(m.chunk) ? "" : a.substring(o.getCharIndex());
        }, this.resume = function() {
            t.streamer._halted ? (d = !1, t.streamer.parseChunk(a, !0)) : setTimeout(t.resume, 3);
        }, this.aborted = function() {
            return e;
        }, this.abort = function() {
            e = !0, o.abort(), c.meta.aborted = !0, U(m.complete) && m.complete(c), a = "";
        };
    }
    function q(e) {
        return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    function w(e) {
        var O, D = (e = e || {}).delimiter, I = e.newline, T = e.comments, A = e.step, L = e.preview, F = e.fastMode, z = O = void 0 === e.quoteChar ? '"' : e.quoteChar;
        if (void 0 !== e.escapeChar && (z = e.escapeChar), ("string" != typeof D || -1 < b.BAD_DELIMITERS.indexOf(D)) && (D = ","), T === D) throw new Error("Comment character same as delimiter");
        !0 === T ? T = "#" : ("string" != typeof T || -1 < b.BAD_DELIMITERS.indexOf(T)) && (T = !1), "\n" !== I && "\r" !== I && "\r\n" !== I && (I = "\n");
        var M = 0, j = !1;
        this.parse = function(a, t, i) {
            if ("string" != typeof a) throw new Error("Input must be a string");
            var r = a.length, e = D.length, n = I.length, s = T.length, o = U(A), h = [], u = [], f = [], d = M = 0;
            if (!a) return R();
            if (F || !1 !== F && -1 === a.indexOf(O)) {
                for(var l = a.split(I), c = 0; c < l.length; c++){
                    if (f = l[c], M += f.length, c !== l.length - 1) M += I.length;
                    else if (i) return R();
                    if (!T || f.substring(0, s) !== T) {
                        if (o) {
                            if (h = [], b(f.split(D)), S(), j) return R();
                        } else b(f.split(D));
                        if (L && L <= c) return h = h.slice(0, L), R(!0);
                    }
                }
                return R();
            }
            for(var p = a.indexOf(D, M), g = a.indexOf(I, M), _ = new RegExp(q(z) + q(O), "g"), m = a.indexOf(O, M);;)if (a[M] !== O) {
                if (T && 0 === f.length && a.substring(M, M + s) === T) {
                    if (-1 === g) return R();
                    M = g + n, g = a.indexOf(I, M), p = a.indexOf(D, M);
                } else {
                    if (-1 !== p && (p < g || -1 === g)) {
                        if (!(p < m)) {
                            f.push(a.substring(M, p)), M = p + e, p = a.indexOf(D, M);
                            continue;
                        }
                        var v = x(p, m, g);
                        if (v && void 0 !== v.nextDelim) {
                            p = v.nextDelim, m = v.quoteSearch, f.push(a.substring(M, p)), M = p + e, p = a.indexOf(D, M);
                            continue;
                        }
                    }
                    if (-1 === g) break;
                    if (f.push(a.substring(M, g)), C(g + n), o && (S(), j)) return R();
                    if (L && h.length >= L) return R(!0);
                }
            } else for(m = M, M++;;){
                if (-1 === (m = a.indexOf(O, m + 1))) return i || u.push({
                    type: "Quotes",
                    code: "MissingQuotes",
                    message: "Quoted field unterminated",
                    row: h.length,
                    index: M
                }), E();
                if (m === r - 1) return E(a.substring(M, m).replace(_, O));
                if (O !== z || a[m + 1] !== z) {
                    if (O === z || 0 === m || a[m - 1] !== z) {
                        -1 !== p && p < m + 1 && (p = a.indexOf(D, m + 1)), -1 !== g && g < m + 1 && (g = a.indexOf(I, m + 1));
                        var y = w(-1 === g ? p : Math.min(p, g));
                        if (a[m + 1 + y] === D) {
                            f.push(a.substring(M, m).replace(_, O)), a[M = m + 1 + y + e] !== O && (m = a.indexOf(O, M)), p = a.indexOf(D, M), g = a.indexOf(I, M);
                            break;
                        }
                        var k = w(g);
                        if (a.substring(m + 1 + k, m + 1 + k + n) === I) {
                            if (f.push(a.substring(M, m).replace(_, O)), C(m + 1 + k + n), p = a.indexOf(D, M), m = a.indexOf(O, M), o && (S(), j)) return R();
                            if (L && h.length >= L) return R(!0);
                            break;
                        }
                        u.push({
                            type: "Quotes",
                            code: "InvalidQuotes",
                            message: "Trailing quote on quoted field is malformed",
                            row: h.length,
                            index: M
                        }), m++;
                    }
                } else m++;
            }
            return E();
            function b(e) {
                h.push(e), d = M;
            }
            function w(e) {
                var t = 0;
                if (-1 !== e) {
                    var i = a.substring(m + 1, e);
                    i && "" === i.trim() && (t = i.length);
                }
                return t;
            }
            function E(e) {
                return i || (void 0 === e && (e = a.substring(M)), f.push(e), M = r, b(f), o && S()), R();
            }
            function C(e) {
                M = e, b(f), f = [], g = a.indexOf(I, M);
            }
            function R(e) {
                return {
                    data: h,
                    errors: u,
                    meta: {
                        delimiter: D,
                        linebreak: I,
                        aborted: j,
                        truncated: !!e,
                        cursor: d + (t || 0)
                    }
                };
            }
            function S() {
                A(R()), h = [], u = [];
            }
            function x(e, t, i) {
                var r = {
                    nextDelim: void 0,
                    quoteSearch: void 0
                }, n = a.indexOf(O, t + 1);
                if (t < e && e < n && (n < i || -1 === i)) {
                    var s = a.indexOf(D, n);
                    if (-1 === s) return r;
                    n < s && (n = a.indexOf(O, n + 1)), r = x(s, n, i);
                } else r = {
                    nextDelim: e,
                    quoteSearch: t
                };
                return r;
            }
        }, this.abort = function() {
            j = !0;
        }, this.getCharIndex = function() {
            return M;
        };
    }
    function _(e) {
        var t = e.data, i = a[t.workerId], r = !1;
        if (t.error) i.userError(t.error, t.file);
        else if (t.results && t.results.data) {
            var n = {
                abort: function() {
                    r = !0, m(t.workerId, {
                        data: [],
                        errors: [],
                        meta: {
                            aborted: !0
                        }
                    });
                },
                pause: v,
                resume: v
            };
            if (U(i.userStep)) {
                for(var s = 0; s < t.results.data.length && (i.userStep({
                    data: t.results.data[s],
                    errors: t.results.errors,
                    meta: t.results.meta
                }, n), !r); s++);
                delete t.results;
            } else U(i.userChunk) && (i.userChunk(t.results, n, t.file), delete t.results);
        }
        t.finished && !r && m(t.workerId, t.results);
    }
    function m(e, t) {
        var i = a[e];
        U(i.userComplete) && i.userComplete(t), i.terminate(), delete a[e];
    }
    function v() {
        throw new Error("Not implemented.");
    }
    function E(e) {
        if ("object" != typeof e || null === e) return e;
        var t = Array.isArray(e) ? [] : {};
        for(var i in e)t[i] = E(e[i]);
        return t;
    }
    function y(e, t) {
        return function() {
            e.apply(t, arguments);
        };
    }
    function U(e) {
        return "function" == typeof e;
    }
    return o && (f.onmessage = function(e) {
        var t = e.data;
        void 0 === b.WORKER_ID && t && (b.WORKER_ID = t.workerId);
        if ("string" == typeof t.input) f.postMessage({
            workerId: b.WORKER_ID,
            results: b.parse(t.input, t.config),
            finished: !0
        });
        else if (f.File && t.input instanceof File || t.input instanceof Object) {
            var i = b.parse(t.input, t.config);
            i && f.postMessage({
                workerId: b.WORKER_ID,
                results: i,
                finished: !0
            });
        }
    }), (l.prototype = Object.create(u.prototype)).constructor = l, (c.prototype = Object.create(u.prototype)).constructor = c, (p.prototype = Object.create(p.prototype)).constructor = p, (g.prototype = Object.create(u.prototype)).constructor = g, b;
});

},{}],"dVNkW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _utils = require("../localizedFormat/utils");
var formattingTokens = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g;
var match1 = /\d/; // 0 - 9
var match2 = /\d\d/; // 00 - 99
var match3 = /\d{3}/; // 000 - 999
var match4 = /\d{4}/; // 0000 - 9999
var match1to2 = /\d\d?/; // 0 - 99
var matchSigned = /[+-]?\d+/; // -inf - inf
var matchOffset = /[+-]\d\d:?(\d\d)?|Z/; // +00:00 -00:00 +0000 or -0000 +00 or Z
var matchWord = /\d*[^-_:/,()\s\d]+/; // Word
var locale = {};
var parseTwoDigitYear = function parseTwoDigitYear(input) {
    input = +input;
    return input + (input > 68 ? 1900 : 2000);
};
function offsetFromString(string) {
    if (!string) return 0;
    if (string === "Z") return 0;
    var parts = string.match(/([+-]|\d\d)/g);
    var minutes = +(parts[1] * 60) + (+parts[2] || 0);
    return minutes === 0 ? 0 : parts[0] === "+" ? -minutes : minutes; // eslint-disable-line no-nested-ternary
}
var addInput = function addInput(property) {
    return function(input) {
        this[property] = +input;
    };
};
var zoneExpressions = [
    matchOffset,
    function(input) {
        var zone = this.zone || (this.zone = {});
        zone.offset = offsetFromString(input);
    }
];
var getLocalePart = function getLocalePart(name) {
    var part = locale[name];
    return part && (part.indexOf ? part : part.s.concat(part.f));
};
var meridiemMatch = function meridiemMatch(input, isLowerCase) {
    var isAfternoon;
    var _locale = locale, meridiem = _locale.meridiem;
    if (!meridiem) isAfternoon = input === (isLowerCase ? "pm" : "PM");
    else {
        for(var i = 1; i <= 24; i += 1)// todo: fix input === meridiem(i, 0, isLowerCase)
        if (input.indexOf(meridiem(i, 0, isLowerCase)) > -1) {
            isAfternoon = i > 12;
            break;
        }
    }
    return isAfternoon;
};
var expressions = {
    A: [
        matchWord,
        function(input) {
            this.afternoon = meridiemMatch(input, false);
        }
    ],
    a: [
        matchWord,
        function(input) {
            this.afternoon = meridiemMatch(input, true);
        }
    ],
    S: [
        match1,
        function(input) {
            this.milliseconds = +input * 100;
        }
    ],
    SS: [
        match2,
        function(input) {
            this.milliseconds = +input * 10;
        }
    ],
    SSS: [
        match3,
        function(input) {
            this.milliseconds = +input;
        }
    ],
    s: [
        match1to2,
        addInput("seconds")
    ],
    ss: [
        match1to2,
        addInput("seconds")
    ],
    m: [
        match1to2,
        addInput("minutes")
    ],
    mm: [
        match1to2,
        addInput("minutes")
    ],
    H: [
        match1to2,
        addInput("hours")
    ],
    h: [
        match1to2,
        addInput("hours")
    ],
    HH: [
        match1to2,
        addInput("hours")
    ],
    hh: [
        match1to2,
        addInput("hours")
    ],
    D: [
        match1to2,
        addInput("day")
    ],
    DD: [
        match2,
        addInput("day")
    ],
    Do: [
        matchWord,
        function(input) {
            var _locale2 = locale, ordinal = _locale2.ordinal;
            var _input$match = input.match(/\d+/);
            this.day = _input$match[0];
            if (!ordinal) return;
            for(var i = 1; i <= 31; i += 1)if (ordinal(i).replace(/\[|\]/g, "") === input) this.day = i;
        }
    ],
    M: [
        match1to2,
        addInput("month")
    ],
    MM: [
        match2,
        addInput("month")
    ],
    MMM: [
        matchWord,
        function(input) {
            var months = getLocalePart("months");
            var monthsShort = getLocalePart("monthsShort");
            var matchIndex = (monthsShort || months.map(function(_) {
                return _.slice(0, 3);
            })).indexOf(input) + 1;
            if (matchIndex < 1) throw new Error();
            this.month = matchIndex % 12 || matchIndex;
        }
    ],
    MMMM: [
        matchWord,
        function(input) {
            var months = getLocalePart("months");
            var matchIndex = months.indexOf(input) + 1;
            if (matchIndex < 1) throw new Error();
            this.month = matchIndex % 12 || matchIndex;
        }
    ],
    Y: [
        matchSigned,
        addInput("year")
    ],
    YY: [
        match2,
        function(input) {
            this.year = parseTwoDigitYear(input);
        }
    ],
    YYYY: [
        match4,
        addInput("year")
    ],
    Z: zoneExpressions,
    ZZ: zoneExpressions
};
function correctHours(time) {
    var afternoon = time.afternoon;
    if (afternoon !== undefined) {
        var hours = time.hours;
        if (afternoon) {
            if (hours < 12) time.hours += 12;
        } else if (hours === 12) time.hours = 0;
        delete time.afternoon;
    }
}
function makeParser(format) {
    format = (0, _utils.u)(format, locale && locale.formats);
    var array = format.match(formattingTokens);
    var length = array.length;
    for(var i = 0; i < length; i += 1){
        var token = array[i];
        var parseTo = expressions[token];
        var regex = parseTo && parseTo[0];
        var parser = parseTo && parseTo[1];
        if (parser) array[i] = {
            regex: regex,
            parser: parser
        };
        else array[i] = token.replace(/^\[|\]$/g, "");
    }
    return function(input) {
        var time = {};
        for(var _i = 0, start = 0; _i < length; _i += 1){
            var _token = array[_i];
            if (typeof _token === "string") start += _token.length;
            else {
                var _regex = _token.regex, _parser = _token.parser;
                var part = input.slice(start);
                var match = _regex.exec(part);
                var value = match[0];
                _parser.call(time, value);
                input = input.replace(value, "");
            }
        }
        correctHours(time);
        return time;
    };
}
var parseFormattedInput = function parseFormattedInput(input, format, utc) {
    try {
        if ([
            "x",
            "X"
        ].indexOf(format) > -1) return new Date((format === "X" ? 1000 : 1) * input);
        var parser = makeParser(format);
        var _parser2 = parser(input), year = _parser2.year, month = _parser2.month, day = _parser2.day, hours = _parser2.hours, minutes = _parser2.minutes, seconds = _parser2.seconds, milliseconds = _parser2.milliseconds, zone = _parser2.zone;
        var now = new Date();
        var d = day || (!year && !month ? now.getDate() : 1);
        var y = year || now.getFullYear();
        var M = 0;
        if (!(year && !month)) M = month > 0 ? month - 1 : now.getMonth();
        var h = hours || 0;
        var m = minutes || 0;
        var s = seconds || 0;
        var ms = milliseconds || 0;
        if (zone) return new Date(Date.UTC(y, M, d, h, m, s, ms + zone.offset * 60000));
        if (utc) return new Date(Date.UTC(y, M, d, h, m, s, ms));
        return new Date(y, M, d, h, m, s, ms);
    } catch (e) {
        return new Date(""); // Invalid Date
    }
};
exports.default = function(o, C, d) {
    d.p.customParseFormat = true;
    if (o && o.parseTwoDigitYear) parseTwoDigitYear = o.parseTwoDigitYear;
    var proto = C.prototype;
    var oldParse = proto.parse;
    proto.parse = function(cfg) {
        var date = cfg.date, utc = cfg.utc, args = cfg.args;
        this.$u = utc;
        var format = args[1];
        if (typeof format === "string") {
            var isStrictWithoutLocale = args[2] === true;
            var isStrictWithLocale = args[3] === true;
            var isStrict = isStrictWithoutLocale || isStrictWithLocale;
            var pl = args[2];
            if (isStrictWithLocale) pl = args[2];
            locale = this.$locale();
            if (!isStrictWithoutLocale && pl) locale = d.Ls[pl];
            this.$d = parseFormattedInput(date, format, utc);
            this.init();
            if (pl && pl !== true) this.$L = this.locale(pl).$L; // use != to treat
            // input number 1410715640579 and format string '1410715640579' equal
            // eslint-disable-next-line eqeqeq
            if (isStrict && date != this.format(format)) this.$d = new Date("");
             // reset global locale to make parallel unit test
            locale = {};
        } else if (format instanceof Array) {
            var len = format.length;
            for(var i = 1; i <= len; i += 1){
                args[1] = format[i - 1];
                var result = d.apply(this, args);
                if (result.isValid()) {
                    this.$d = result.$d;
                    this.$L = result.$L;
                    this.init();
                    break;
                }
                if (i === len) this.$d = new Date("");
            }
        } else oldParse.call(this, cfg);
    };
};

},{"../localizedFormat/utils":"k0JOf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k0JOf":[function(require,module,exports) {
// eslint-disable-next-line import/prefer-default-export
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "t", ()=>t);
parcelHelpers.export(exports, "englishFormats", ()=>englishFormats);
parcelHelpers.export(exports, "u", ()=>u);
var t = function t(format) {
    return format.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(_, a, b) {
        return a || b.slice(1);
    });
};
var englishFormats = {
    LTS: "h:mm:ss A",
    LT: "h:mm A",
    L: "MM/DD/YYYY",
    LL: "MMMM D, YYYY",
    LLL: "MMMM D, YYYY h:mm A",
    LLLL: "dddd, MMMM D, YYYY h:mm A"
};
var u = function u(formatStr, formats) {
    return formatStr.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(_, a, b) {
        var B = b && b.toUpperCase();
        return a || formats[b] || englishFormats[b] || t(formats[B]);
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3XQOl":[function(require,module,exports) {
/*! @preserve
 * numeral.js
 * version : 2.0.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */ (function(global, factory) {
    if (typeof define === "function" && define.amd) define(factory);
    else if (0, module.exports) module.exports = factory();
    else global.numeral = factory();
})(this, function() {
    /************************************
        Variables
    ************************************/ var numeral, _, VERSION = "2.0.6", formats = {}, locales = {}, defaults = {
        currentLocale: "en",
        zeroFormat: null,
        nullFormat: null,
        defaultFormat: "0,0",
        scalePercentBy100: true
    }, options = {
        currentLocale: defaults.currentLocale,
        zeroFormat: defaults.zeroFormat,
        nullFormat: defaults.nullFormat,
        defaultFormat: defaults.defaultFormat,
        scalePercentBy100: defaults.scalePercentBy100
    };
    /************************************
        Constructors
    ************************************/ // Numeral prototype object
    function Numeral(input, number) {
        this._input = input;
        this._value = number;
    }
    numeral = function(input) {
        var value, kind, unformatFunction, regexp;
        if (numeral.isNumeral(input)) value = input.value();
        else if (input === 0 || typeof input === "undefined") value = 0;
        else if (input === null || _.isNaN(input)) value = null;
        else if (typeof input === "string") {
            if (options.zeroFormat && input === options.zeroFormat) value = 0;
            else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, "").length) value = null;
            else {
                for(kind in formats){
                    regexp = typeof formats[kind].regexps.unformat === "function" ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;
                    if (regexp && input.match(regexp)) {
                        unformatFunction = formats[kind].unformat;
                        break;
                    }
                }
                unformatFunction = unformatFunction || numeral._.stringToNumber;
                value = unformatFunction(input);
            }
        } else value = Number(input) || null;
        return new Numeral(input, value);
    };
    // version number
    numeral.version = VERSION;
    // compare numeral object
    numeral.isNumeral = function(obj) {
        return obj instanceof Numeral;
    };
    // helper functions
    numeral._ = _ = {
        // formats numbers separators, decimals places, signs, abbreviations
        numberToFormat: function(value, format, roundingFunction) {
            var locale = locales[numeral.options.currentLocale], negP = false, optDec = false, leadingCount = 0, abbr = "", trillion = 1000000000000, billion = 1000000000, million = 1000000, thousand = 1000, decimal = "", neg = false, abbrForce, abs, min, max, power, int, precision, signed, thousands, output;
            // make sure we never format a null value
            value = value || 0;
            abs = Math.abs(value);
            // see if we should use parentheses for negative number or if we should prefix with a sign
            // if both are present we default to parentheses
            if (numeral._.includes(format, "(")) {
                negP = true;
                format = format.replace(/[\(|\)]/g, "");
            } else if (numeral._.includes(format, "+") || numeral._.includes(format, "-")) {
                signed = numeral._.includes(format, "+") ? format.indexOf("+") : value < 0 ? format.indexOf("-") : -1;
                format = format.replace(/[\+|\-]/g, "");
            }
            // see if abbreviation is wanted
            if (numeral._.includes(format, "a")) {
                abbrForce = format.match(/a(k|m|b|t)?/);
                abbrForce = abbrForce ? abbrForce[1] : false;
                // check for space before abbreviation
                if (numeral._.includes(format, " a")) abbr = " ";
                format = format.replace(new RegExp(abbr + "a[kmbt]?"), "");
                if (abs >= trillion && !abbrForce || abbrForce === "t") {
                    // trillion
                    abbr += locale.abbreviations.trillion;
                    value = value / trillion;
                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === "b") {
                    // billion
                    abbr += locale.abbreviations.billion;
                    value = value / billion;
                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === "m") {
                    // million
                    abbr += locale.abbreviations.million;
                    value = value / million;
                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === "k") {
                    // thousand
                    abbr += locale.abbreviations.thousand;
                    value = value / thousand;
                }
            }
            // check for optional decimals
            if (numeral._.includes(format, "[.]")) {
                optDec = true;
                format = format.replace("[.]", ".");
            }
            // break number and format
            int = value.toString().split(".")[0];
            precision = format.split(".")[1];
            thousands = format.indexOf(",");
            leadingCount = (format.split(".")[0].split(",")[0].match(/0/g) || []).length;
            if (precision) {
                if (numeral._.includes(precision, "[")) {
                    precision = precision.replace("]", "");
                    precision = precision.split("[");
                    decimal = numeral._.toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);
                } else decimal = numeral._.toFixed(value, precision.length, roundingFunction);
                int = decimal.split(".")[0];
                if (numeral._.includes(decimal, ".")) decimal = locale.delimiters.decimal + decimal.split(".")[1];
                else decimal = "";
                if (optDec && Number(decimal.slice(1)) === 0) decimal = "";
            } else int = numeral._.toFixed(value, 0, roundingFunction);
            // check abbreviation again after rounding
            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {
                int = String(Number(int) / 1000);
                switch(abbr){
                    case locale.abbreviations.thousand:
                        abbr = locale.abbreviations.million;
                        break;
                    case locale.abbreviations.million:
                        abbr = locale.abbreviations.billion;
                        break;
                    case locale.abbreviations.billion:
                        abbr = locale.abbreviations.trillion;
                        break;
                }
            }
            // format number
            if (numeral._.includes(int, "-")) {
                int = int.slice(1);
                neg = true;
            }
            if (int.length < leadingCount) for(var i = leadingCount - int.length; i > 0; i--)int = "0" + int;
            if (thousands > -1) int = int.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1" + locale.delimiters.thousands);
            if (format.indexOf(".") === 0) int = "";
            output = int + decimal + (abbr ? abbr : "");
            if (negP) output = (negP && neg ? "(" : "") + output + (negP && neg ? ")" : "");
            else {
                if (signed >= 0) output = signed === 0 ? (neg ? "-" : "+") + output : output + (neg ? "-" : "+");
                else if (neg) output = "-" + output;
            }
            return output;
        },
        // unformats numbers separators, decimals places, signs, abbreviations
        stringToNumber: function(string) {
            var locale = locales[options.currentLocale], stringOriginal = string, abbreviations = {
                thousand: 3,
                million: 6,
                billion: 9,
                trillion: 12
            }, abbreviation, value, i, regexp;
            if (options.zeroFormat && string === options.zeroFormat) value = 0;
            else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, "").length) value = null;
            else {
                value = 1;
                if (locale.delimiters.decimal !== ".") string = string.replace(/\./g, "").replace(locale.delimiters.decimal, ".");
                for(abbreviation in abbreviations){
                    regexp = new RegExp("[^a-zA-Z]" + locale.abbreviations[abbreviation] + "(?:\\)|(\\" + locale.currency.symbol + ")?(?:\\))?)?$");
                    if (stringOriginal.match(regexp)) {
                        value *= Math.pow(10, abbreviations[abbreviation]);
                        break;
                    }
                }
                // check for negative number
                value *= (string.split("-").length + Math.min(string.split("(").length - 1, string.split(")").length - 1)) % 2 ? 1 : -1;
                // remove non numbers
                string = string.replace(/[^0-9\.]+/g, "");
                value *= Number(string);
            }
            return value;
        },
        isNaN: function(value) {
            return typeof value === "number" && isNaN(value);
        },
        includes: function(string, search) {
            return string.indexOf(search) !== -1;
        },
        insert: function(string, subString, start) {
            return string.slice(0, start) + subString + string.slice(start);
        },
        reduce: function(array, callback /*, initialValue*/ ) {
            if (this === null) throw new TypeError("Array.prototype.reduce called on null or undefined");
            if (typeof callback !== "function") throw new TypeError(callback + " is not a function");
            var t = Object(array), len = t.length >>> 0, k = 0, value;
            if (arguments.length === 3) value = arguments[2];
            else {
                while(k < len && !(k in t))k++;
                if (k >= len) throw new TypeError("Reduce of empty array with no initial value");
                value = t[k++];
            }
            for(; k < len; k++)if (k in t) value = callback(value, t[k], k, t);
            return value;
        },
        /**
         * Computes the multiplier necessary to make x >= 1,
         * effectively eliminating miscalculations caused by
         * finite precision.
         */ multiplier: function(x) {
            var parts = x.toString().split(".");
            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);
        },
        /**
         * Given a variable number of arguments, returns the maximum
         * multiplier that must be used to normalize an operation involving
         * all of them.
         */ correctionFactor: function() {
            var args = Array.prototype.slice.call(arguments);
            return args.reduce(function(accum, next) {
                var mn = _.multiplier(next);
                return accum > mn ? accum : mn;
            }, 1);
        },
        /**
         * Implementation of toFixed() that treats floats more like decimals
         *
         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
         * problems for accounting- and finance-related software.
         */ toFixed: function(value, maxDecimals, roundingFunction, optionals) {
            var splitValue = value.toString().split("."), minDecimals = maxDecimals - (optionals || 0), boundedPrecision, optionalsRegExp, power, output;
            // Use the smallest precision value possible to avoid errors from floating point representation
            if (splitValue.length === 2) boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);
            else boundedPrecision = minDecimals;
            power = Math.pow(10, boundedPrecision);
            // Multiply up by precision, round accurately, then divide and use native toFixed():
            output = (roundingFunction(value + "e+" + boundedPrecision) / power).toFixed(boundedPrecision);
            if (optionals > maxDecimals - boundedPrecision) {
                optionalsRegExp = new RegExp("\\.?0{1," + (optionals - (maxDecimals - boundedPrecision)) + "}$");
                output = output.replace(optionalsRegExp, "");
            }
            return output;
        }
    };
    // avaliable options
    numeral.options = options;
    // avaliable formats
    numeral.formats = formats;
    // avaliable formats
    numeral.locales = locales;
    // This function sets the current locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    numeral.locale = function(key) {
        if (key) options.currentLocale = key.toLowerCase();
        return options.currentLocale;
    };
    // This function provides access to the loaded locale data.  If
    // no arguments are passed in, it will simply return the current
    // global locale object.
    numeral.localeData = function(key) {
        if (!key) return locales[options.currentLocale];
        key = key.toLowerCase();
        if (!locales[key]) throw new Error("Unknown locale : " + key);
        return locales[key];
    };
    numeral.reset = function() {
        for(var property in defaults)options[property] = defaults[property];
    };
    numeral.zeroFormat = function(format) {
        options.zeroFormat = typeof format === "string" ? format : null;
    };
    numeral.nullFormat = function(format) {
        options.nullFormat = typeof format === "string" ? format : null;
    };
    numeral.defaultFormat = function(format) {
        options.defaultFormat = typeof format === "string" ? format : "0.0";
    };
    numeral.register = function(type, name, format) {
        name = name.toLowerCase();
        if (this[type + "s"][name]) throw new TypeError(name + " " + type + " already registered.");
        this[type + "s"][name] = format;
        return format;
    };
    numeral.validate = function(val, culture) {
        var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, localeData, temp;
        //coerce val to string
        if (typeof val !== "string") {
            val += "";
            if (console.warn) console.warn("Numeral.js: Value is not string. It has been co-erced to: ", val);
        }
        //trim whitespaces from either sides
        val = val.trim();
        //if val is just digits return true
        if (!!val.match(/^\d+$/)) return true;
        //if val is empty return false
        if (val === "") return false;
        //get the decimal and thousands separator from numeral.localeData
        try {
            //check if the culture is understood by numeral. if not, default it to current locale
            localeData = numeral.localeData(culture);
        } catch (e) {
            localeData = numeral.localeData(numeral.locale());
        }
        //setup the delimiters and currency symbol based on culture/locale
        _currSymbol = localeData.currency.symbol;
        _abbrObj = localeData.abbreviations;
        _decimalSep = localeData.delimiters.decimal;
        if (localeData.delimiters.thousands === ".") _thousandSep = "\\.";
        else _thousandSep = localeData.delimiters.thousands;
        // validating currency symbol
        temp = val.match(/^[^\d]+/);
        if (temp !== null) {
            val = val.substr(1);
            if (temp[0] !== _currSymbol) return false;
        }
        //validating abbreviation symbol
        temp = val.match(/[^\d]+$/);
        if (temp !== null) {
            val = val.slice(0, -1);
            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) return false;
        }
        _thousandRegEx = new RegExp(_thousandSep + "{2}");
        if (!val.match(/[^\d.,]/g)) {
            _valArray = val.split(_decimalSep);
            if (_valArray.length > 2) return false;
            else {
                if (_valArray.length < 2) return !!_valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx);
                else {
                    if (_valArray[0].length === 1) return !!_valArray[0].match(/^\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\d+$/);
                    else return !!_valArray[0].match(/^\d+.*\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\d+$/);
                }
            }
        }
        return false;
    };
    /************************************
        Numeral Prototype
    ************************************/ numeral.fn = Numeral.prototype = {
        clone: function() {
            return numeral(this);
        },
        format: function(inputString, roundingFunction) {
            var value = this._value, format = inputString || options.defaultFormat, kind, output, formatFunction;
            // make sure we have a roundingFunction
            roundingFunction = roundingFunction || Math.round;
            // format based on value
            if (value === 0 && options.zeroFormat !== null) output = options.zeroFormat;
            else if (value === null && options.nullFormat !== null) output = options.nullFormat;
            else {
                for(kind in formats)if (format.match(formats[kind].regexps.format)) {
                    formatFunction = formats[kind].format;
                    break;
                }
                formatFunction = formatFunction || numeral._.numberToFormat;
                output = formatFunction(value, format, roundingFunction);
            }
            return output;
        },
        value: function() {
            return this._value;
        },
        input: function() {
            return this._input;
        },
        set: function(value) {
            this._value = Number(value);
            return this;
        },
        add: function(value) {
            var corrFactor = _.correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum + Math.round(corrFactor * curr);
            }
            this._value = _.reduce([
                this._value,
                value
            ], cback, 0) / corrFactor;
            return this;
        },
        subtract: function(value) {
            var corrFactor = _.correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum - Math.round(corrFactor * curr);
            }
            this._value = _.reduce([
                value
            ], cback, Math.round(this._value * corrFactor)) / corrFactor;
            return this;
        },
        multiply: function(value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = _.correctionFactor(accum, curr);
                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);
            }
            this._value = _.reduce([
                this._value,
                value
            ], cback, 1);
            return this;
        },
        divide: function(value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = _.correctionFactor(accum, curr);
                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);
            }
            this._value = _.reduce([
                this._value,
                value
            ], cback);
            return this;
        },
        difference: function(value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }
    };
    /************************************
        Default Locale && Format
    ************************************/ numeral.register("locale", "en", {
        delimiters: {
            thousands: ",",
            decimal: "."
        },
        abbreviations: {
            thousand: "k",
            million: "m",
            billion: "b",
            trillion: "t"
        },
        ordinal: function(number) {
            var b = number % 10;
            return ~~(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
        },
        currency: {
            symbol: "$"
        }
    });
    (function() {
        numeral.register("format", "bps", {
            regexps: {
                format: /(BPS)/,
                unformat: /(BPS)/
            },
            format: function(value, format, roundingFunction) {
                var space = numeral._.includes(format, " BPS") ? " " : "", output;
                value = value * 10000;
                // check for space before BPS
                format = format.replace(/\s?BPS/, "");
                output = numeral._.numberToFormat(value, format, roundingFunction);
                if (numeral._.includes(output, ")")) {
                    output = output.split("");
                    output.splice(-1, 0, space + "BPS");
                    output = output.join("");
                } else output = output + space + "BPS";
                return output;
            },
            unformat: function(string) {
                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);
            }
        });
    })();
    (function() {
        var decimal = {
            base: 1000,
            suffixes: [
                "B",
                "KB",
                "MB",
                "GB",
                "TB",
                "PB",
                "EB",
                "ZB",
                "YB"
            ]
        }, binary = {
            base: 1024,
            suffixes: [
                "B",
                "KiB",
                "MiB",
                "GiB",
                "TiB",
                "PiB",
                "EiB",
                "ZiB",
                "YiB"
            ]
        };
        var allSuffixes = decimal.suffixes.concat(binary.suffixes.filter(function(item) {
            return decimal.suffixes.indexOf(item) < 0;
        }));
        var unformatRegex = allSuffixes.join("|");
        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)
        unformatRegex = "(" + unformatRegex.replace("B", "B(?!PS)") + ")";
        numeral.register("format", "bytes", {
            regexps: {
                format: /([0\s]i?b)/,
                unformat: new RegExp(unformatRegex)
            },
            format: function(value, format, roundingFunction) {
                var output, bytes = numeral._.includes(format, "ib") ? binary : decimal, suffix = numeral._.includes(format, " b") || numeral._.includes(format, " ib") ? " " : "", power, min, max;
                // check for space before
                format = format.replace(/\s?i?b/, "");
                for(power = 0; power <= bytes.suffixes.length; power++){
                    min = Math.pow(bytes.base, power);
                    max = Math.pow(bytes.base, power + 1);
                    if (value === null || value === 0 || value >= min && value < max) {
                        suffix += bytes.suffixes[power];
                        if (min > 0) value = value / min;
                        break;
                    }
                }
                output = numeral._.numberToFormat(value, format, roundingFunction);
                return output + suffix;
            },
            unformat: function(string) {
                var value = numeral._.stringToNumber(string), power, bytesMultiplier;
                if (value) {
                    for(power = decimal.suffixes.length - 1; power >= 0; power--){
                        if (numeral._.includes(string, decimal.suffixes[power])) {
                            bytesMultiplier = Math.pow(decimal.base, power);
                            break;
                        }
                        if (numeral._.includes(string, binary.suffixes[power])) {
                            bytesMultiplier = Math.pow(binary.base, power);
                            break;
                        }
                    }
                    value *= bytesMultiplier || 1;
                }
                return value;
            }
        });
    })();
    (function() {
        numeral.register("format", "currency", {
            regexps: {
                format: /(\$)/
            },
            format: function(value, format, roundingFunction) {
                var locale = numeral.locales[numeral.options.currentLocale], symbols = {
                    before: format.match(/^([\+|\-|\(|\s|\$]*)/)[0],
                    after: format.match(/([\+|\-|\)|\s|\$]*)$/)[0]
                }, output, symbol, i;
                // strip format of spaces and $
                format = format.replace(/\s?\$\s?/, "");
                // format the number
                output = numeral._.numberToFormat(value, format, roundingFunction);
                // update the before and after based on value
                if (value >= 0) {
                    symbols.before = symbols.before.replace(/[\-\(]/, "");
                    symbols.after = symbols.after.replace(/[\-\)]/, "");
                } else if (value < 0 && !numeral._.includes(symbols.before, "-") && !numeral._.includes(symbols.before, "(")) symbols.before = "-" + symbols.before;
                // loop through each before symbol
                for(i = 0; i < symbols.before.length; i++){
                    symbol = symbols.before[i];
                    switch(symbol){
                        case "$":
                            output = numeral._.insert(output, locale.currency.symbol, i);
                            break;
                        case " ":
                            output = numeral._.insert(output, " ", i + locale.currency.symbol.length - 1);
                            break;
                    }
                }
                // loop through each after symbol
                for(i = symbols.after.length - 1; i >= 0; i--){
                    symbol = symbols.after[i];
                    switch(symbol){
                        case "$":
                            output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));
                            break;
                        case " ":
                            output = i === symbols.after.length - 1 ? output + " " : numeral._.insert(output, " ", -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));
                            break;
                    }
                }
                return output;
            }
        });
    })();
    (function() {
        numeral.register("format", "exponential", {
            regexps: {
                format: /(e\+|e-)/,
                unformat: /(e\+|e-)/
            },
            format: function(value, format, roundingFunction) {
                var output, exponential = typeof value === "number" && !numeral._.isNaN(value) ? value.toExponential() : "0e+0", parts = exponential.split("e");
                format = format.replace(/e[\+|\-]{1}0/, "");
                output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);
                return output + "e" + parts[1];
            },
            unformat: function(string) {
                var parts = numeral._.includes(string, "e+") ? string.split("e+") : string.split("e-"), value = Number(parts[0]), power = Number(parts[1]);
                power = numeral._.includes(string, "e-") ? power *= -1 : power;
                function cback(accum, curr, currI, O) {
                    var corrFactor = numeral._.correctionFactor(accum, curr), num = accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);
                    return num;
                }
                return numeral._.reduce([
                    value,
                    Math.pow(10, power)
                ], cback, 1);
            }
        });
    })();
    (function() {
        numeral.register("format", "ordinal", {
            regexps: {
                format: /(o)/
            },
            format: function(value, format, roundingFunction) {
                var locale = numeral.locales[numeral.options.currentLocale], output, ordinal = numeral._.includes(format, " o") ? " " : "";
                // check for space before
                format = format.replace(/\s?o/, "");
                ordinal += locale.ordinal(value);
                output = numeral._.numberToFormat(value, format, roundingFunction);
                return output + ordinal;
            }
        });
    })();
    (function() {
        numeral.register("format", "percentage", {
            regexps: {
                format: /(%)/,
                unformat: /(%)/
            },
            format: function(value, format, roundingFunction) {
                var space = numeral._.includes(format, " %") ? " " : "", output;
                if (numeral.options.scalePercentBy100) value = value * 100;
                // check for space before %
                format = format.replace(/\s?\%/, "");
                output = numeral._.numberToFormat(value, format, roundingFunction);
                if (numeral._.includes(output, ")")) {
                    output = output.split("");
                    output.splice(-1, 0, space + "%");
                    output = output.join("");
                } else output = output + space + "%";
                return output;
            },
            unformat: function(string) {
                var number = numeral._.stringToNumber(string);
                if (numeral.options.scalePercentBy100) return number * 0.01;
                return number;
            }
        });
    })();
    (function() {
        numeral.register("format", "time", {
            regexps: {
                format: /(:)/,
                unformat: /(:)/
            },
            format: function(value, format, roundingFunction) {
                var hours = Math.floor(value / 60 / 60), minutes = Math.floor((value - hours * 3600) / 60), seconds = Math.round(value - hours * 3600 - minutes * 60);
                return hours + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds);
            },
            unformat: function(string) {
                var timeArray = string.split(":"), seconds = 0;
                // turn hours and minutes into seconds and add them all up
                if (timeArray.length === 3) {
                    // hours
                    seconds = seconds + Number(timeArray[0]) * 3600;
                    // minutes
                    seconds = seconds + Number(timeArray[1]) * 60;
                    // seconds
                    seconds = seconds + Number(timeArray[2]);
                } else if (timeArray.length === 2) {
                    // minutes
                    seconds = seconds + Number(timeArray[0]) * 60;
                    // seconds
                    seconds = seconds + Number(timeArray[1]);
                }
                return Number(seconds);
            }
        });
    })();
    return numeral;
});

},{}],"fVrKm":[function(require,module,exports) {
"use strict";
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                0,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var chai_1 = require("53740d28ebd2db20");
var data_forge_1 = require("e1fec1a02e77e56b");
var dataForge = require("e1fec1a02e77e56b");
/**
 * @hidden
 * Packages a dataframe ready for serialization to a CSV format text file.
 */ var CsvSerializer = /** @class */ function() {
    function CsvSerializer(dataframe, options) {
        this.dataframe = dataframe;
        this.options = options;
    }
    /**
     * Serialize the dataframe to the CSV data format and save it as a text file in the local file system.
     * Asynchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @return Returns a promise that resolves when the file has been written.
     *
     *
     * @example
     * <pre>
     *
     * await df.asCSV().writeFile("my-data-file.csv");
     * </pre>
     */ CsvSerializer.prototype.writeFile = function(filePath) {
        var _this = this;
        chai_1.assert.isString(filePath, "Expected 'filePath' parameter to 'DataFrame.asCSV().writeFile' to be a string that specifies the path of the file to write to the local file system.");
        return new Promise(function(resolve, reject) {
            var fs = require("d18906345076bf32");
            fs.writeFile(filePath, _this.dataframe.toCSV(_this.options), function(err) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    };
    /**
     * Serialize the dataframe to the CSV data format and save it as a text file in the local file system.
     * Synchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @example
     * <pre>
     *
     * df.asCSV().writeFileSync("my-data-file.csv");
     * </pre>
     */ CsvSerializer.prototype.writeFileSync = function(filePath) {
        chai_1.assert.isString(filePath, "Expected 'filePath' parameter to 'DataFrame.asCSV().writeFileSync' to be a string that specifies the path of the file to write to the local file system.");
        var fs = require("d18906345076bf32");
        fs.writeFileSync(filePath, this.dataframe.toCSV(this.options));
    };
    return CsvSerializer;
}();
/**
 * @hidden
 * Packages a dataframe ready for serialization to a JSON format text file.
 */ var JsonSerializer = /** @class */ function() {
    function JsonSerializer(dataframe) {
        this.dataframe = dataframe;
    }
    /**
     * Serialize the dataframe to the JSON data format and save it as a text file in the local file system.
     * Asynchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @return Returns a promise that resolves when the file has been written.
     *
     *
     * @example
     * <pre>
     *
     * await df.asJSON().writeFile("my-data-file.json");
     * </pre>
     */ JsonSerializer.prototype.writeFile = function(filePath) {
        var _this = this;
        chai_1.assert.isString(filePath, "Expected 'filePath' parameter to 'DataFrame.asJSON().writeFile' to be a string that specifies the path of the file to write to the local file system.");
        return new Promise(function(resolve, reject) {
            var fs = require("d18906345076bf32");
            fs.writeFile(filePath, _this.dataframe.toJSON(), function(err) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    };
    /**
     * Serialize the dataframe to the JSON data format and save it as a text file in the local file system.
     * Synchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @example
     * <pre>
     *
     * df.asJSON().writeFileSync("my-data-file.json");
     * </pre>
     */ JsonSerializer.prototype.writeFileSync = function(filePath) {
        chai_1.assert.isString(filePath, "Expected 'filePath' parameter to 'DataFrame.asJSON().writeFile' to be a string that specifies the path of the file to write to the local file system.");
        var fs = require("d18906345076bf32");
        fs.writeFileSync(filePath, this.dataframe.toJSON());
    };
    return JsonSerializer;
}();
/**
 * Treat the dataframe as CSV data for purposes of serialization.
 * This is the first step you need in serializing a dataframe to a CSV data file.
 *
 * @param options Options for CSV output. The options object is passed directly to [PapaParse.unparse](https://www.papaparse.com/docs#unparse), please see [PapaParse docs for additional options](https://www.papaparse.com/docs#unparse-config-default).
 *
 * @return Returns a {@link ICsvSerializer} that represents the dataframe for serialization in the CSV format. Call `writeFile` or `writeFileSync` to output the CSV data to a text file.
 *
 * @example
 * <pre>
 *
 * df.asCSV().writeFileSync("my-data-file.csv");
 * </pre>
 *
 * @example
 * <pre>
 *
 * await df.asCSV().writeFile("my-data-file.csv");
 * </pre>
 *
 * @example
 * <pre>
 *
 * const options = { ... };
 * await df.asCSV(options).writeFile("my-data-file.csv");
 * </pre>
 */ function asCSV(options) {
    return new CsvSerializer(this, options);
}
exports.asCSV = asCSV;
/**
 * Treat the dataframe as JSON data for purposes of serialization.
 * This is the first step you need in serializing a dataframe to a JSON data file.
 *
 * @return Returns a {@link IJsonSerializer} that represents the dataframe for serialization in the JSON format. Call `writeFile` or `writeFileSync` to output the JSON data to a text file.
 *
 * @example
 * <pre>
 *
 * df.asJSON().writeFileSync("my-data-file.json");
 * </pre>
 *
 * @example
 * <pre>
 *
 * await df.asJSON().writeFile("my-data-file.json");
 * </pre>
 */ function asJSON() {
    return new JsonSerializer(this);
}
exports.asJSON = asJSON;
data_forge_1.DataFrame.prototype.asCSV = asCSV;
data_forge_1.DataFrame.prototype.asJSON = asJSON;
//
// Promise-based read file.
//
function readFileData(filePath) {
    return new Promise(function(resolve, reject) {
        var fs = require("d18906345076bf32");
        fs.readFile(filePath, "utf8", function(err, fileData) {
            if (err) {
                reject(err);
                return;
            }
            resolve(fileData);
        });
    });
}
/**
 * @hidden
 * Reads a file asynchonrously to a dataframe.
 */ var AsyncFileReader = /** @class */ function() {
    function AsyncFileReader(filePath) {
        this.filePath = filePath;
    }
    /**
     * Deserialize a CSV file to a DataFrame.
     * Returns a promise that later resolves to a DataFrame.
     *
     * @param config Optional configuration file for parsing.
     * The config object is passed directly to [PapaParse.parse](https://www.papaparse.com/docs#strings), please see [PapaParse docs for additional options](https://www.papaparse.com/docs#config).
     *
     * @returns Returns a promise of a dataframe loaded from the file.
     *
     * @example
     * <pre>
     *
     * const df = await dataForge.readFile("my-data-file.csv").parseCSV();
     * </pre>
     *
     * @example
     * <pre>
     *
     * const options = {
     *      // ...
     * };
     * const df = await dataForge.readFile("my-data-file.csv").parseCSV(options);
     * </pre>
     */ AsyncFileReader.prototype.parseCSV = function(config) {
        return __awaiter(this, void 0, void 0, function() {
            var fileData;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (config) chai_1.assert.isObject(config, "Expected optional 'config' parameter to dataForge.readFile(...).parseCSV(...) to be an object with configuration options for CSV parsing.");
                        return [
                            4 /*yield*/ ,
                            readFileData(this.filePath)
                        ];
                    case 1:
                        fileData = _a.sent();
                        return [
                            2 /*return*/ ,
                            data_forge_1.fromCSV(fileData, config)
                        ];
                }
            });
        });
    };
    /**
     * Deserialize a JSON file to a DataFrame.
     * Returns a promise that later resolves to a DataFrame.
     *
     * @returns Returns a promise of a dataframe loaded from the file.
     *
     * @example
     * <pre>
     *
     * const df = await dataForge.readFile("my-data-file.json").parseJSON();
     * </pre>
     */ AsyncFileReader.prototype.parseJSON = function() {
        return __awaiter(this, void 0, void 0, function() {
            var fileData;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            readFileData(this.filePath)
                        ];
                    case 1:
                        fileData = _a.sent();
                        return [
                            2 /*return*/ ,
                            data_forge_1.fromJSON(fileData)
                        ];
                }
            });
        });
    };
    return AsyncFileReader;
}();
/**
 * @hidden
 * Reads a file synchonrously to a dataframe.
 */ var SyncFileReader = /** @class */ function() {
    function SyncFileReader(filePath) {
        this.filePath = filePath;
    }
    /**
     * Deserialize a CSV file to a DataFrame.
     *
     * @param config Optional configuration file for parsing.
     * The config object is passed directly to [PapaParse.parse](https://www.papaparse.com/docs#strings), please see [PapaParse docs for additional options](https://www.papaparse.com/docs#config).
     *
     * @returns Returns a dataframe that was deserialized from the file.
     *
     * @example
     * <pre>
     *
     * const df = dataForge.readFileSync("my-data-file.csv").parseCSV();
     * </pre>
     *
     * @example
     * <pre>
     *
     * const options = {
     *      // ...
     * };
     * const df = dataForge.readFileSync("my-data-file.csv").parseCSV(options);
     * </pre>
     */ SyncFileReader.prototype.parseCSV = function(config) {
        if (config) chai_1.assert.isObject(config, "Expected optional 'config' parameter to dataForge.readFileSync(...).parseCSV(...) to be an object with configuration options for CSV parsing.");
        var fs = require("d18906345076bf32");
        return data_forge_1.fromCSV(fs.readFileSync(this.filePath, "utf8"), config);
    };
    /**
     * Deserialize a JSON file to a DataFrame.
     *
     * @returns Returns a dataframe that was deserialized from the file.
     *
     * @example
     * <pre>
     *
     * const df = dataForge.readFileSync("my-data-file.json").parseJSON();
     * </pre>
     */ SyncFileReader.prototype.parseJSON = function() {
        var fs = require("d18906345076bf32");
        return data_forge_1.fromJSON(fs.readFileSync(this.filePath, "utf8"));
    };
    return SyncFileReader;
}();
/**
 * Read a file asynchronously from the file system.
 * Works in Nodejs, doesn't work in the browser.
 *
 * @param filePath The path to the file to read.
 *
 * @returns Returns an object that represents the file. Use `parseCSV` or `parseJSON` to deserialize to a DataFrame.
 *
 * @example
 * <pre>
 *
 * const df = await dataForge.readFile("my-data-file.csv").parseCSV();
 * </pre>
 *
 * @example
 * <pre>
 *
 * const options = {
 *      // ...
 * };
 * const df = await dataForge.readFile("my-data-file.csv").parseCSV(options);
 * </pre>
 *
 * @example
 * <pre>
 *
 * const df = await dataForge.readFile("my-data-file.json").parseJSON();
 * </pre>
 */ function readFile(filePath) {
    chai_1.assert.isString(filePath, "Expected 'filePath' parameter to dataForge.readFile to be a string that specifies the path of the file to read.");
    return new AsyncFileReader(filePath);
}
exports.readFile = readFile;
/**
 * Read a file synchronously from the file system.
 * Works in Nodejs, doesn't work in the browser.
 *
 * @param filePath The path to the file to read.
 *
 * @returns Returns an object that represents the file. Use `parseCSV` or `parseJSON` to deserialize to a DataFrame.
 *
 * @memberOf Data-Forge
 *
 * @example
 * <pre>
 *
 * const df = dataForge.readFileSync("my-data-file.csv").parseCSV();
 * </pre>
 *
 * @example
 * <pre>
 *
 * const options = {
 *      // ...
 * };
 * const df = dataForge.readFileSync("my-data-file.csv").parseCSV(options);
 * </pre>
 *
 * @example
 * <pre>
 *
 * const df = dataForge.readFileSync("my-data-file.json").parseJSON();
 * </pre>
 */ function readFileSync(filePath) {
    chai_1.assert.isString(filePath, "Expected 'filePath' parameter to dataForge.readFileSync to be a string that specifies the path of the file to read.");
    return new SyncFileReader(filePath);
}
exports.readFileSync = readFileSync;
//
// Patch in the plugin module.
// This feels a bit dodgey, but it works!
// 
dataForge.readFile = readFile;
dataForge.readFileSync = readFileSync;

},{"53740d28ebd2db20":"1X1Ew","e1fec1a02e77e56b":"kMziK","d18906345076bf32":"jhUEF"}],"1X1Ew":[function(require,module,exports) {
module.exports = require("4311ebd61e4af07f");

},{"4311ebd61e4af07f":"987s3"}],"987s3":[function(require,module,exports) {
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ var used = [];
/*!
 * Chai version
 */ exports.version = "4.3.3";
/*!
 * Assertion Error
 */ exports.AssertionError = require("217c3b59311651eb");
/*!
 * Utils for plugins (not exported)
 */ var util = require("1ee4e353ff790181");
/**
 * # .use(function)
 *
 * Provides a way to extend the internals of Chai.
 *
 * @param {Function}
 * @returns {this} for chaining
 * @api public
 */ exports.use = function(fn) {
    if (!~used.indexOf(fn)) {
        fn(exports, util);
        used.push(fn);
    }
    return exports;
};
/*!
 * Utility Functions
 */ exports.util = util;
/*!
 * Configuration
 */ var config = require("249a9e165f011675");
exports.config = config;
/*!
 * Primary `Assertion` prototype
 */ var assertion = require("1cc7103d7f726379");
exports.use(assertion);
/*!
 * Core Assertions
 */ var core = require("73854f2ab096caba");
exports.use(core);
/*!
 * Expect interface
 */ var expect = require("f8b94a18a68a5723");
exports.use(expect);
/*!
 * Should interface
 */ var should = require("44d3f540ac626cc4");
exports.use(should);
/*!
 * Assert interface
 */ var assert = require("77054c18c8f59383");
exports.use(assert);

},{"217c3b59311651eb":"9YhxX","1ee4e353ff790181":"cJB8p","249a9e165f011675":"3o38I","1cc7103d7f726379":"16kJC","73854f2ab096caba":"5mKbi","f8b94a18a68a5723":"0Hf2q","44d3f540ac626cc4":"abNfL","77054c18c8f59383":"RV2o7"}],"9YhxX":[function(require,module,exports) {
/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */ /*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */ function exclude() {
    var excludes = [].slice.call(arguments);
    function excludeProps(res, obj) {
        Object.keys(obj).forEach(function(key) {
            if (!~excludes.indexOf(key)) res[key] = obj[key];
        });
    }
    return function extendExclude() {
        var args = [].slice.call(arguments), i = 0, res = {};
        for(; i < args.length; i++)excludeProps(res, args[i]);
        return res;
    };
}
/*!
 * Primary Exports
 */ module.exports = AssertionError;
/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */ function AssertionError(message, _props, ssf) {
    var extend = exclude("name", "message", "stack", "constructor", "toJSON"), props = extend(_props || {});
    // default values
    this.message = message || "Unspecified AssertionError";
    this.showDiff = false;
    // copy from properties
    for(var key in props)this[key] = props[key];
    // capture stack trace
    ssf = ssf || AssertionError;
    if (Error.captureStackTrace) Error.captureStackTrace(this, ssf);
    else try {
        throw new Error();
    } catch (e) {
        this.stack = e.stack;
    }
}
/*!
 * Inherit from Error.prototype
 */ AssertionError.prototype = Object.create(Error.prototype);
/*!
 * Statically set name
 */ AssertionError.prototype.name = "AssertionError";
/*!
 * Ensure correct constructor
 */ AssertionError.prototype.constructor = AssertionError;
/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */ AssertionError.prototype.toJSON = function(stack) {
    var extend = exclude("constructor", "toJSON", "stack"), props = extend({
        name: this.name
    }, this);
    // include stack if exists and not turned off
    if (false !== stack && this.stack) props.stack = this.stack;
    return props;
};

},{}],"cJB8p":[function(require,module,exports) {
/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /*!
 * Dependencies that are used for multiple exports are required here only once
 */ var pathval = require("249f3a5f122b680f");
/*!
 * test utility
 */ exports.test = require("5cbd0ece7f102878");
/*!
 * type utility
 */ exports.type = require("8af30cfab106168e");
/*!
 * expectTypes utility
 */ exports.expectTypes = require("2254135c72ddf33f");
/*!
 * message utility
 */ exports.getMessage = require("bde4d86e938a4a60");
/*!
 * actual utility
 */ exports.getActual = require("4b736f1cc24cf751");
/*!
 * Inspect util
 */ exports.inspect = require("5e346ae43c7b1804");
/*!
 * Object Display util
 */ exports.objDisplay = require("ea1d67b9e5ef8886");
/*!
 * Flag utility
 */ exports.flag = require("598b22bef81666ca");
/*!
 * Flag transferring utility
 */ exports.transferFlags = require("cbcff73c5495b0f5");
/*!
 * Deep equal utility
 */ exports.eql = require("816753d152a9f52a");
/*!
 * Deep path info
 */ exports.getPathInfo = pathval.getPathInfo;
/*!
 * Check if a property exists
 */ exports.hasProperty = pathval.hasProperty;
/*!
 * Function name
 */ exports.getName = require("76a11ddd57e149ae");
/*!
 * add Property
 */ exports.addProperty = require("848a8aada8c99080");
/*!
 * add Method
 */ exports.addMethod = require("3e34c6826f82727c");
/*!
 * overwrite Property
 */ exports.overwriteProperty = require("c15bf70fa6c04aef");
/*!
 * overwrite Method
 */ exports.overwriteMethod = require("d472a1ca25f075f8");
/*!
 * Add a chainable method
 */ exports.addChainableMethod = require("66753cf16117da0");
/*!
 * Overwrite chainable method
 */ exports.overwriteChainableMethod = require("b7c1b0ce3fcfd965");
/*!
 * Compare by inspect method
 */ exports.compareByInspect = require("5298293a067dd9dc");
/*!
 * Get own enumerable property symbols method
 */ exports.getOwnEnumerablePropertySymbols = require("f5ab9b8a8e66e7ec");
/*!
 * Get own enumerable properties method
 */ exports.getOwnEnumerableProperties = require("fee66fd1a5f12d6c");
/*!
 * Checks error against a given set of criteria
 */ exports.checkError = require("21d45a88a1b18146");
/*!
 * Proxify util
 */ exports.proxify = require("6afc52e45fce153d");
/*!
 * addLengthGuard util
 */ exports.addLengthGuard = require("760658dd481ef36c");
/*!
 * isProxyEnabled helper
 */ exports.isProxyEnabled = require("4b520f2807a3249a");
/*!
 * isNaN method
 */ exports.isNaN = require("257e7953005d5313");
/*!
 * getOperator method
 */ exports.getOperator = require("89fd24687f7b0f5");

},{"249f3a5f122b680f":"iBrGp","5cbd0ece7f102878":"17rMF","8af30cfab106168e":"3FPeG","2254135c72ddf33f":"01Wqd","bde4d86e938a4a60":"gPmRk","4b736f1cc24cf751":"fgSCE","5e346ae43c7b1804":"gYoyp","ea1d67b9e5ef8886":"ezzLB","598b22bef81666ca":"2uXxS","cbcff73c5495b0f5":"9JDXr","816753d152a9f52a":"eSQLx","76a11ddd57e149ae":"eGA4n","848a8aada8c99080":"1wLK1","3e34c6826f82727c":"jfKUp","c15bf70fa6c04aef":"dVeIn","d472a1ca25f075f8":"jvrZi","66753cf16117da0":"bRFhp","b7c1b0ce3fcfd965":"fvTc2","5298293a067dd9dc":"8yAxg","f5ab9b8a8e66e7ec":"2sJ9g","fee66fd1a5f12d6c":"aOTea","21d45a88a1b18146":"97a9r","6afc52e45fce153d":"2bkgI","760658dd481ef36c":"aIOwj","4b520f2807a3249a":"gdvUl","257e7953005d5313":"79Vnu","89fd24687f7b0f5":"8j1Y5"}],"iBrGp":[function(require,module,exports) {
"use strict";
/* !
 * Chai - pathval utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */ /**
 * ### .hasProperty(object, name)
 *
 * This allows checking whether an object has own
 * or inherited from prototype chain named property.
 *
 * Basically does the same thing as the `in`
 * operator but works properly with null/undefined values
 * and other primitives.
 *
 *     var obj = {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *
 * The following would be the results.
 *
 *     hasProperty(obj, 'str');  // true
 *     hasProperty(obj, 'constructor');  // true
 *     hasProperty(obj, 'bar');  // false
 *
 *     hasProperty(obj.str, 'length'); // true
 *     hasProperty(obj.str, 1);  // true
 *     hasProperty(obj.str, 5);  // false
 *
 *     hasProperty(obj.arr, 'length');  // true
 *     hasProperty(obj.arr, 2);  // true
 *     hasProperty(obj.arr, 3);  // false
 *
 * @param {Object} object
 * @param {String|Symbol} name
 * @returns {Boolean} whether it exists
 * @namespace Utils
 * @name hasProperty
 * @api public
 */ function hasProperty(obj, name) {
    if (typeof obj === "undefined" || obj === null) return false;
    // The `in` operator does not work with primitives.
    return name in Object(obj);
}
/* !
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `internalGetPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be infinitely deep and nested.
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */ function parsePath(path) {
    var str = path.replace(/([^\\])\[/g, "$1.[");
    var parts = str.match(/(\\\.|[^.]+?)+/g);
    return parts.map(function mapMatches(value) {
        if (value === "constructor" || value === "__proto__" || value === "prototype") return {};
        var regexp = /^\[(\d+)\]$/;
        var mArr = regexp.exec(value);
        var parsed = null;
        if (mArr) parsed = {
            i: parseFloat(mArr[1])
        };
        else parsed = {
            p: value.replace(/\\([.[\]])/g, "$1")
        };
        return parsed;
    });
}
/* !
 * ## internalGetPathValue(obj, parsed[, pathDepth])
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(obj, parsed);
 *
 * @param {Object} object to search against
 * @param {Object} parsed definition from `parsePath`.
 * @param {Number} depth (nesting level) of the property we want to retrieve
 * @returns {Object|Undefined} value
 * @api private
 */ function internalGetPathValue(obj, parsed, pathDepth) {
    var temporaryValue = obj;
    var res = null;
    pathDepth = typeof pathDepth === "undefined" ? parsed.length : pathDepth;
    for(var i = 0; i < pathDepth; i++){
        var part = parsed[i];
        if (temporaryValue) {
            if (typeof part.p === "undefined") temporaryValue = temporaryValue[part.i];
            else temporaryValue = temporaryValue[part.p];
            if (i === pathDepth - 1) res = temporaryValue;
        }
    }
    return res;
}
/* !
 * ## internalSetPathValue(obj, value, parsed)
 *
 * Companion function for `parsePath` that sets
 * the value located at a parsed address.
 *
 *  internalSetPathValue(obj, 'value', parsed);
 *
 * @param {Object} object to search and define on
 * @param {*} value to use upon set
 * @param {Object} parsed definition from `parsePath`
 * @api private
 */ function internalSetPathValue(obj, val, parsed) {
    var tempObj = obj;
    var pathDepth = parsed.length;
    var part = null;
    // Here we iterate through every part of the path
    for(var i = 0; i < pathDepth; i++){
        var propName = null;
        var propVal = null;
        part = parsed[i];
        // If it's the last part of the path, we set the 'propName' value with the property name
        if (i === pathDepth - 1) {
            propName = typeof part.p === "undefined" ? part.i : part.p;
            // Now we set the property with the name held by 'propName' on object with the desired val
            tempObj[propName] = val;
        } else if (typeof part.p !== "undefined" && tempObj[part.p]) tempObj = tempObj[part.p];
        else if (typeof part.i !== "undefined" && tempObj[part.i]) tempObj = tempObj[part.i];
        else {
            // If the obj doesn't have the property we create one with that name to define it
            var next = parsed[i + 1];
            // Here we set the name of the property which will be defined
            propName = typeof part.p === "undefined" ? part.i : part.p;
            // Here we decide if this property will be an array or a new object
            propVal = typeof next.p === "undefined" ? [] : {};
            tempObj[propName] = propVal;
            tempObj = tempObj[propName];
        }
    }
}
/**
 * ### .getPathInfo(object, path)
 *
 * This allows the retrieval of property info in an
 * object given a string path.
 *
 * The path info consists of an object with the
 * following properties:
 *
 * * parent - The parent object of the property referenced by `path`
 * * name - The name of the final property, a number if it was an array indexer
 * * value - The value of the property, if it exists, otherwise `undefined`
 * * exists - Whether the property exists or not
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} info
 * @namespace Utils
 * @name getPathInfo
 * @api public
 */ function getPathInfo(obj, path) {
    var parsed = parsePath(path);
    var last = parsed[parsed.length - 1];
    var info = {
        parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,
        name: last.p || last.i,
        value: internalGetPathValue(obj, parsed)
    };
    info.exists = hasProperty(info.parent, info.name);
    return info;
}
/**
 * ### .getPathValue(object, path)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue(obj, 'prop1.str'); // Hello
 *     getPathValue(obj, 'prop1.att[2]'); // b
 *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe
 *
 * @param {Object} object
 * @param {String} path
 * @returns {Object} value or `undefined`
 * @namespace Utils
 * @name getPathValue
 * @api public
 */ function getPathValue(obj, path) {
    var info = getPathInfo(obj, path);
    return info.value;
}
/**
 * ### .setPathValue(object, path, value)
 *
 * Define the value in an object at a given string path.
 *
 * ```js
 * var obj = {
 *     prop1: {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *   , prop2: {
 *         arr: [ { nested: 'Universe' } ]
 *       , str: 'Hello again!'
 *     }
 * };
 * ```
 *
 * The following would be acceptable.
 *
 * ```js
 * var properties = require('tea-properties');
 * properties.set(obj, 'prop1.str', 'Hello Universe!');
 * properties.set(obj, 'prop1.arr[2]', 'B');
 * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });
 * ```
 *
 * @param {Object} object
 * @param {String} path
 * @param {Mixed} value
 * @api private
 */ function setPathValue(obj, path, val) {
    var parsed = parsePath(path);
    internalSetPathValue(obj, val, parsed);
    return obj;
}
module.exports = {
    hasProperty: hasProperty,
    getPathInfo: getPathInfo,
    getPathValue: getPathValue,
    setPathValue: setPathValue
};

},{}],"17rMF":[function(require,module,exports) {
/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /*!
 * Module dependencies
 */ var flag = require("2549292059d240d7");
/**
 * ### .test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name test
 */ module.exports = function test(obj, args) {
    var negate = flag(obj, "negate"), expr = args[0];
    return negate ? !expr : expr;
};

},{"2549292059d240d7":"2uXxS"}],"2uXxS":[function(require,module,exports) {
/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .flag(object, key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @namespace Utils
 * @name flag
 * @api private
 */ module.exports = function flag(obj, key, value) {
    var flags = obj.__flags || (obj.__flags = Object.create(null));
    if (arguments.length === 3) flags[key] = value;
    else return flags[key];
};

},{}],"3FPeG":[function(require,module,exports) {
var global = arguments[3];
(function(global, factory) {
    module.exports = factory();
})(this, function() {
    "use strict";
    /* !
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ var promiseExists = typeof Promise === "function";
    /* eslint-disable no-undef */ var globalObject = typeof self === "object" ? self : global; // eslint-disable-line id-blacklist
    var symbolExists = typeof Symbol !== "undefined";
    var mapExists = typeof Map !== "undefined";
    var setExists = typeof Set !== "undefined";
    var weakMapExists = typeof WeakMap !== "undefined";
    var weakSetExists = typeof WeakSet !== "undefined";
    var dataViewExists = typeof DataView !== "undefined";
    var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== "undefined";
    var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== "undefined";
    var setEntriesExists = setExists && typeof Set.prototype.entries === "function";
    var mapEntriesExists = mapExists && typeof Map.prototype.entries === "function";
    var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());
    var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());
    var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === "function";
    var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
    var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === "function";
    var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(""[Symbol.iterator]());
    var toStringLeftSliceLength = 8;
    var toStringRightSliceLength = -1;
    /**
 * ### typeOf (obj)
 *
 * Uses `Object.prototype.toString` to determine the type of an object,
 * normalising behaviour across engine versions & well optimised.
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */ function typeDetect(obj) {
        /* ! Speed optimisation
   * Pre:
   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)
   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)
   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)
   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)
   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)
   * Post:
   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)
   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)
   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)
   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)
   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)
   */ var typeofObj = typeof obj;
        if (typeofObj !== "object") return typeofObj;
        /* ! Speed optimisation
   * Pre:
   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)
   * Post:
   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)
   */ if (obj === null) return "null";
        /* ! Spec Conformance
   * Test: `Object.prototype.toString.call(window)``
   *  - Node === "[object global]"
   *  - Chrome === "[object global]"
   *  - Firefox === "[object Window]"
   *  - PhantomJS === "[object Window]"
   *  - Safari === "[object Window]"
   *  - IE 11 === "[object Window]"
   *  - IE Edge === "[object Window]"
   * Test: `Object.prototype.toString.call(this)``
   *  - Chrome Worker === "[object global]"
   *  - Firefox Worker === "[object DedicatedWorkerGlobalScope]"
   *  - Safari Worker === "[object DedicatedWorkerGlobalScope]"
   *  - IE 11 Worker === "[object WorkerGlobalScope]"
   *  - IE Edge Worker === "[object WorkerGlobalScope]"
   */ if (obj === globalObject) return "global";
        /* ! Speed optimisation
   * Pre:
   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)
   * Post:
   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)
   */ if (Array.isArray(obj) && (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))) return "Array";
        // Not caching existence of `window` and related properties due to potential
        // for `window` to be unset before tests in quasi-browser environments.
        if (typeof window === "object" && window !== null) {
            /* ! Spec Conformance
     * (https://html.spec.whatwg.org/multipage/browsers.html#location)
     * WhatWG HTML$7.7.3 - The `Location` interface
     * Test: `Object.prototype.toString.call(window.location)``
     *  - IE <=11 === "[object Object]"
     *  - IE Edge <=13 === "[object Object]"
     */ if (typeof window.location === "object" && obj === window.location) return "Location";
            /* ! Spec Conformance
     * (https://html.spec.whatwg.org/#document)
     * WhatWG HTML$3.1.1 - The `Document` object
     * Note: Most browsers currently adher to the W3C DOM Level 2 spec
     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)
     *       which suggests that browsers should use HTMLTableCellElement for
     *       both TD and TH elements. WhatWG separates these.
     *       WhatWG HTML states:
     *         > For historical reasons, Window objects must also have a
     *         > writable, configurable, non-enumerable property named
     *         > HTMLDocument whose value is the Document interface object.
     * Test: `Object.prototype.toString.call(document)``
     *  - Chrome === "[object HTMLDocument]"
     *  - Firefox === "[object HTMLDocument]"
     *  - Safari === "[object HTMLDocument]"
     *  - IE <=10 === "[object Document]"
     *  - IE 11 === "[object HTMLDocument]"
     *  - IE Edge <=13 === "[object HTMLDocument]"
     */ if (typeof window.document === "object" && obj === window.document) return "Document";
            if (typeof window.navigator === "object") {
                /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray
       * Test: `Object.prototype.toString.call(navigator.mimeTypes)``
       *  - IE <=10 === "[object MSMimeTypesCollection]"
       */ if (typeof window.navigator.mimeTypes === "object" && obj === window.navigator.mimeTypes) return "MimeTypeArray";
                /* ! Spec Conformance
       * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
       * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray
       * Test: `Object.prototype.toString.call(navigator.plugins)``
       *  - IE <=10 === "[object MSPluginsCollection]"
       */ if (typeof window.navigator.plugins === "object" && obj === window.navigator.plugins) return "PluginArray";
            }
            if ((typeof window.HTMLElement === "function" || typeof window.HTMLElement === "object") && obj instanceof window.HTMLElement) {
                /* ! Spec Conformance
      * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)
      * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`
      * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``
      *  - IE <=10 === "[object HTMLBlockElement]"
      */ if (obj.tagName === "BLOCKQUOTE") return "HTMLQuoteElement";
                /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltabledatacellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('td'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */ if (obj.tagName === "TD") return "HTMLTableDataCellElement";
                /* ! Spec Conformance
       * (https://html.spec.whatwg.org/#htmltableheadercellelement)
       * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`
       * Note: Most browsers currently adher to the W3C DOM Level 2 spec
       *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)
       *       which suggests that browsers should use HTMLTableCellElement for
       *       both TD and TH elements. WhatWG separates these.
       * Test: Object.prototype.toString.call(document.createElement('th'))
       *  - Chrome === "[object HTMLTableCellElement]"
       *  - Firefox === "[object HTMLTableCellElement]"
       *  - Safari === "[object HTMLTableCellElement]"
       */ if (obj.tagName === "TH") return "HTMLTableHeaderCellElement";
            }
        }
        /* ! Speed optimisation
  * Pre:
  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)
  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)
  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)
  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)
  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)
  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)
  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)
  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)
  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)
  * Post:
  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)
  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)
  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)
  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)
  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)
  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)
  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)
  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)
  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)
  */ var stringTag = symbolToStringTagExists && obj[Symbol.toStringTag];
        if (typeof stringTag === "string") return stringTag;
        var objPrototype = Object.getPrototypeOf(obj);
        /* ! Speed optimisation
  * Pre:
  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)
  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)
  * Post:
  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)
  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)
  */ if (objPrototype === RegExp.prototype) return "RegExp";
        /* ! Speed optimisation
  * Pre:
  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)
  * Post:
  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)
  */ if (objPrototype === Date.prototype) return "Date";
        /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)
   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be "Promise":
   * Test: `Object.prototype.toString.call(Promise.resolve())``
   *  - Chrome <=47 === "[object Object]"
   *  - Edge <=20 === "[object Object]"
   *  - Firefox 29-Latest === "[object Promise]"
   *  - Safari 7.1-Latest === "[object Promise]"
   */ if (promiseExists && objPrototype === Promise.prototype) return "Promise";
        /* ! Speed optimisation
  * Pre:
  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)
  * Post:
  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)
  */ if (setExists && objPrototype === Set.prototype) return "Set";
        /* ! Speed optimisation
  * Pre:
  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)
  * Post:
  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)
  */ if (mapExists && objPrototype === Map.prototype) return "Map";
        /* ! Speed optimisation
  * Pre:
  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)
  * Post:
  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)
  */ if (weakSetExists && objPrototype === WeakSet.prototype) return "WeakSet";
        /* ! Speed optimisation
  * Pre:
  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)
  * Post:
  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)
  */ if (weakMapExists && objPrototype === WeakMap.prototype) return "WeakMap";
        /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)
   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be "DataView":
   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``
   *  - Edge <=13 === "[object Object]"
   */ if (dataViewExists && objPrototype === DataView.prototype) return "DataView";
        /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)
   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be "Map Iterator":
   * Test: `Object.prototype.toString.call(new Map().entries())``
   *  - Edge <=13 === "[object Object]"
   */ if (mapExists && objPrototype === mapIteratorPrototype) return "Map Iterator";
        /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)
   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be "Set Iterator":
   * Test: `Object.prototype.toString.call(new Set().entries())``
   *  - Edge <=13 === "[object Object]"
   */ if (setExists && objPrototype === setIteratorPrototype) return "Set Iterator";
        /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)
   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be "Array Iterator":
   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``
   *  - Edge <=13 === "[object Object]"
   */ if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) return "Array Iterator";
        /* ! Spec Conformance
   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)
   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be "String Iterator":
   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``
   *  - Edge <=13 === "[object Object]"
   */ if (stringIteratorExists && objPrototype === stringIteratorPrototype) return "String Iterator";
        /* ! Speed optimisation
  * Pre:
  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)
  * Post:
  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)
  */ if (objPrototype === null) return "Object";
        return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
    }
    return typeDetect;
});

},{}],"01Wqd":[function(require,module,exports) {
/*!
 * Chai - expectTypes utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .expectTypes(obj, types)
 *
 * Ensures that the object being tested against is of a valid type.
 *
 *     utils.expectTypes(this, ['array', 'object', 'string']);
 *
 * @param {Mixed} obj constructed Assertion
 * @param {Array} type A list of allowed types for this assertion
 * @namespace Utils
 * @name expectTypes
 * @api public
 */ var AssertionError = require("be7387c7ddf07aa1");
var flag = require("44ecc3c56071d5fa");
var type = require("1c9eda048929629b");
module.exports = function expectTypes(obj, types) {
    var flagMsg = flag(obj, "message");
    var ssfi = flag(obj, "ssfi");
    flagMsg = flagMsg ? flagMsg + ": " : "";
    obj = flag(obj, "object");
    types = types.map(function(t) {
        return t.toLowerCase();
    });
    types.sort();
    // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'
    var str = types.map(function(t, index) {
        var art = ~[
            "a",
            "e",
            "i",
            "o",
            "u"
        ].indexOf(t.charAt(0)) ? "an" : "a";
        var or = types.length > 1 && index === types.length - 1 ? "or " : "";
        return or + art + " " + t;
    }).join(", ");
    var objType = type(obj).toLowerCase();
    if (!types.some(function(expected) {
        return objType === expected;
    })) throw new AssertionError(flagMsg + "object tested must be " + str + ", but " + objType + " given", undefined, ssfi);
};

},{"be7387c7ddf07aa1":"9YhxX","44ecc3c56071d5fa":"2uXxS","1c9eda048929629b":"3FPeG"}],"gPmRk":[function(require,module,exports) {
/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /*!
 * Module dependencies
 */ var flag = require("8b10360f8ec8d7d8"), getActual = require("49e97ca0ef94811c"), objDisplay = require("5b547f78be8076b6");
/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getMessage
 * @api public
 */ module.exports = function getMessage(obj, args) {
    var negate = flag(obj, "negate"), val = flag(obj, "object"), expected = args[3], actual = getActual(obj, args), msg = negate ? args[2] : args[1], flagMsg = flag(obj, "message");
    if (typeof msg === "function") msg = msg();
    msg = msg || "";
    msg = msg.replace(/#\{this\}/g, function() {
        return objDisplay(val);
    }).replace(/#\{act\}/g, function() {
        return objDisplay(actual);
    }).replace(/#\{exp\}/g, function() {
        return objDisplay(expected);
    });
    return flagMsg ? flagMsg + ": " + msg : msg;
};

},{"8b10360f8ec8d7d8":"2uXxS","49e97ca0ef94811c":"fgSCE","5b547f78be8076b6":"ezzLB"}],"fgSCE":[function(require,module,exports) {
/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getActual
 */ module.exports = function getActual(obj, args) {
    return args.length > 4 ? args[4] : obj._obj;
};

},{}],"ezzLB":[function(require,module,exports) {
/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /*!
 * Module dependencies
 */ var inspect = require("229d51263fcc9e84");
var config = require("31ff9dc6551d37c9");
/**
 * ### .objDisplay(object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @namespace Utils
 * @api public
 */ module.exports = function objDisplay(obj) {
    var str = inspect(obj), type = Object.prototype.toString.call(obj);
    if (config.truncateThreshold && str.length >= config.truncateThreshold) {
        if (type === "[object Function]") return !obj.name || obj.name === "" ? "[Function]" : "[Function: " + obj.name + "]";
        else if (type === "[object Array]") return "[ Array(" + obj.length + ") ]";
        else if (type === "[object Object]") {
            var keys = Object.keys(obj), kstr = keys.length > 2 ? keys.splice(0, 2).join(", ") + ", ..." : keys.join(", ");
            return "{ Object (" + kstr + ") }";
        } else return str;
    } else return str;
};

},{"229d51263fcc9e84":"gYoyp","31ff9dc6551d37c9":"3o38I"}],"gYoyp":[function(require,module,exports) {
// This is (almost) directly from Node.js utils
// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js
var getName = require("9519379ce34837c6");
var loupe = require("b4de098b5438a6f9");
var config = require("b9a76272767f0e04");
module.exports = inspect;
/**
 * ### .inspect(obj, [showHidden], [depth], [colors])
 *
 * Echoes the value of a value. Tries to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
 *    properties of objects. Default is false.
 * @param {Number} depth Depth in which to descend in object. Default is 2.
 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
 *    output. Default is false (no coloring).
 * @namespace Utils
 * @name inspect
 */ function inspect(obj, showHidden, depth, colors) {
    var options = {
        colors: colors,
        depth: typeof depth === "undefined" ? 2 : depth,
        showHidden: showHidden,
        truncate: config.truncateThreshold ? config.truncateThreshold : Infinity
    };
    return loupe.inspect(obj, options);
}

},{"9519379ce34837c6":"eGA4n","b4de098b5438a6f9":"01uPW","b9a76272767f0e04":"3o38I"}],"eGA4n":[function(require,module,exports) {
"use strict";
/* !
 * Chai - getFuncName utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .getFuncName(constructorFn)
 *
 * Returns the name of a function.
 * When a non-function instance is passed, returns `null`.
 * This also includes a polyfill function if `aFunc.name` is not defined.
 *
 * @name getFuncName
 * @param {Function} funct
 * @namespace Utils
 * @api public
 */ var toString = Function.prototype.toString;
var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
function getFuncName(aFunc) {
    if (typeof aFunc !== "function") return null;
    var name = "";
    if (typeof Function.prototype.name === "undefined" && typeof aFunc.name === "undefined") {
        // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined
        var match = toString.call(aFunc).match(functionNameMatch);
        if (match) name = match[1];
    } else // If we've got a `name` property we just use it
    name = aFunc.name;
    return name;
}
module.exports = getFuncName;

},{}],"01uPW":[function(require,module,exports) {
var process = require("1dfdb77923494308");
var Buffer = require("885ddad0cc508739").Buffer;
(function(global, factory) {
    factory(exports);
})(this, function(exports1) {
    "use strict";
    function _typeof(obj) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") _typeof = function(obj) {
            return typeof obj;
        };
        else _typeof = function(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
        return _typeof(obj);
    }
    function _slicedToArray(arr, i) {
        return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
    }
    function _iterableToArrayLimit(arr, i) {
        if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
            for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
            }
        } catch (err) {
            _d = true;
            _e = err;
        } finally{
            try {
                if (!_n && _i["return"] != null) _i["return"]();
            } finally{
                if (_d) throw _e;
            }
        }
        return _arr;
    }
    function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
        return arr2;
    }
    function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var ansiColors = {
        bold: [
            "1",
            "22"
        ],
        dim: [
            "2",
            "22"
        ],
        italic: [
            "3",
            "23"
        ],
        underline: [
            "4",
            "24"
        ],
        // 5 & 6 are blinking
        inverse: [
            "7",
            "27"
        ],
        hidden: [
            "8",
            "28"
        ],
        strike: [
            "9",
            "29"
        ],
        // 10-20 are fonts
        // 21-29 are resets for 1-9
        black: [
            "30",
            "39"
        ],
        red: [
            "31",
            "39"
        ],
        green: [
            "32",
            "39"
        ],
        yellow: [
            "33",
            "39"
        ],
        blue: [
            "34",
            "39"
        ],
        magenta: [
            "35",
            "39"
        ],
        cyan: [
            "36",
            "39"
        ],
        white: [
            "37",
            "39"
        ],
        brightblack: [
            "30;1",
            "39"
        ],
        brightred: [
            "31;1",
            "39"
        ],
        brightgreen: [
            "32;1",
            "39"
        ],
        brightyellow: [
            "33;1",
            "39"
        ],
        brightblue: [
            "34;1",
            "39"
        ],
        brightmagenta: [
            "35;1",
            "39"
        ],
        brightcyan: [
            "36;1",
            "39"
        ],
        brightwhite: [
            "37;1",
            "39"
        ],
        grey: [
            "90",
            "39"
        ]
    };
    var styles = {
        special: "cyan",
        number: "yellow",
        bigint: "yellow",
        boolean: "yellow",
        undefined: "grey",
        null: "bold",
        string: "green",
        symbol: "green",
        date: "magenta",
        regexp: "red"
    };
    var truncator = "…";
    function colorise(value, styleType) {
        var color = ansiColors[styles[styleType]] || ansiColors[styleType];
        if (!color) return String(value);
        return "\x1b[".concat(color[0], "m").concat(String(value), "\x1b[").concat(color[1], "m");
    }
    function normaliseOptions() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$showHidden = _ref.showHidden, showHidden = _ref$showHidden === void 0 ? false : _ref$showHidden, _ref$depth = _ref.depth, depth = _ref$depth === void 0 ? 2 : _ref$depth, _ref$colors = _ref.colors, colors = _ref$colors === void 0 ? false : _ref$colors, _ref$customInspect = _ref.customInspect, customInspect = _ref$customInspect === void 0 ? true : _ref$customInspect, _ref$showProxy = _ref.showProxy, showProxy = _ref$showProxy === void 0 ? false : _ref$showProxy, _ref$maxArrayLength = _ref.maxArrayLength, maxArrayLength = _ref$maxArrayLength === void 0 ? Infinity : _ref$maxArrayLength, _ref$breakLength = _ref.breakLength, breakLength = _ref$breakLength === void 0 ? Infinity : _ref$breakLength, _ref$seen = _ref.seen, seen = _ref$seen === void 0 ? [] : _ref$seen, _ref$truncate = _ref.truncate, truncate = _ref$truncate === void 0 ? Infinity : _ref$truncate, _ref$stylize = _ref.stylize, stylize = _ref$stylize === void 0 ? String : _ref$stylize;
        var options = {
            showHidden: Boolean(showHidden),
            depth: Number(depth),
            colors: Boolean(colors),
            customInspect: Boolean(customInspect),
            showProxy: Boolean(showProxy),
            maxArrayLength: Number(maxArrayLength),
            breakLength: Number(breakLength),
            truncate: Number(truncate),
            seen: seen,
            stylize: stylize
        };
        if (options.colors) options.stylize = colorise;
        return options;
    }
    function truncate(string, length) {
        var tail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : truncator;
        string = String(string);
        var tailLength = tail.length;
        var stringLength = string.length;
        if (tailLength > length && stringLength > tailLength) return tail;
        if (stringLength > length && stringLength > tailLength) return "".concat(string.slice(0, length - tailLength)).concat(tail);
        return string;
    } // eslint-disable-next-line complexity
    function inspectList(list, options, inspectItem) {
        var separator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ", ";
        inspectItem = inspectItem || options.inspect;
        var size = list.length;
        if (size === 0) return "";
        var originalLength = options.truncate;
        var output = "";
        var peek = "";
        var truncated = "";
        for(var i = 0; i < size; i += 1){
            var last = i + 1 === list.length;
            var secondToLast = i + 2 === list.length;
            truncated = "".concat(truncator, "(").concat(list.length - i, ")");
            var value = list[i]; // If there is more than one remaining we need to account for a separator of `, `
            options.truncate = originalLength - output.length - (last ? 0 : separator.length);
            var string = peek || inspectItem(value, options) + (last ? "" : separator);
            var nextLength = output.length + string.length;
            var truncatedLength = nextLength + truncated.length; // If this is the last element, and adding it would
            // take us over length, but adding the truncator wouldn't - then break now
            if (last && nextLength > originalLength && output.length + truncated.length <= originalLength) break;
             // If this isn't the last or second to last element to scan,
            // but the string is already over length then break here
            if (!last && !secondToLast && truncatedLength > originalLength) break;
             // Peek at the next string to determine if we should
            // break early before adding this item to the output
            peek = last ? "" : inspectItem(list[i + 1], options) + (secondToLast ? "" : separator); // If we have one element left, but this element and
            // the next takes over length, the break early
            if (!last && secondToLast && truncatedLength > originalLength && nextLength + peek.length > originalLength) break;
            output += string; // If the next element takes us to length -
            // but there are more after that, then we should truncate now
            if (!last && !secondToLast && nextLength + peek.length >= originalLength) {
                truncated = "".concat(truncator, "(").concat(list.length - i - 1, ")");
                break;
            }
            truncated = "";
        }
        return "".concat(output).concat(truncated);
    }
    function quoteComplexKey(key) {
        if (key.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) return key;
        return JSON.stringify(key).replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
    }
    function inspectProperty(_ref2, options) {
        var _ref3 = _slicedToArray(_ref2, 2), key = _ref3[0], value = _ref3[1];
        options.truncate -= 2;
        if (typeof key === "string") key = quoteComplexKey(key);
        else if (typeof key !== "number") key = "[".concat(options.inspect(key, options), "]");
        options.truncate -= key.length;
        value = options.inspect(value, options);
        return "".concat(key, ": ").concat(value);
    }
    function inspectArray(array, options) {
        // Object.keys will always output the Array indices first, so we can slice by
        // `array.length` to get non-index properties
        var nonIndexProperties = Object.keys(array).slice(array.length);
        if (!array.length && !nonIndexProperties.length) return "[]";
        options.truncate -= 4;
        var listContents = inspectList(array, options);
        options.truncate -= listContents.length;
        var propertyContents = "";
        if (nonIndexProperties.length) propertyContents = inspectList(nonIndexProperties.map(function(key) {
            return [
                key,
                array[key]
            ];
        }), options, inspectProperty);
        return "[ ".concat(listContents).concat(propertyContents ? ", ".concat(propertyContents) : "", " ]");
    }
    /* !
   * Chai - getFuncName utility
   * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
   * MIT Licensed
   */ /**
   * ### .getFuncName(constructorFn)
   *
   * Returns the name of a function.
   * When a non-function instance is passed, returns `null`.
   * This also includes a polyfill function if `aFunc.name` is not defined.
   *
   * @name getFuncName
   * @param {Function} funct
   * @namespace Utils
   * @api public
   */ var toString = Function.prototype.toString;
    var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\s\(\/]+)/;
    function getFuncName(aFunc) {
        if (typeof aFunc !== "function") return null;
        var name = "";
        if (typeof Function.prototype.name === "undefined" && typeof aFunc.name === "undefined") {
            // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined
            var match = toString.call(aFunc).match(functionNameMatch);
            if (match) name = match[1];
        } else // If we've got a `name` property we just use it
        name = aFunc.name;
        return name;
    }
    var getFuncName_1 = getFuncName;
    var getArrayName = function getArrayName(array) {
        // We need to special case Node.js' Buffers, which report to be Uint8Array
        if (typeof Buffer === "function" && array instanceof Buffer) return "Buffer";
        if (array[Symbol.toStringTag]) return array[Symbol.toStringTag];
        return getFuncName_1(array.constructor);
    };
    function inspectTypedArray(array, options) {
        var name = getArrayName(array);
        options.truncate -= name.length + 4; // Object.keys will always output the Array indices first, so we can slice by
        // `array.length` to get non-index properties
        var nonIndexProperties = Object.keys(array).slice(array.length);
        if (!array.length && !nonIndexProperties.length) return "".concat(name, "[]"); // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply
        // stylise the toString() value of them
        var output = "";
        for(var i = 0; i < array.length; i++){
            var string = "".concat(options.stylize(truncate(array[i], options.truncate), "number")).concat(i === array.length - 1 ? "" : ", ");
            options.truncate -= string.length;
            if (array[i] !== array.length && options.truncate <= 3) {
                output += "".concat(truncator, "(").concat(array.length - array[i] + 1, ")");
                break;
            }
            output += string;
        }
        var propertyContents = "";
        if (nonIndexProperties.length) propertyContents = inspectList(nonIndexProperties.map(function(key) {
            return [
                key,
                array[key]
            ];
        }), options, inspectProperty);
        return "".concat(name, "[ ").concat(output).concat(propertyContents ? ", ".concat(propertyContents) : "", " ]");
    }
    function inspectDate(dateObject, options) {
        var stringRepresentation = dateObject.toJSON();
        if (stringRepresentation === null) return "Invalid Date";
        var split = stringRepresentation.split("T");
        var date = split[0]; // If we need to - truncate the time portion, but never the date
        return options.stylize("".concat(date, "T").concat(truncate(split[1], options.truncate - date.length - 1)), "date");
    }
    function inspectFunction(func, options) {
        var name = getFuncName_1(func);
        if (!name) return options.stylize("[Function]", "special");
        return options.stylize("[Function ".concat(truncate(name, options.truncate - 11), "]"), "special");
    }
    function inspectMapEntry(_ref, options) {
        var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
        options.truncate -= 4;
        key = options.inspect(key, options);
        options.truncate -= key.length;
        value = options.inspect(value, options);
        return "".concat(key, " => ").concat(value);
    } // IE11 doesn't support `map.entries()`
    function mapToEntries(map) {
        var entries = [];
        map.forEach(function(value, key) {
            entries.push([
                key,
                value
            ]);
        });
        return entries;
    }
    function inspectMap(map, options) {
        var size = map.size - 1;
        if (size <= 0) return "Map{}";
        options.truncate -= 7;
        return "Map{ ".concat(inspectList(mapToEntries(map), options, inspectMapEntry), " }");
    }
    var isNaN = Number.isNaN || function(i) {
        return i !== i;
    }; // eslint-disable-line no-self-compare
    function inspectNumber(number, options) {
        if (isNaN(number)) return options.stylize("NaN", "number");
        if (number === Infinity) return options.stylize("Infinity", "number");
        if (number === -Infinity) return options.stylize("-Infinity", "number");
        if (number === 0) return options.stylize(1 / number === Infinity ? "+0" : "-0", "number");
        return options.stylize(truncate(number, options.truncate), "number");
    }
    function inspectBigInt(number, options) {
        var nums = truncate(number.toString(), options.truncate - 1);
        if (nums !== truncator) nums += "n";
        return options.stylize(nums, "bigint");
    }
    function inspectRegExp(value, options) {
        var flags = value.toString().split("/")[2];
        var sourceLength = options.truncate - (2 + flags.length);
        var source = value.source;
        return options.stylize("/".concat(truncate(source, sourceLength), "/").concat(flags), "regexp");
    }
    function arrayFromSet(set) {
        var values = [];
        set.forEach(function(value) {
            values.push(value);
        });
        return values;
    }
    function inspectSet(set, options) {
        if (set.size === 0) return "Set{}";
        options.truncate -= 7;
        return "Set{ ".concat(inspectList(arrayFromSet(set), options), " }");
    }
    var stringEscapeChars = new RegExp("['\\u0000-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]", "g");
    var escapeCharacters = {
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        "'": "\\'",
        "\\": "\\\\"
    };
    var hex = 16;
    var unicodeLength = 4;
    function escape(char) {
        return escapeCharacters[char] || "\\u".concat("0000".concat(char.charCodeAt(0).toString(hex)).slice(-unicodeLength));
    }
    function inspectString(string, options) {
        if (stringEscapeChars.test(string)) string = string.replace(stringEscapeChars, escape);
        return options.stylize("'".concat(truncate(string, options.truncate - 2), "'"), "string");
    }
    function inspectSymbol(value) {
        if ("description" in Symbol.prototype) return value.description ? "Symbol(".concat(value.description, ")") : "Symbol()";
        return value.toString();
    }
    var getPromiseValue = function getPromiseValue() {
        return "Promise{…}";
    };
    try {
        var _process$binding = process.binding("util"), getPromiseDetails = _process$binding.getPromiseDetails, kPending = _process$binding.kPending, kRejected = _process$binding.kRejected;
        if (Array.isArray(getPromiseDetails(Promise.resolve()))) getPromiseValue = function getPromiseValue(value, options) {
            var _getPromiseDetails = getPromiseDetails(value), _getPromiseDetails2 = _slicedToArray(_getPromiseDetails, 2), state = _getPromiseDetails2[0], innerValue = _getPromiseDetails2[1];
            if (state === kPending) return "Promise{<pending>}";
            return "Promise".concat(state === kRejected ? "!" : "", "{").concat(options.inspect(innerValue, options), "}");
        };
    } catch (notNode) {
    /* ignore */ }
    var inspectPromise = getPromiseValue;
    function inspectObject(object, options) {
        var properties = Object.getOwnPropertyNames(object);
        var symbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(object) : [];
        if (properties.length === 0 && symbols.length === 0) return "{}";
        options.truncate -= 4;
        options.seen = options.seen || [];
        if (options.seen.indexOf(object) >= 0) return "[Circular]";
        options.seen.push(object);
        var propertyContents = inspectList(properties.map(function(key) {
            return [
                key,
                object[key]
            ];
        }), options, inspectProperty);
        var symbolContents = inspectList(symbols.map(function(key) {
            return [
                key,
                object[key]
            ];
        }), options, inspectProperty);
        options.seen.pop();
        var sep = "";
        if (propertyContents && symbolContents) sep = ", ";
        return "{ ".concat(propertyContents).concat(sep).concat(symbolContents, " }");
    }
    var toStringTag = typeof Symbol !== "undefined" && Symbol.toStringTag ? Symbol.toStringTag : false;
    function inspectClass(value, options) {
        var name = "";
        if (toStringTag && toStringTag in value) name = value[toStringTag];
        name = name || getFuncName_1(value.constructor); // Babel transforms anonymous classes to the name `_class`
        if (!name || name === "_class") name = "<Anonymous Class>";
        options.truncate -= name.length;
        return "".concat(name).concat(inspectObject(value, options));
    }
    function inspectArguments(args, options) {
        if (args.length === 0) return "Arguments[]";
        options.truncate -= 13;
        return "Arguments[ ".concat(inspectList(args, options), " ]");
    }
    var errorKeys = [
        "stack",
        "line",
        "column",
        "name",
        "message",
        "fileName",
        "lineNumber",
        "columnNumber",
        "number",
        "description"
    ];
    function inspectObject$1(error, options) {
        var properties = Object.getOwnPropertyNames(error).filter(function(key) {
            return errorKeys.indexOf(key) === -1;
        });
        var name = error.name;
        options.truncate -= name.length;
        var message = "";
        if (typeof error.message === "string") message = truncate(error.message, options.truncate);
        else properties.unshift("message");
        message = message ? ": ".concat(message) : "";
        options.truncate -= message.length + 5;
        var propertyContents = inspectList(properties.map(function(key) {
            return [
                key,
                error[key]
            ];
        }), options, inspectProperty);
        return "".concat(name).concat(message).concat(propertyContents ? " { ".concat(propertyContents, " }") : "");
    }
    function inspectAttribute(_ref, options) {
        var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
        options.truncate -= 3;
        if (!value) return "".concat(options.stylize(key, "yellow"));
        return "".concat(options.stylize(key, "yellow"), "=").concat(options.stylize('"'.concat(value, '"'), "string"));
    }
    function inspectHTMLCollection(collection, options) {
        // eslint-disable-next-line no-use-before-define
        return inspectList(collection, options, inspectHTML, "\n");
    }
    function inspectHTML(element, options) {
        var properties = element.getAttributeNames();
        var name = element.tagName.toLowerCase();
        var head = options.stylize("<".concat(name), "special");
        var headClose = options.stylize(">", "special");
        var tail = options.stylize("</".concat(name, ">"), "special");
        options.truncate -= name.length * 2 + 5;
        var propertyContents = "";
        if (properties.length > 0) {
            propertyContents += " ";
            propertyContents += inspectList(properties.map(function(key) {
                return [
                    key,
                    element.getAttribute(key)
                ];
            }), options, inspectAttribute, " ");
        }
        options.truncate -= propertyContents.length;
        var truncate = options.truncate;
        var children = inspectHTMLCollection(element.children, options);
        if (children && children.length > truncate) children = "".concat(truncator, "(").concat(element.children.length, ")");
        return "".concat(head).concat(propertyContents).concat(headClose).concat(children).concat(tail);
    }
    var symbolsSupported = typeof Symbol === "function" && typeof Symbol.for === "function";
    var chaiInspect = symbolsSupported ? Symbol.for("chai/inspect") : "@@chai/inspect";
    var nodeInspect = false;
    try {
        // eslint-disable-next-line global-require
        var nodeUtil = require("a1c394ada23519dc");
        nodeInspect = nodeUtil.inspect ? nodeUtil.inspect.custom : false;
    } catch (noNodeInspect) {
        nodeInspect = false;
    }
    function FakeMap() {
        // eslint-disable-next-line prefer-template
        this.key = "chai/loupe__" + Math.random() + Date.now();
    }
    FakeMap.prototype = {
        // eslint-disable-next-line object-shorthand
        get: function get(key) {
            return key[this.key];
        },
        // eslint-disable-next-line object-shorthand
        has: function has(key) {
            return this.key in key;
        },
        // eslint-disable-next-line object-shorthand
        set: function set(key, value) {
            if (Object.isExtensible(key)) Object.defineProperty(key, this.key, {
                // eslint-disable-next-line object-shorthand
                value: value,
                configurable: true
            });
        }
    };
    var constructorMap = new (typeof WeakMap === "function" ? WeakMap : FakeMap)();
    var stringTagMap = {};
    var baseTypesMap = {
        undefined: function undefined$1(value, options) {
            return options.stylize("undefined", "undefined");
        },
        null: function _null(value, options) {
            return options.stylize(null, "null");
        },
        boolean: function boolean(value, options) {
            return options.stylize(value, "boolean");
        },
        Boolean: function Boolean1(value, options) {
            return options.stylize(value, "boolean");
        },
        number: inspectNumber,
        Number: inspectNumber,
        bigint: inspectBigInt,
        BigInt: inspectBigInt,
        string: inspectString,
        String: inspectString,
        function: inspectFunction,
        Function: inspectFunction,
        symbol: inspectSymbol,
        // A Symbol polyfill will return `Symbol` not `symbol` from typedetect
        Symbol: inspectSymbol,
        Array: inspectArray,
        Date: inspectDate,
        Map: inspectMap,
        Set: inspectSet,
        RegExp: inspectRegExp,
        Promise: inspectPromise,
        // WeakSet, WeakMap are totally opaque to us
        WeakSet: function WeakSet(value, options) {
            return options.stylize("WeakSet{…}", "special");
        },
        WeakMap: function WeakMap1(value, options) {
            return options.stylize("WeakMap{…}", "special");
        },
        Arguments: inspectArguments,
        Int8Array: inspectTypedArray,
        Uint8Array: inspectTypedArray,
        Uint8ClampedArray: inspectTypedArray,
        Int16Array: inspectTypedArray,
        Uint16Array: inspectTypedArray,
        Int32Array: inspectTypedArray,
        Uint32Array: inspectTypedArray,
        Float32Array: inspectTypedArray,
        Float64Array: inspectTypedArray,
        Generator: function Generator() {
            return "";
        },
        DataView: function DataView() {
            return "";
        },
        ArrayBuffer: function ArrayBuffer() {
            return "";
        },
        Error: inspectObject$1,
        HTMLCollection: inspectHTMLCollection,
        NodeList: inspectHTMLCollection
    }; // eslint-disable-next-line complexity
    var inspectCustom = function inspectCustom(value, options, type) {
        if (chaiInspect in value && typeof value[chaiInspect] === "function") return value[chaiInspect](options);
        if (nodeInspect && nodeInspect in value && typeof value[nodeInspect] === "function") return value[nodeInspect](options.depth, options);
        if ("inspect" in value && typeof value.inspect === "function") return value.inspect(options.depth, options);
        if ("constructor" in value && constructorMap.has(value.constructor)) return constructorMap.get(value.constructor)(value, options);
        if (stringTagMap[type]) return stringTagMap[type](value, options);
        return "";
    };
    var toString$1 = Object.prototype.toString; // eslint-disable-next-line complexity
    function inspect(value, options) {
        options = normaliseOptions(options);
        options.inspect = inspect;
        var _options = options, customInspect = _options.customInspect;
        var type = value === null ? "null" : _typeof(value);
        if (type === "object") type = toString$1.call(value).slice(8, -1);
         // If it is a base value that we already support, then use Loupe's inspector
        if (baseTypesMap[type]) return baseTypesMap[type](value, options);
         // If `options.customInspect` is set to true then try to use the custom inspector
        if (customInspect && value) {
            var output = inspectCustom(value, options, type);
            if (output) {
                if (typeof output === "string") return output;
                return inspect(output, options);
            }
        }
        var proto = value ? Object.getPrototypeOf(value) : false; // If it's a plain Object then use Loupe's inspector
        if (proto === Object.prototype || proto === null) return inspectObject(value, options);
         // Specifically account for HTMLElements
        // eslint-disable-next-line no-undef
        if (value && typeof HTMLElement === "function" && value instanceof HTMLElement) return inspectHTML(value, options);
        if ("constructor" in value) {
            // If it is a class, inspect it like an object but add the constructor name
            if (value.constructor !== Object) return inspectClass(value, options);
             // If it is an object with an anonymous prototype, display it as an object.
            return inspectObject(value, options);
        } // last chance to check if it's an object
        if (value === Object(value)) return inspectObject(value, options);
         // We have run out of options! Just stringify the value
        return options.stylize(String(value), type);
    }
    function registerConstructor(constructor, inspector) {
        if (constructorMap.has(constructor)) return false;
        constructorMap.set(constructor, inspector);
        return true;
    }
    function registerStringTag(stringTag, inspector) {
        if (stringTag in stringTagMap) return false;
        stringTagMap[stringTag] = inspector;
        return true;
    }
    var custom = chaiInspect;
    exports1.custom = custom;
    exports1.default = inspect;
    exports1.inspect = inspect;
    exports1.registerConstructor = registerConstructor;
    exports1.registerStringTag = registerStringTag;
    Object.defineProperty(exports1, "__esModule", {
        value: true
    });
});

},{"1dfdb77923494308":"d5jf4","885ddad0cc508739":"fCgem","a1c394ada23519dc":"jhUEF"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"3o38I":[function(require,module,exports) {
module.exports = {
    /**
   * ### config.includeStack
   *
   * User configurable property, influences whether stack trace
   * is included in Assertion error message. Default of false
   * suppresses stack trace in the error message.
   *
   *     chai.config.includeStack = true;  // enable stack on error
   *
   * @param {Boolean}
   * @api public
   */ includeStack: false,
    /**
   * ### config.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @param {Boolean}
   * @api public
   */ showDiff: true,
    /**
   * ### config.truncateThreshold
   *
   * User configurable property, sets length threshold for actual and
   * expected values in assertion errors. If this threshold is exceeded, for
   * example for large data structures, the value is replaced with something
   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
   *
   * Set it to zero if you want to disable truncating altogether.
   *
   * This is especially userful when doing assertions on arrays: having this
   * set to a reasonable large value makes the failure messages readily
   * inspectable.
   *
   *     chai.config.truncateThreshold = 0;  // disable truncating
   *
   * @param {Number}
   * @api public
   */ truncateThreshold: 40,
    /**
   * ### config.useProxy
   *
   * User configurable property, defines if chai will use a Proxy to throw
   * an error when a non-existent property is read, which protects users
   * from typos when using property-based assertions.
   *
   * Set it to false if you want to disable this feature.
   *
   *     chai.config.useProxy = false;  // disable use of Proxy
   *
   * This feature is automatically disabled regardless of this config value
   * in environments that don't support proxies.
   *
   * @param {Boolean}
   * @api public
   */ useProxy: true,
    /**
   * ### config.proxyExcludedKeys
   *
   * User configurable property, defines which properties should be ignored
   * instead of throwing an error if they do not exist on the assertion.
   * This is only applied if the environment Chai is running in supports proxies and
   * if the `useProxy` configuration setting is enabled.
   * By default, `then` and `inspect` will not throw an error if they do not exist on the
   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when
   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.
   *
   *     // By default these keys will not throw an error if they do not exist on the assertion object
   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];
   *
   * @param {Array}
   * @api public
   */ proxyExcludedKeys: [
        "then",
        "catch",
        "inspect",
        "toJSON"
    ]
};

},{}],"9JDXr":[function(require,module,exports) {
/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, `lockSsfi`,
 * and `message`) will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAssertion = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags to; usually a new assertion
 * @param {Boolean} includeAll
 * @namespace Utils
 * @name transferFlags
 * @api private
 */ module.exports = function transferFlags(assertion, object, includeAll) {
    var flags = assertion.__flags || (assertion.__flags = Object.create(null));
    if (!object.__flags) object.__flags = Object.create(null);
    includeAll = arguments.length === 3 ? includeAll : true;
    for(var flag in flags)if (includeAll || flag !== "object" && flag !== "ssfi" && flag !== "lockSsfi" && flag != "message") object.__flags[flag] = flags[flag];
};

},{}],"eSQLx":[function(require,module,exports) {
"use strict";
/* globals Symbol: false, Uint8Array: false, WeakMap: false */ /*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ var type = require("4fdbe1c3af3a568f");
function FakeMap() {
    this._key = "chai/deep-eql__" + Math.random() + Date.now();
}
FakeMap.prototype = {
    get: function get(key) {
        return key[this._key];
    },
    set: function set(key, value) {
        if (Object.isExtensible(key)) Object.defineProperty(key, this._key, {
            value: value,
            configurable: true
        });
    }
};
var MemoizeMap = typeof WeakMap === "function" ? WeakMap : FakeMap;
/*!
 * Check to see if the MemoizeMap has recorded a result of the two operands
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @returns {Boolean|null} result
*/ function memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {
    // Technically, WeakMap keys can *only* be objects, not primitives.
    if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) return null;
    var leftHandMap = memoizeMap.get(leftHandOperand);
    if (leftHandMap) {
        var result = leftHandMap.get(rightHandOperand);
        if (typeof result === "boolean") return result;
    }
    return null;
}
/*!
 * Set the result of the equality into the MemoizeMap
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {MemoizeMap} memoizeMap
 * @param {Boolean} result
*/ function memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {
    // Technically, WeakMap keys can *only* be objects, not primitives.
    if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) return;
    var leftHandMap = memoizeMap.get(leftHandOperand);
    if (leftHandMap) leftHandMap.set(rightHandOperand, result);
    else {
        leftHandMap = new MemoizeMap();
        leftHandMap.set(rightHandOperand, result);
        memoizeMap.set(leftHandOperand, leftHandMap);
    }
}
/*!
 * Primary Export
 */ module.exports = deepEqual;
module.exports.MemoizeMap = MemoizeMap;
/**
 * Assert deeply nested sameValue equality between two objects of any type.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
 */ function deepEqual(leftHandOperand, rightHandOperand, options) {
    // If we have a comparator, we can't assume anything; so bail to its check first.
    if (options && options.comparator) return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
    if (simpleResult !== null) return simpleResult;
    // Deeper comparisons are pushed through to a larger function
    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);
}
/**
 * Many comparisons can be canceled out early via simple equality or primitive checks.
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @return {Boolean|null} equal match
 */ function simpleEqual(leftHandOperand, rightHandOperand) {
    // Equal references (except for Numbers) can be returned early
    if (leftHandOperand === rightHandOperand) // Handle +-0 cases
    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;
    // handle NaN cases
    if (leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare
    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare
    ) return true;
    // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,
    // strings, and undefined, can be compared by reference.
    if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) // Easy out b/c it would have passed the first equality check
    return false;
    return null;
}
/*!
 * The main logic of the `deepEqual` function.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (optional) Additional options
 * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.
 * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of
    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular
    references to blow the stack.
 * @return {Boolean} equal match
*/ function extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {
    options = options || {};
    options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();
    var comparator = options && options.comparator;
    // Check if a memoized result exists.
    var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);
    if (memoizeResultLeft !== null) return memoizeResultLeft;
    var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);
    if (memoizeResultRight !== null) return memoizeResultRight;
    // If a comparator is present, use it.
    if (comparator) {
        var comparatorResult = comparator(leftHandOperand, rightHandOperand);
        // Comparators may return null, in which case we want to go back to default behavior.
        if (comparatorResult === false || comparatorResult === true) {
            memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);
            return comparatorResult;
        }
        // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide
        // what to do, we need to make sure to return the basic tests first before we move on.
        var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);
        if (simpleResult !== null) // Don't memoize this, it takes longer to set/retrieve than to just compare.
        return simpleResult;
    }
    var leftHandType = type(leftHandOperand);
    if (leftHandType !== type(rightHandOperand)) {
        memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);
        return false;
    }
    // Temporarily set the operands in the memoize object to prevent blowing the stack
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);
    var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);
    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);
    return result;
}
function extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {
    switch(leftHandType){
        case "String":
        case "Number":
        case "Boolean":
        case "Date":
            // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values
            return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());
        case "Promise":
        case "Symbol":
        case "function":
        case "WeakMap":
        case "WeakSet":
            return leftHandOperand === rightHandOperand;
        case "Error":
            return keysEqual(leftHandOperand, rightHandOperand, [
                "name",
                "message",
                "code"
            ], options);
        case "Arguments":
        case "Int8Array":
        case "Uint8Array":
        case "Uint8ClampedArray":
        case "Int16Array":
        case "Uint16Array":
        case "Int32Array":
        case "Uint32Array":
        case "Float32Array":
        case "Float64Array":
        case "Array":
            return iterableEqual(leftHandOperand, rightHandOperand, options);
        case "RegExp":
            return regexpEqual(leftHandOperand, rightHandOperand);
        case "Generator":
            return generatorEqual(leftHandOperand, rightHandOperand, options);
        case "DataView":
            return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);
        case "ArrayBuffer":
            return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);
        case "Set":
            return entriesEqual(leftHandOperand, rightHandOperand, options);
        case "Map":
            return entriesEqual(leftHandOperand, rightHandOperand, options);
        case "Temporal.PlainDate":
        case "Temporal.PlainTime":
        case "Temporal.PlainDateTime":
        case "Temporal.Instant":
        case "Temporal.ZonedDateTime":
        case "Temporal.PlainYearMonth":
        case "Temporal.PlainMonthDay":
            return leftHandOperand.equals(rightHandOperand);
        case "Temporal.Duration":
            return leftHandOperand.total("nanoseconds") === rightHandOperand.total("nanoseconds");
        case "Temporal.TimeZone":
        case "Temporal.Calendar":
            return leftHandOperand.toString() === rightHandOperand.toString();
        default:
            return objectEqual(leftHandOperand, rightHandOperand, options);
    }
}
/*!
 * Compare two Regular Expressions for equality.
 *
 * @param {RegExp} leftHandOperand
 * @param {RegExp} rightHandOperand
 * @return {Boolean} result
 */ function regexpEqual(leftHandOperand, rightHandOperand) {
    return leftHandOperand.toString() === rightHandOperand.toString();
}
/*!
 * Compare two Sets/Maps for equality. Faster than other equality functions.
 *
 * @param {Set} leftHandOperand
 * @param {Set} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */ function entriesEqual(leftHandOperand, rightHandOperand, options) {
    // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach
    if (leftHandOperand.size !== rightHandOperand.size) return false;
    if (leftHandOperand.size === 0) return true;
    var leftHandItems = [];
    var rightHandItems = [];
    leftHandOperand.forEach(function gatherEntries(key, value) {
        leftHandItems.push([
            key,
            value
        ]);
    });
    rightHandOperand.forEach(function gatherEntries(key, value) {
        rightHandItems.push([
            key,
            value
        ]);
    });
    return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);
}
/*!
 * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */ function iterableEqual(leftHandOperand, rightHandOperand, options) {
    var length = leftHandOperand.length;
    if (length !== rightHandOperand.length) return false;
    if (length === 0) return true;
    var index = -1;
    while(++index < length){
        if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) return false;
    }
    return true;
}
/*!
 * Simple equality for generator objects such as those returned by generator functions.
 *
 * @param {Iterable} leftHandOperand
 * @param {Iterable} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */ function generatorEqual(leftHandOperand, rightHandOperand, options) {
    return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);
}
/*!
 * Determine if the given object has an @@iterator function.
 *
 * @param {Object} target
 * @return {Boolean} `true` if the object has an @@iterator function.
 */ function hasIteratorFunction(target) {
    return typeof Symbol !== "undefined" && typeof target === "object" && typeof Symbol.iterator !== "undefined" && typeof target[Symbol.iterator] === "function";
}
/*!
 * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.
 * This will consume the iterator - which could have side effects depending on the @@iterator implementation.
 *
 * @param {Object} target
 * @returns {Array} an array of entries from the @@iterator function
 */ function getIteratorEntries(target) {
    if (hasIteratorFunction(target)) try {
        return getGeneratorEntries(target[Symbol.iterator]());
    } catch (iteratorError) {
        return [];
    }
    return [];
}
/*!
 * Gets all entries from a Generator. This will consume the generator - which could have side effects.
 *
 * @param {Generator} target
 * @returns {Array} an array of entries from the Generator.
 */ function getGeneratorEntries(generator) {
    var generatorResult = generator.next();
    var accumulator = [
        generatorResult.value
    ];
    while(generatorResult.done === false){
        generatorResult = generator.next();
        accumulator.push(generatorResult.value);
    }
    return accumulator;
}
/*!
 * Gets all own and inherited enumerable keys from a target.
 *
 * @param {Object} target
 * @returns {Array} an array of own and inherited enumerable keys from the target.
 */ function getEnumerableKeys(target) {
    var keys = [];
    for(var key in target)keys.push(key);
    return keys;
}
function getEnumerableSymbols(target) {
    var keys = [];
    var allKeys = Object.getOwnPropertySymbols(target);
    for(var i = 0; i < allKeys.length; i += 1){
        var key = allKeys[i];
        if (Object.getOwnPropertyDescriptor(target, key).enumerable) keys.push(key);
    }
    return keys;
}
/*!
 * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of
 * each key. If any value of the given key is not equal, the function will return false (early).
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */ function keysEqual(leftHandOperand, rightHandOperand, keys, options) {
    var length = keys.length;
    if (length === 0) return true;
    for(var i = 0; i < length; i += 1){
        if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) return false;
    }
    return true;
}
/*!
 * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`
 * for each enumerable key in the object.
 *
 * @param {Mixed} leftHandOperand
 * @param {Mixed} rightHandOperand
 * @param {Object} [options] (Optional)
 * @return {Boolean} result
 */ function objectEqual(leftHandOperand, rightHandOperand, options) {
    var leftHandKeys = getEnumerableKeys(leftHandOperand);
    var rightHandKeys = getEnumerableKeys(rightHandOperand);
    var leftHandSymbols = getEnumerableSymbols(leftHandOperand);
    var rightHandSymbols = getEnumerableSymbols(rightHandOperand);
    leftHandKeys = leftHandKeys.concat(leftHandSymbols);
    rightHandKeys = rightHandKeys.concat(rightHandSymbols);
    if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {
        if (iterableEqual(mapSymbols(leftHandKeys).sort(), mapSymbols(rightHandKeys).sort()) === false) return false;
        return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);
    }
    var leftHandEntries = getIteratorEntries(leftHandOperand);
    var rightHandEntries = getIteratorEntries(rightHandOperand);
    if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {
        leftHandEntries.sort();
        rightHandEntries.sort();
        return iterableEqual(leftHandEntries, rightHandEntries, options);
    }
    if (leftHandKeys.length === 0 && leftHandEntries.length === 0 && rightHandKeys.length === 0 && rightHandEntries.length === 0) return true;
    return false;
}
/*!
 * Returns true if the argument is a primitive.
 *
 * This intentionally returns true for all objects that can be compared by reference,
 * including functions and symbols.
 *
 * @param {Mixed} value
 * @return {Boolean} result
 */ function isPrimitive(value) {
    return value === null || typeof value !== "object";
}
function mapSymbols(arr) {
    return arr.map(function mapSymbol(entry) {
        if (typeof entry === "symbol") return entry.toString();
        return entry;
    });
}

},{"4fdbe1c3af3a568f":"3FPeG"}],"1wLK1":[function(require,module,exports) {
/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ var chai = require("edc3be967053427");
var flag = require("93da2208dec59b72");
var isProxyEnabled = require("1d76420e00fc5cd4");
var transferFlags = require("1a11494b2500ba02");
/**
 * ### .addProperty(ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @namespace Utils
 * @name addProperty
 * @api public
 */ module.exports = function addProperty(ctx, name, getter) {
    getter = getter === undefined ? function() {} : getter;
    Object.defineProperty(ctx, name, {
        get: function propertyGetter() {
            // Setting the `ssfi` flag to `propertyGetter` causes this function to
            // be the starting point for removing implementation frames from the
            // stack trace of a failed assertion.
            //
            // However, we only want to use this function as the starting point if
            // the `lockSsfi` flag isn't set and proxy protection is disabled.
            //
            // If the `lockSsfi` flag is set, then either this assertion has been
            // overwritten by another assertion, or this assertion is being invoked
            // from inside of another assertion. In the first case, the `ssfi` flag
            // has already been set by the overwriting assertion. In the second
            // case, the `ssfi` flag has already been set by the outer assertion.
            //
            // If proxy protection is enabled, then the `ssfi` flag has already been
            // set by the proxy getter.
            if (!isProxyEnabled() && !flag(this, "lockSsfi")) flag(this, "ssfi", propertyGetter);
            var result = getter.call(this);
            if (result !== undefined) return result;
            var newAssertion = new chai.Assertion();
            transferFlags(this, newAssertion);
            return newAssertion;
        },
        configurable: true
    });
};

},{"edc3be967053427":"987s3","93da2208dec59b72":"2uXxS","1d76420e00fc5cd4":"gdvUl","1a11494b2500ba02":"9JDXr"}],"gdvUl":[function(require,module,exports) {
var config = require("eebda6e7bb575db6");
/*!
 * Chai - isProxyEnabled helper
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .isProxyEnabled()
 *
 * Helper function to check if Chai's proxy protection feature is enabled. If
 * proxies are unsupported or disabled via the user's Chai config, then return
 * false. Otherwise, return true.
 *
 * @namespace Utils
 * @name isProxyEnabled
 */ module.exports = function isProxyEnabled() {
    return config.useProxy && typeof Proxy !== "undefined" && typeof Reflect !== "undefined";
};

},{"eebda6e7bb575db6":"3o38I"}],"jfKUp":[function(require,module,exports) {
/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ var addLengthGuard = require("f3765319e2a8814b");
var chai = require("2ac0b50ac064580d");
var flag = require("802886cde08eb4f6");
var proxify = require("1d25978e8e89239b");
var transferFlags = require("e6633a9b262408ad");
/**
 * ### .addMethod(ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @namespace Utils
 * @name addMethod
 * @api public
 */ module.exports = function addMethod(ctx, name, method) {
    var methodWrapper = function() {
        // Setting the `ssfi` flag to `methodWrapper` causes this function to be the
        // starting point for removing implementation frames from the stack trace of
        // a failed assertion.
        //
        // However, we only want to use this function as the starting point if the
        // `lockSsfi` flag isn't set.
        //
        // If the `lockSsfi` flag is set, then either this assertion has been
        // overwritten by another assertion, or this assertion is being invoked from
        // inside of another assertion. In the first case, the `ssfi` flag has
        // already been set by the overwriting assertion. In the second case, the
        // `ssfi` flag has already been set by the outer assertion.
        if (!flag(this, "lockSsfi")) flag(this, "ssfi", methodWrapper);
        var result = method.apply(this, arguments);
        if (result !== undefined) return result;
        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
    };
    addLengthGuard(methodWrapper, name, false);
    ctx[name] = proxify(methodWrapper, name);
};

},{"f3765319e2a8814b":"aIOwj","2ac0b50ac064580d":"987s3","802886cde08eb4f6":"2uXxS","1d25978e8e89239b":"2bkgI","e6633a9b262408ad":"9JDXr"}],"aIOwj":[function(require,module,exports) {
var fnLengthDesc = Object.getOwnPropertyDescriptor(function() {}, "length");
/*!
 * Chai - addLengthGuard utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .addLengthGuard(fn, assertionName, isChainable)
 *
 * Define `length` as a getter on the given uninvoked method assertion. The
 * getter acts as a guard against chaining `length` directly off of an uninvoked
 * method assertion, which is a problem because it references `function`'s
 * built-in `length` property instead of Chai's `length` assertion. When the
 * getter catches the user making this mistake, it throws an error with a
 * helpful message.
 *
 * There are two ways in which this mistake can be made. The first way is by
 * chaining the `length` assertion directly off of an uninvoked chainable
 * method. In this case, Chai suggests that the user use `lengthOf` instead. The
 * second way is by chaining the `length` assertion directly off of an uninvoked
 * non-chainable method. Non-chainable methods must be invoked prior to
 * chaining. In this case, Chai suggests that the user consult the docs for the
 * given assertion.
 *
 * If the `length` property of functions is unconfigurable, then return `fn`
 * without modification.
 *
 * Note that in ES6, the function's `length` property is configurable, so once
 * support for legacy environments is dropped, Chai's `length` property can
 * replace the built-in function's `length` property, and this length guard will
 * no longer be necessary. In the mean time, maintaining consistency across all
 * environments is the priority.
 *
 * @param {Function} fn
 * @param {String} assertionName
 * @param {Boolean} isChainable
 * @namespace Utils
 * @name addLengthGuard
 */ module.exports = function addLengthGuard(fn, assertionName, isChainable) {
    if (!fnLengthDesc.configurable) return fn;
    Object.defineProperty(fn, "length", {
        get: function() {
            if (isChainable) throw Error("Invalid Chai property: " + assertionName + ".length. Due" + ' to a compatibility issue, "length" cannot directly follow "' + assertionName + '". Use "' + assertionName + '.lengthOf" instead.');
            throw Error("Invalid Chai property: " + assertionName + ".length. See" + ' docs for proper usage of "' + assertionName + '".');
        }
    });
    return fn;
};

},{}],"2bkgI":[function(require,module,exports) {
var config = require("5629c52185526e71");
var flag = require("c0ed4c1543f14b6e");
var getProperties = require("42f709c4a5b9765e");
var isProxyEnabled = require("2bbf5564126774a1");
/*!
 * Chai - proxify utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .proxify(object)
 *
 * Return a proxy of given object that throws an error when a non-existent
 * property is read. By default, the root cause is assumed to be a misspelled
 * property, and thus an attempt is made to offer a reasonable suggestion from
 * the list of existing properties. However, if a nonChainableMethodName is
 * provided, then the root cause is instead a failure to invoke a non-chainable
 * method prior to reading the non-existent property.
 *
 * If proxies are unsupported or disabled via the user's Chai config, then
 * return object without modification.
 *
 * @param {Object} obj
 * @param {String} nonChainableMethodName
 * @namespace Utils
 * @name proxify
 */ var builtins = [
    "__flags",
    "__methods",
    "_obj",
    "assert"
];
module.exports = function proxify(obj, nonChainableMethodName) {
    if (!isProxyEnabled()) return obj;
    return new Proxy(obj, {
        get: function proxyGetter(target, property) {
            // This check is here because we should not throw errors on Symbol properties
            // such as `Symbol.toStringTag`.
            // The values for which an error should be thrown can be configured using
            // the `config.proxyExcludedKeys` setting.
            if (typeof property === "string" && config.proxyExcludedKeys.indexOf(property) === -1 && !Reflect.has(target, property)) {
                // Special message for invalid property access of non-chainable methods.
                if (nonChainableMethodName) throw Error("Invalid Chai property: " + nonChainableMethodName + "." + property + '. See docs for proper usage of "' + nonChainableMethodName + '".');
                // If the property is reasonably close to an existing Chai property,
                // suggest that property to the user. Only suggest properties with a
                // distance less than 4.
                var suggestion = null;
                var suggestionDistance = 4;
                getProperties(target).forEach(function(prop) {
                    if (!Object.prototype.hasOwnProperty(prop) && builtins.indexOf(prop) === -1) {
                        var dist = stringDistanceCapped(property, prop, suggestionDistance);
                        if (dist < suggestionDistance) {
                            suggestion = prop;
                            suggestionDistance = dist;
                        }
                    }
                });
                if (suggestion !== null) throw Error("Invalid Chai property: " + property + '. Did you mean "' + suggestion + '"?');
                else throw Error("Invalid Chai property: " + property);
            }
            // Use this proxy getter as the starting point for removing implementation
            // frames from the stack trace of a failed assertion. For property
            // assertions, this prevents the proxy getter from showing up in the stack
            // trace since it's invoked before the property getter. For method and
            // chainable method assertions, this flag will end up getting changed to
            // the method wrapper, which is good since this frame will no longer be in
            // the stack once the method is invoked. Note that Chai builtin assertion
            // properties such as `__flags` are skipped since this is only meant to
            // capture the starting point of an assertion. This step is also skipped
            // if the `lockSsfi` flag is set, thus indicating that this assertion is
            // being called from within another assertion. In that case, the `ssfi`
            // flag is already set to the outer assertion's starting point.
            if (builtins.indexOf(property) === -1 && !flag(target, "lockSsfi")) flag(target, "ssfi", proxyGetter);
            return Reflect.get(target, property);
        }
    });
};
/**
 * # stringDistanceCapped(strA, strB, cap)
 * Return the Levenshtein distance between two strings, but no more than cap.
 * @param {string} strA
 * @param {string} strB
 * @param {number} number
 * @return {number} min(string distance between strA and strB, cap)
 * @api private
 */ function stringDistanceCapped(strA, strB, cap) {
    if (Math.abs(strA.length - strB.length) >= cap) return cap;
    var memo = [];
    // `memo` is a two-dimensional array containing distances.
    // memo[i][j] is the distance between strA.slice(0, i) and
    // strB.slice(0, j).
    for(var i = 0; i <= strA.length; i++){
        memo[i] = Array(strB.length + 1).fill(0);
        memo[i][0] = i;
    }
    for(var j = 0; j < strB.length; j++)memo[0][j] = j;
    for(var i = 1; i <= strA.length; i++){
        var ch = strA.charCodeAt(i - 1);
        for(var j = 1; j <= strB.length; j++){
            if (Math.abs(i - j) >= cap) {
                memo[i][j] = cap;
                continue;
            }
            memo[i][j] = Math.min(memo[i - 1][j] + 1, memo[i][j - 1] + 1, memo[i - 1][j - 1] + (ch === strB.charCodeAt(j - 1) ? 0 : 1));
        }
    }
    return memo[strA.length][strB.length];
}

},{"5629c52185526e71":"3o38I","c0ed4c1543f14b6e":"2uXxS","42f709c4a5b9765e":"aWU7r","2bbf5564126774a1":"gdvUl"}],"aWU7r":[function(require,module,exports) {
/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getProperties
 * @api public
 */ module.exports = function getProperties(object) {
    var result = Object.getOwnPropertyNames(object);
    function addProperty(property) {
        if (result.indexOf(property) === -1) result.push(property);
    }
    var proto = Object.getPrototypeOf(object);
    while(proto !== null){
        Object.getOwnPropertyNames(proto).forEach(addProperty);
        proto = Object.getPrototypeOf(proto);
    }
    return result;
};

},{}],"dVeIn":[function(require,module,exports) {
/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ var chai = require("7a2ad148129f46db");
var flag = require("9be42eb569b31c03");
var isProxyEnabled = require("2d70f89a04d7b240");
var transferFlags = require("9b7da6d00f9a0f01");
/**
 * ### .overwriteProperty(ctx, name, fn)
 *
 * Overwrites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @namespace Utils
 * @name overwriteProperty
 * @api public
 */ module.exports = function overwriteProperty(ctx, name, getter) {
    var _get = Object.getOwnPropertyDescriptor(ctx, name), _super = function() {};
    if (_get && "function" === typeof _get.get) _super = _get.get;
    Object.defineProperty(ctx, name, {
        get: function overwritingPropertyGetter() {
            // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this
            // function to be the starting point for removing implementation frames
            // from the stack trace of a failed assertion.
            //
            // However, we only want to use this function as the starting point if
            // the `lockSsfi` flag isn't set and proxy protection is disabled.
            //
            // If the `lockSsfi` flag is set, then either this assertion has been
            // overwritten by another assertion, or this assertion is being invoked
            // from inside of another assertion. In the first case, the `ssfi` flag
            // has already been set by the overwriting assertion. In the second
            // case, the `ssfi` flag has already been set by the outer assertion.
            //
            // If proxy protection is enabled, then the `ssfi` flag has already been
            // set by the proxy getter.
            if (!isProxyEnabled() && !flag(this, "lockSsfi")) flag(this, "ssfi", overwritingPropertyGetter);
            // Setting the `lockSsfi` flag to `true` prevents the overwritten
            // assertion from changing the `ssfi` flag. By this point, the `ssfi`
            // flag is already set to the correct starting point for this assertion.
            var origLockSsfi = flag(this, "lockSsfi");
            flag(this, "lockSsfi", true);
            var result = getter(_super).call(this);
            flag(this, "lockSsfi", origLockSsfi);
            if (result !== undefined) return result;
            var newAssertion = new chai.Assertion();
            transferFlags(this, newAssertion);
            return newAssertion;
        },
        configurable: true
    });
};

},{"7a2ad148129f46db":"987s3","9be42eb569b31c03":"2uXxS","2d70f89a04d7b240":"gdvUl","9b7da6d00f9a0f01":"9JDXr"}],"jvrZi":[function(require,module,exports) {
/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ var addLengthGuard = require("8088cf7bb887ef9d");
var chai = require("47e6da0b8ecadd9d");
var flag = require("a0c847aae26b5570");
var proxify = require("83ce13529ec56bec");
var transferFlags = require("2b3353df8b6cb069");
/**
 * ### .overwriteMethod(ctx, name, fn)
 *
 * Overwrites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @namespace Utils
 * @name overwriteMethod
 * @api public
 */ module.exports = function overwriteMethod(ctx, name, method) {
    var _method = ctx[name], _super = function() {
        throw new Error(name + " is not a function");
    };
    if (_method && "function" === typeof _method) _super = _method;
    var overwritingMethodWrapper = function() {
        // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this
        // function to be the starting point for removing implementation frames from
        // the stack trace of a failed assertion.
        //
        // However, we only want to use this function as the starting point if the
        // `lockSsfi` flag isn't set.
        //
        // If the `lockSsfi` flag is set, then either this assertion has been
        // overwritten by another assertion, or this assertion is being invoked from
        // inside of another assertion. In the first case, the `ssfi` flag has
        // already been set by the overwriting assertion. In the second case, the
        // `ssfi` flag has already been set by the outer assertion.
        if (!flag(this, "lockSsfi")) flag(this, "ssfi", overwritingMethodWrapper);
        // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion
        // from changing the `ssfi` flag. By this point, the `ssfi` flag is already
        // set to the correct starting point for this assertion.
        var origLockSsfi = flag(this, "lockSsfi");
        flag(this, "lockSsfi", true);
        var result = method(_super).apply(this, arguments);
        flag(this, "lockSsfi", origLockSsfi);
        if (result !== undefined) return result;
        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
    };
    addLengthGuard(overwritingMethodWrapper, name, false);
    ctx[name] = proxify(overwritingMethodWrapper, name);
};

},{"8088cf7bb887ef9d":"aIOwj","47e6da0b8ecadd9d":"987s3","a0c847aae26b5570":"2uXxS","83ce13529ec56bec":"2bkgI","2b3353df8b6cb069":"9JDXr"}],"bRFhp":[function(require,module,exports) {
/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /*!
 * Module dependencies
 */ var addLengthGuard = require("7dbb1ea97ec35e37");
var chai = require("bb7b7a05532e8311");
var flag = require("e7a7cd477bc13cb5");
var proxify = require("204567fcfc46d3a2");
var transferFlags = require("d28cb1998682f883");
/*!
 * Module variables
 */ // Check whether `Object.setPrototypeOf` is supported
var canSetPrototype = typeof Object.setPrototypeOf === "function";
// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.
// However, some of functions' own props are not configurable and should be skipped.
var testFn = function() {};
var excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {
    var propDesc = Object.getOwnPropertyDescriptor(testFn, name);
    // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,
    // but then returns `undefined` as the property descriptor for `callee`. As a
    // workaround, we perform an otherwise unnecessary type-check for `propDesc`,
    // and then filter it out if it's not an object as it should be.
    if (typeof propDesc !== "object") return true;
    return !propDesc.configurable;
});
// Cache `Function` properties
var call = Function.prototype.call, apply = Function.prototype.apply;
/**
 * ### .addChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @namespace Utils
 * @name addChainableMethod
 * @api public
 */ module.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {
    if (typeof chainingBehavior !== "function") chainingBehavior = function() {};
    var chainableBehavior = {
        method: method,
        chainingBehavior: chainingBehavior
    };
    // save the methods so we can overwrite them later, if we need to.
    if (!ctx.__methods) ctx.__methods = {};
    ctx.__methods[name] = chainableBehavior;
    Object.defineProperty(ctx, name, {
        get: function chainableMethodGetter() {
            chainableBehavior.chainingBehavior.call(this);
            var chainableMethodWrapper = function() {
                // Setting the `ssfi` flag to `chainableMethodWrapper` causes this
                // function to be the starting point for removing implementation
                // frames from the stack trace of a failed assertion.
                //
                // However, we only want to use this function as the starting point if
                // the `lockSsfi` flag isn't set.
                //
                // If the `lockSsfi` flag is set, then this assertion is being
                // invoked from inside of another assertion. In this case, the `ssfi`
                // flag has already been set by the outer assertion.
                //
                // Note that overwriting a chainable method merely replaces the saved
                // methods in `ctx.__methods` instead of completely replacing the
                // overwritten assertion. Therefore, an overwriting assertion won't
                // set the `ssfi` or `lockSsfi` flags.
                if (!flag(this, "lockSsfi")) flag(this, "ssfi", chainableMethodWrapper);
                var result = chainableBehavior.method.apply(this, arguments);
                if (result !== undefined) return result;
                var newAssertion = new chai.Assertion();
                transferFlags(this, newAssertion);
                return newAssertion;
            };
            addLengthGuard(chainableMethodWrapper, name, true);
            // Use `Object.setPrototypeOf` if available
            if (canSetPrototype) {
                // Inherit all properties from the object by replacing the `Function` prototype
                var prototype = Object.create(this);
                // Restore the `call` and `apply` methods from `Function`
                prototype.call = call;
                prototype.apply = apply;
                Object.setPrototypeOf(chainableMethodWrapper, prototype);
            } else {
                var asserterNames = Object.getOwnPropertyNames(ctx);
                asserterNames.forEach(function(asserterName) {
                    if (excludeNames.indexOf(asserterName) !== -1) return;
                    var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
                    Object.defineProperty(chainableMethodWrapper, asserterName, pd);
                });
            }
            transferFlags(this, chainableMethodWrapper);
            return proxify(chainableMethodWrapper);
        },
        configurable: true
    });
};

},{"7dbb1ea97ec35e37":"aIOwj","bb7b7a05532e8311":"987s3","e7a7cd477bc13cb5":"2uXxS","204567fcfc46d3a2":"2bkgI","d28cb1998682f883":"9JDXr"}],"fvTc2":[function(require,module,exports) {
/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ var chai = require("2f60cad68ca0d9c");
var transferFlags = require("e054354ccc69f0f9");
/**
 * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)
 *
 * Overwrites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.lengthOf(3);
 *     expect(myFoo).to.have.lengthOf.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @namespace Utils
 * @name overwriteChainableMethod
 * @api public
 */ module.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {
    var chainableBehavior = ctx.__methods[name];
    var _chainingBehavior = chainableBehavior.chainingBehavior;
    chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {
        var result = chainingBehavior(_chainingBehavior).call(this);
        if (result !== undefined) return result;
        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
    };
    var _method = chainableBehavior.method;
    chainableBehavior.method = function overwritingChainableMethodWrapper() {
        var result = method(_method).apply(this, arguments);
        if (result !== undefined) return result;
        var newAssertion = new chai.Assertion();
        transferFlags(this, newAssertion);
        return newAssertion;
    };
};

},{"2f60cad68ca0d9c":"987s3","e054354ccc69f0f9":"9JDXr"}],"8yAxg":[function(require,module,exports) {
/*!
 * Chai - compareByInspect utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /*!
 * Module dependencies
 */ var inspect = require("6050aafde87ce8bf");
/**
 * ### .compareByInspect(mixed, mixed)
 *
 * To be used as a compareFunction with Array.prototype.sort. Compares elements
 * using inspect instead of default behavior of using toString so that Symbols
 * and objects with irregular/missing toString can still be sorted without a
 * TypeError.
 *
 * @param {Mixed} first element to compare
 * @param {Mixed} second element to compare
 * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1
 * @name compareByInspect
 * @namespace Utils
 * @api public
 */ module.exports = function compareByInspect(a, b) {
    return inspect(a) < inspect(b) ? -1 : 1;
};

},{"6050aafde87ce8bf":"gYoyp"}],"2sJ9g":[function(require,module,exports) {
/*!
 * Chai - getOwnEnumerablePropertySymbols utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .getOwnEnumerablePropertySymbols(object)
 *
 * This allows the retrieval of directly-owned enumerable property symbols of an
 * object. This function is necessary because Object.getOwnPropertySymbols
 * returns both enumerable and non-enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerablePropertySymbols
 * @api public
 */ module.exports = function getOwnEnumerablePropertySymbols(obj) {
    if (typeof Object.getOwnPropertySymbols !== "function") return [];
    return Object.getOwnPropertySymbols(obj).filter(function(sym) {
        return Object.getOwnPropertyDescriptor(obj, sym).enumerable;
    });
};

},{}],"aOTea":[function(require,module,exports) {
/*!
 * Chai - getOwnEnumerableProperties utility
 * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /*!
 * Module dependencies
 */ var getOwnEnumerablePropertySymbols = require("f160d108f7dc2bcd");
/**
 * ### .getOwnEnumerableProperties(object)
 *
 * This allows the retrieval of directly-owned enumerable property names and
 * symbols of an object. This function is necessary because Object.keys only
 * returns enumerable property names, not enumerable property symbols.
 *
 * @param {Object} object
 * @returns {Array}
 * @namespace Utils
 * @name getOwnEnumerableProperties
 * @api public
 */ module.exports = function getOwnEnumerableProperties(obj) {
    return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));
};

},{"f160d108f7dc2bcd":"2sJ9g"}],"97a9r":[function(require,module,exports) {
"use strict";
/* !
 * Chai - checkError utility
 * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ /**
 * ### .checkError
 *
 * Checks that an error conforms to a given set of criteria and/or retrieves information about it.
 *
 * @api public
 */ /**
 * ### .compatibleInstance(thrown, errorLike)
 *
 * Checks if two instances are compatible (strict equal).
 * Returns false if errorLike is not an instance of Error, because instances
 * can only be compatible if they're both error instances.
 *
 * @name compatibleInstance
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */ function compatibleInstance(thrown, errorLike) {
    return errorLike instanceof Error && thrown === errorLike;
}
/**
 * ### .compatibleConstructor(thrown, errorLike)
 *
 * Checks if two constructors are compatible.
 * This function can receive either an error constructor or
 * an error instance as the `errorLike` argument.
 * Constructors are compatible if they're the same or if one is
 * an instance of another.
 *
 * @name compatibleConstructor
 * @param {Error} thrown error
 * @param {Error|ErrorConstructor} errorLike object to compare against
 * @namespace Utils
 * @api public
 */ function compatibleConstructor(thrown, errorLike) {
    if (errorLike instanceof Error) // If `errorLike` is an instance of any error we compare their constructors
    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;
    else if (errorLike.prototype instanceof Error || errorLike === Error) // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly
    return thrown.constructor === errorLike || thrown instanceof errorLike;
    return false;
}
/**
 * ### .compatibleMessage(thrown, errMatcher)
 *
 * Checks if an error's message is compatible with a matcher (String or RegExp).
 * If the message contains the String or passes the RegExp test,
 * it is considered compatible.
 *
 * @name compatibleMessage
 * @param {Error} thrown error
 * @param {String|RegExp} errMatcher to look for into the message
 * @namespace Utils
 * @api public
 */ function compatibleMessage(thrown, errMatcher) {
    var comparisonString = typeof thrown === "string" ? thrown : thrown.message;
    if (errMatcher instanceof RegExp) return errMatcher.test(comparisonString);
    else if (typeof errMatcher === "string") return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers
    return false;
}
/**
 * ### .getFunctionName(constructorFn)
 *
 * Returns the name of a function.
 * This also includes a polyfill function if `constructorFn.name` is not defined.
 *
 * @name getFunctionName
 * @param {Function} constructorFn
 * @namespace Utils
 * @api private
 */ var functionNameMatch = /\s*function(?:\s|\s*\/\*[^(?:*\/)]+\*\/\s*)*([^\(\/]+)/;
function getFunctionName(constructorFn) {
    var name = "";
    if (typeof constructorFn.name === "undefined") {
        // Here we run a polyfill if constructorFn.name is not defined
        var match = String(constructorFn).match(functionNameMatch);
        if (match) name = match[1];
    } else name = constructorFn.name;
    return name;
}
/**
 * ### .getConstructorName(errorLike)
 *
 * Gets the constructor name for an Error instance or constructor itself.
 *
 * @name getConstructorName
 * @param {Error|ErrorConstructor} errorLike
 * @namespace Utils
 * @api public
 */ function getConstructorName(errorLike) {
    var constructorName = errorLike;
    if (errorLike instanceof Error) constructorName = getFunctionName(errorLike.constructor);
    else if (typeof errorLike === "function") // If `err` is not an instance of Error it is an error constructor itself or another function.
    // If we've got a common function we get its name, otherwise we may need to create a new instance
    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.
    constructorName = getFunctionName(errorLike).trim() || getFunctionName(new errorLike()); // eslint-disable-line new-cap
    return constructorName;
}
/**
 * ### .getMessage(errorLike)
 *
 * Gets the error message from an error.
 * If `err` is a String itself, we return it.
 * If the error has no message, we return an empty string.
 *
 * @name getMessage
 * @param {Error|String} errorLike
 * @namespace Utils
 * @api public
 */ function getMessage(errorLike) {
    var msg = "";
    if (errorLike && errorLike.message) msg = errorLike.message;
    else if (typeof errorLike === "string") msg = errorLike;
    return msg;
}
module.exports = {
    compatibleInstance: compatibleInstance,
    compatibleConstructor: compatibleConstructor,
    compatibleMessage: compatibleMessage,
    getMessage: getMessage,
    getConstructorName: getConstructorName
};

},{}],"79Vnu":[function(require,module,exports) {
/*!
 * Chai - isNaN utility
 * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>
 * MIT Licensed
 */ /**
 * ### .isNaN(value)
 *
 * Checks if the given value is NaN or not.
 *
 *     utils.isNaN(NaN); // true
 *
 * @param {Value} The value which has to be checked if it is NaN
 * @name isNaN
 * @api private
 */ function isNaN(value) {
    // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number
    // section's NOTE.
    return value !== value;
}
// If ECMAScript 6's Number.isNaN is present, prefer that.
module.exports = Number.isNaN || isNaN;

},{}],"8j1Y5":[function(require,module,exports) {
var type = require("76d7bba58c36a1d");
var flag = require("8961b1e75ed2bcc");
function isObjectType(obj) {
    var objectType = type(obj);
    var objectTypes = [
        "Array",
        "Object",
        "function"
    ];
    return objectTypes.indexOf(objectType) !== -1;
}
/**
 * ### .getOperator(message)
 *
 * Extract the operator from error message.
 * Operator defined is based on below link
 * https://nodejs.org/api/assert.html#assert_assert.
 *
 * Returns the `operator` or `undefined` value for an Assertion.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @namespace Utils
 * @name getOperator
 * @api public
 */ module.exports = function getOperator(obj, args) {
    var operator = flag(obj, "operator");
    var negate = flag(obj, "negate");
    var expected = args[3];
    var msg = negate ? args[2] : args[1];
    if (operator) return operator;
    if (typeof msg === "function") msg = msg();
    msg = msg || "";
    if (!msg) return undefined;
    if (/\shave\s/.test(msg)) return undefined;
    var isObject = isObjectType(expected);
    if (/\snot\s/.test(msg)) return isObject ? "notDeepStrictEqual" : "notStrictEqual";
    return isObject ? "deepStrictEqual" : "strictEqual";
};

},{"76d7bba58c36a1d":"3FPeG","8961b1e75ed2bcc":"2uXxS"}],"16kJC":[function(require,module,exports) {
/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ var config = require("a06ecc4e96b2a0d");
module.exports = function(_chai, util) {
    /*!
   * Module dependencies.
   */ var AssertionError = _chai.AssertionError, flag = util.flag;
    /*!
   * Module export.
   */ _chai.Assertion = Assertion;
    /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * `Assertion` objects contain metadata in the form of flags. Three flags can
   * be assigned during instantiation by passing arguments to this constructor:
   *
   * - `object`: This flag contains the target of the assertion. For example, in
   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will
   *   contain `numKittens` so that the `equal` assertion can reference it when
   *   needed.
   *
   * - `message`: This flag contains an optional custom error message to be
   *   prepended to the error message that's generated by the assertion when it
   *   fails.
   *
   * - `ssfi`: This flag stands for "start stack function indicator". It
   *   contains a function reference that serves as the starting point for
   *   removing frames from the stack trace of the error that's created by the
   *   assertion when it fails. The goal is to provide a cleaner stack trace to
   *   end users by removing Chai's internal functions. Note that it only works
   *   in environments that support `Error.captureStackTrace`, and only when
   *   `Chai.config.includeStack` hasn't been set to `false`.
   *
   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag
   *   should retain its current value, even as assertions are chained off of
   *   this object. This is usually set to `true` when creating a new assertion
   *   from within another assertion. It's also temporarily set to `true` before
   *   an overwritten assertion gets called by the overwriting assertion.
   *
   * @param {Mixed} obj target of the assertion
   * @param {String} msg (optional) custom error message
   * @param {Function} ssfi (optional) starting point for removing stack frames
   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked
   * @api private
   */ function Assertion(obj, msg, ssfi, lockSsfi) {
        flag(this, "ssfi", ssfi || Assertion);
        flag(this, "lockSsfi", lockSsfi);
        flag(this, "object", obj);
        flag(this, "message", msg);
        return util.proxify(this);
    }
    Object.defineProperty(Assertion, "includeStack", {
        get: function() {
            console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead.");
            return config.includeStack;
        },
        set: function(value) {
            console.warn("Assertion.includeStack is deprecated, use chai.config.includeStack instead.");
            config.includeStack = value;
        }
    });
    Object.defineProperty(Assertion, "showDiff", {
        get: function() {
            console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead.");
            return config.showDiff;
        },
        set: function(value) {
            console.warn("Assertion.showDiff is deprecated, use chai.config.showDiff instead.");
            config.showDiff = value;
        }
    });
    Assertion.addProperty = function(name, fn) {
        util.addProperty(this.prototype, name, fn);
    };
    Assertion.addMethod = function(name, fn) {
        util.addMethod(this.prototype, name, fn);
    };
    Assertion.addChainableMethod = function(name, fn, chainingBehavior) {
        util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
    };
    Assertion.overwriteProperty = function(name, fn) {
        util.overwriteProperty(this.prototype, name, fn);
    };
    Assertion.overwriteMethod = function(name, fn) {
        util.overwriteMethod(this.prototype, name, fn);
    };
    Assertion.overwriteChainableMethod = function(name, fn, chainingBehavior) {
        util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
    };
    /**
   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String|Function} message or function that returns message to display if expression fails
   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
   * @api private
   */ Assertion.prototype.assert = function(expr, msg, negateMsg, expected, _actual, showDiff) {
        var ok = util.test(this, arguments);
        if (false !== showDiff) showDiff = true;
        if (undefined === expected && undefined === _actual) showDiff = false;
        if (true !== config.showDiff) showDiff = false;
        if (!ok) {
            msg = util.getMessage(this, arguments);
            var actual = util.getActual(this, arguments);
            var assertionErrorObjectProperties = {
                actual: actual,
                expected: expected,
                showDiff: showDiff
            };
            var operator = util.getOperator(this, arguments);
            if (operator) assertionErrorObjectProperties.operator = operator;
            throw new AssertionError(msg, assertionErrorObjectProperties, config.includeStack ? this.assert : flag(this, "ssfi"));
        }
    };
    /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */ Object.defineProperty(Assertion.prototype, "_obj", {
        get: function() {
            return flag(this, "object");
        },
        set: function(val) {
            flag(this, "object", val);
        }
    });
};

},{"a06ecc4e96b2a0d":"3o38I"}],"5mKbi":[function(require,module,exports) {
/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ module.exports = function(chai, _) {
    var Assertion = chai.Assertion, AssertionError = chai.AssertionError, flag = _.flag;
    /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to improve the readability
   * of your assertions.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - which
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   * - but
   * - does
   * - still
   * - also
   *
   * @name language chains
   * @namespace BDD
   * @api public
   */ [
        "to",
        "be",
        "been",
        "is",
        "and",
        "has",
        "have",
        "with",
        "that",
        "which",
        "at",
        "of",
        "same",
        "but",
        "does",
        "still",
        "also"
    ].forEach(function(chain) {
        Assertion.addProperty(chain);
    });
    /**
   * ### .not
   *
   * Negates all assertions that follow in the chain.
   *
   *     expect(function () {}).to.not.throw();
   *     expect({a: 1}).to.not.have.property('b');
   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);
   *
   * Just because you can negate any assertion with `.not` doesn't mean you
   * should. With great power comes great responsibility. It's often best to
   * assert that the one expected output was produced, rather than asserting
   * that one of countless unexpected outputs wasn't produced. See individual
   * assertions for specific guidance.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.equal(1); // Not recommended
   *
   * @name not
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("not", function() {
        flag(this, "negate", true);
    });
    /**
   * ### .deep
   *
   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`
   * assertions that follow in the chain to use deep equality instead of strict
   * (`===`) equality. See the `deep-eql` project page for info on the deep
   * equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * @name deep
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("deep", function() {
        flag(this, "deep", true);
    });
    /**
   * ### .nested
   *
   * Enables dot- and bracket-notation in all `.property` and `.include`
   * assertions that follow in the chain.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\.a.\\[b\\]': 'x'});
   *
   * `.nested` cannot be combined with `.own`.
   *
   * @name nested
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("nested", function() {
        flag(this, "nested", true);
    });
    /**
   * ### .own
   *
   * Causes all `.property` and `.include` assertions that follow in the chain
   * to ignore inherited properties.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.property('b');
   *     expect({a: 1}).to.not.have.own.property('b');
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * `.own` cannot be combined with `.nested`.
   *
   * @name own
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("own", function() {
        flag(this, "own", true);
    });
    /**
   * ### .ordered
   *
   * Causes all `.members` assertions that follow in the chain to require that
   * members be in the same order.
   *
   *     expect([1, 2]).to.have.ordered.members([1, 2])
   *       .but.not.have.ordered.members([2, 1]);
   *
   * When `.include` and `.ordered` are combined, the ordering begins at the
   * start of both arrays.
   *
   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])
   *       .but.not.include.ordered.members([2, 3]);
   *
   * @name ordered
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("ordered", function() {
        flag(this, "ordered", true);
    });
    /**
   * ### .any
   *
   * Causes all `.keys` assertions that follow in the chain to only require that
   * the target have at least one of the given keys. This is the opposite of
   * `.all`, which requires that the target have all of the given keys.
   *
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name any
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("any", function() {
        flag(this, "any", true);
        flag(this, "all", false);
    });
    /**
   * ### .all
   *
   * Causes all `.keys` assertions that follow in the chain to require that the
   * target have all of the given keys. This is the opposite of `.any`, which
   * only requires that the target have at least one of the given keys.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` are
   * added earlier in the chain. However, it's often best to add `.all` anyway
   * because it improves readability.
   *
   * See the `.keys` doc for guidance on when to use `.any` or `.all`.
   *
   * @name all
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("all", function() {
        flag(this, "all", true);
        flag(this, "any", false);
    });
    /**
   * ### .a(type[, msg])
   *
   * Asserts that the target's type is equal to the given string `type`. Types
   * are case insensitive. See the `type-detect` project page for info on the
   * type detection algorithm: https://github.com/chaijs/type-detect.
   *
   *     expect('foo').to.be.a('string');
   *     expect({a: 1}).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *     expect(new Error).to.be.an('error');
   *     expect(Promise.resolve()).to.be.a('promise');
   *     expect(new Float32Array).to.be.a('float32array');
   *     expect(Symbol()).to.be.a('symbol');
   *
   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.
   *
   *     var myObj = {
   *       [Symbol.toStringTag]: 'myCustomType'
   *     };
   *
   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');
   *
   * It's often best to use `.a` to check a target's type before making more
   * assertions on the same target. That way, you avoid unexpected behavior from
   * any assertion that does different things based on the target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to
   * assert that the target is the expected type, rather than asserting that it
   * isn't one of many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.an('array'); // Not recommended
   *
   * `.a` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     expect(1).to.be.a('string', 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.a('string');
   *
   * `.a` can also be used as a language chain to improve the readability of
   * your assertions.
   *
   *     expect({b: 2}).to.have.a.property('b');
   *
   * The alias `.an` can be used interchangeably with `.a`.
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function an(type, msg) {
        if (msg) flag(this, "message", msg);
        type = type.toLowerCase();
        var obj = flag(this, "object"), article = ~[
            "a",
            "e",
            "i",
            "o",
            "u"
        ].indexOf(type.charAt(0)) ? "an " : "a ";
        this.assert(type === _.type(obj).toLowerCase(), "expected #{this} to be " + article + type, "expected #{this} not to be " + article + type);
    }
    Assertion.addChainableMethod("an", an);
    Assertion.addChainableMethod("a", an);
    /**
   * ### .include(val[, msg])
   *
   * When the target is a string, `.include` asserts that the given string `val`
   * is a substring of the target.
   *
   *     expect('foobar').to.include('foo');
   *
   * When the target is an array, `.include` asserts that the given `val` is a
   * member of the target.
   *
   *     expect([1, 2, 3]).to.include(2);
   *
   * When the target is an object, `.include` asserts that the given object
   * `val`'s properties are a subset of the target's properties.
   *
   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});
   *
   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a
   * member of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Set([1, 2])).to.include(2);
   *
   * When the target is a Map, `.include` asserts that the given `val` is one of
   * the values of the target. SameValueZero equality algorithm is used.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);
   *
   * Because `.include` does different things based on the target's type, it's
   * important to check the target's type before using `.include`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);
   *
   * By default, strict (`===`) equality is used to compare array members and
   * object properties. Add `.deep` earlier in the chain to use deep equality
   * instead (WeakSet targets are not supported). See the `deep-eql` project
   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) includes `{a: 1}`
   *     expect([{a: 1}]).to.deep.include({a: 1});
   *     expect([{a: 1}]).to.not.include({a: 1});
   *
   *     // Target object deeply (but not strictly) includes `x: {a: 1}`
   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});
   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});
   *
   * By default, all of the target's properties are searched when working with
   * objects. This includes properties that are inherited and/or non-enumerable.
   * Add `.own` earlier in the chain to exclude the target's inherited
   * properties from the search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.own.include({a: 1});
   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});
   *
   * Note that a target object is always only searched for `val`'s own
   * enumerable properties.
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\.a.\\[b\\]': 2});
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.include`.
   *
   *     expect('foobar').to.not.include('taco');
   *     expect([1, 2, 3]).to.not.include(4);
   *
   * However, it's dangerous to negate `.include` when the target is an object.
   * The problem is that it creates uncertain expectations by asserting that the
   * target object doesn't have all of `val`'s key/value pairs but may or may
   * not have some of them. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target object isn't even expected to have `val`'s keys, it's
   * often best to assert exactly that.
   *
   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended
   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * When the target object is expected to have `val`'s keys, it's often best to
   * assert that each of the properties has its expected value, rather than
   * asserting that each property doesn't have one of many unexpected values.
   *
   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended
   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended
   *
   * `.include` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);
   *
   * `.include` can also be used as a language chain, causing all `.members` and
   * `.keys` assertions that follow in the chain to require the target to be a
   * superset of the expected set, rather than an identical set. Note that
   * `.members` ignores duplicates in the subset when `.include` is added.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * Note that adding `.any` earlier in the chain causes the `.keys` assertion
   * to ignore `.include`.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *
   * The aliases `.includes`, `.contain`, and `.contains` can be used
   * interchangeably with `.include`.
   *
   * @name include
   * @alias contain
   * @alias includes
   * @alias contains
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function SameValueZero(a, b) {
        return _.isNaN(a) && _.isNaN(b) || a === b;
    }
    function includeChainingBehavior() {
        flag(this, "contains", true);
    }
    function include(val, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), objType = _.type(obj).toLowerCase(), flagMsg = flag(this, "message"), negate = flag(this, "negate"), ssfi = flag(this, "ssfi"), isDeep = flag(this, "deep"), descriptor = isDeep ? "deep " : "";
        flagMsg = flagMsg ? flagMsg + ": " : "";
        var included = false;
        switch(objType){
            case "string":
                included = obj.indexOf(val) !== -1;
                break;
            case "weakset":
                if (isDeep) throw new AssertionError(flagMsg + "unable to use .deep.include with WeakSet", undefined, ssfi);
                included = obj.has(val);
                break;
            case "map":
                var isEql = isDeep ? _.eql : SameValueZero;
                obj.forEach(function(item) {
                    included = included || isEql(item, val);
                });
                break;
            case "set":
                if (isDeep) obj.forEach(function(item) {
                    included = included || _.eql(item, val);
                });
                else included = obj.has(val);
                break;
            case "array":
                if (isDeep) included = obj.some(function(item) {
                    return _.eql(item, val);
                });
                else included = obj.indexOf(val) !== -1;
                break;
            default:
                // This block is for asserting a subset of properties in an object.
                // `_.expectTypes` isn't used here because `.include` should work with
                // objects with a custom `@@toStringTag`.
                if (val !== Object(val)) throw new AssertionError(flagMsg + "the given combination of arguments (" + objType + " and " + _.type(val).toLowerCase() + ")" + " is invalid for this assertion. " + "You can use an array, a map, an object, a set, a string, " + "or a weakset instead of a " + _.type(val).toLowerCase(), undefined, ssfi);
                var props = Object.keys(val), firstErr = null, numErrs = 0;
                props.forEach(function(prop) {
                    var propAssertion = new Assertion(obj);
                    _.transferFlags(this, propAssertion, true);
                    flag(propAssertion, "lockSsfi", true);
                    if (!negate || props.length === 1) {
                        propAssertion.property(prop, val[prop]);
                        return;
                    }
                    try {
                        propAssertion.property(prop, val[prop]);
                    } catch (err) {
                        if (!_.checkError.compatibleConstructor(err, AssertionError)) throw err;
                        if (firstErr === null) firstErr = err;
                        numErrs++;
                    }
                }, this);
                // When validating .not.include with multiple properties, we only want
                // to throw an assertion error if all of the properties are included,
                // in which case we throw the first property assertion error that we
                // encountered.
                if (negate && props.length > 1 && numErrs === props.length) throw firstErr;
                return;
        }
        // Assert inclusion in collection or substring in a string.
        this.assert(included, "expected #{this} to " + descriptor + "include " + _.inspect(val), "expected #{this} to not " + descriptor + "include " + _.inspect(val));
    }
    Assertion.addChainableMethod("include", include, includeChainingBehavior);
    Assertion.addChainableMethod("contain", include, includeChainingBehavior);
    Assertion.addChainableMethod("contains", include, includeChainingBehavior);
    Assertion.addChainableMethod("includes", include, includeChainingBehavior);
    /**
   * ### .ok
   *
   * Asserts that the target is a truthy value (considered `true` in boolean context).
   * However, it's often best to assert that the target is strictly (`===`) or
   * deeply equal to its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.ok; // Not recommended
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.be.ok; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.ok`.
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.not.be.ok; // Not recommended
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.ok; // Not recommended
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.be.ok; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.be.ok; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.ok;
   *
   * @name ok
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("ok", function() {
        this.assert(flag(this, "object"), "expected #{this} to be truthy", "expected #{this} to be falsy");
    });
    /**
   * ### .true
   *
   * Asserts that the target is strictly (`===`) equal to `true`.
   *
   *     expect(true).to.be.true;
   *
   * Add `.not` earlier in the chain to negate `.true`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `true`.
   *
   *     expect(false).to.be.false; // Recommended
   *     expect(false).to.not.be.true; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.true; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(false, 'nooo why fail??').to.be.true;
   *
   * @name true
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("true", function() {
        this.assert(true === flag(this, "object"), "expected #{this} to be true", "expected #{this} to be false", flag(this, "negate") ? false : true);
    });
    /**
   * ### .false
   *
   * Asserts that the target is strictly (`===`) equal to `false`.
   *
   *     expect(false).to.be.false;
   *
   * Add `.not` earlier in the chain to negate `.false`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `false`.
   *
   *     expect(true).to.be.true; // Recommended
   *     expect(true).to.not.be.false; // Not recommended
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.false; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(true, 'nooo why fail??').to.be.false;
   *
   * @name false
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("false", function() {
        this.assert(false === flag(this, "object"), "expected #{this} to be false", "expected #{this} to be true", flag(this, "negate") ? true : false);
    });
    /**
   * ### .null
   *
   * Asserts that the target is strictly (`===`) equal to `null`.
   *
   *     expect(null).to.be.null;
   *
   * Add `.not` earlier in the chain to negate `.null`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `null`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.null; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.null;
   *
   * @name null
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("null", function() {
        this.assert(null === flag(this, "object"), "expected #{this} to be null", "expected #{this} not to be null");
    });
    /**
   * ### .undefined
   *
   * Asserts that the target is strictly (`===`) equal to `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *
   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to `undefined`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.undefined; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.undefined;
   *
   * @name undefined
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("undefined", function() {
        this.assert(undefined === flag(this, "object"), "expected #{this} to be undefined", "expected #{this} not to be undefined");
    });
    /**
   * ### .NaN
   *
   * Asserts that the target is exactly `NaN`.
   *
   *     expect(NaN).to.be.NaN;
   *
   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best
   * to assert that the target is equal to its expected value, rather than not
   * equal to `NaN`.
   *
   *     expect('foo').to.equal('foo'); // Recommended
   *     expect('foo').to.not.be.NaN; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(42, 'nooo why fail??').to.be.NaN;
   *
   * @name NaN
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("NaN", function() {
        this.assert(_.isNaN(flag(this, "object")), "expected #{this} to be NaN", "expected #{this} not to be NaN");
    });
    /**
   * ### .exist
   *
   * Asserts that the target is not strictly (`===`) equal to either `null` or
   * `undefined`. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.exist; // Not recommended
   *
   *     expect(0).to.equal(0); // Recommended
   *     expect(0).to.exist; // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.exist`.
   *
   *     expect(null).to.be.null; // Recommended
   *     expect(null).to.not.exist; // Not recommended
   *
   *     expect(undefined).to.be.undefined; // Recommended
   *     expect(undefined).to.not.exist; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(null, 'nooo why fail??').to.exist;
   *
   * The alias `.exists` can be used interchangeably with `.exist`.
   *
   * @name exist
   * @alias exists
   * @namespace BDD
   * @api public
   */ function assertExist() {
        var val = flag(this, "object");
        this.assert(val !== null && val !== undefined, "expected #{this} to exist", "expected #{this} to not exist");
    }
    Assertion.addProperty("exist", assertExist);
    Assertion.addProperty("exists", assertExist);
    /**
   * ### .empty
   *
   * When the target is a string or array, `.empty` asserts that the target's
   * `length` property is strictly (`===`) equal to `0`.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *
   * When the target is a map or set, `.empty` asserts that the target's `size`
   * property is strictly equal to `0`.
   *
   *     expect(new Set()).to.be.empty;
   *     expect(new Map()).to.be.empty;
   *
   * When the target is a non-function object, `.empty` asserts that the target
   * doesn't have any own enumerable properties. Properties with Symbol-based
   * keys are excluded from the count.
   *
   *     expect({}).to.be.empty;
   *
   * Because `.empty` does different things based on the target's type, it's
   * important to check the target's type before using `.empty`. See the `.a`
   * doc for info on testing a target's type.
   *
   *     expect([]).to.be.an('array').that.is.empty;
   *
   * Add `.not` earlier in the chain to negate `.empty`. However, it's often
   * best to assert that the target contains its expected number of values,
   * rather than asserting that it's not empty.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended
   *
   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended
   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended
   *
   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended
   *     expect({a: 1}).to.not.be.empty; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;
   *
   * @name empty
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("empty", function() {
        var val = flag(this, "object"), ssfi = flag(this, "ssfi"), flagMsg = flag(this, "message"), itemsCount;
        flagMsg = flagMsg ? flagMsg + ": " : "";
        switch(_.type(val).toLowerCase()){
            case "array":
            case "string":
                itemsCount = val.length;
                break;
            case "map":
            case "set":
                itemsCount = val.size;
                break;
            case "weakmap":
            case "weakset":
                throw new AssertionError(flagMsg + ".empty was passed a weak collection", undefined, ssfi);
            case "function":
                var msg = flagMsg + ".empty was passed a function " + _.getName(val);
                throw new AssertionError(msg.trim(), undefined, ssfi);
            default:
                if (val !== Object(val)) throw new AssertionError(flagMsg + ".empty was passed non-string primitive " + _.inspect(val), undefined, ssfi);
                itemsCount = Object.keys(val).length;
        }
        this.assert(0 === itemsCount, "expected #{this} to be empty", "expected #{this} not to be empty");
    });
    /**
   * ### .arguments
   *
   * Asserts that the target is an `arguments` object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   *     test();
   *
   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often
   * best to assert which type the target is expected to be, rather than
   * asserting that it’s not an `arguments` object.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.arguments; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({}, 'nooo why fail??').to.be.arguments;
   *
   * The alias `.Arguments` can be used interchangeably with `.arguments`.
   *
   * @name arguments
   * @alias Arguments
   * @namespace BDD
   * @api public
   */ function checkArguments() {
        var obj = flag(this, "object"), type = _.type(obj);
        this.assert("Arguments" === type, "expected #{this} to be arguments but got " + type, "expected #{this} to not be arguments");
    }
    Assertion.addProperty("arguments", checkArguments);
    Assertion.addProperty("Arguments", checkArguments);
    /**
   * ### .equal(val[, msg])
   *
   * Asserts that the target is strictly (`===`) equal to the given `val`.
   *
   *     expect(1).to.equal(1);
   *     expect('foo').to.equal('foo');
   *
   * Add `.deep` earlier in the chain to use deep equality instead. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) equals `{a: 1}`
   *     expect({a: 1}).to.deep.equal({a: 1});
   *     expect({a: 1}).to.not.equal({a: 1});
   *
   *     // Target array deeply (but not strictly) equals `[1, 2]`
   *     expect([1, 2]).to.deep.equal([1, 2]);
   *     expect([1, 2]).to.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.equal`. However, it's often
   * best to assert that the target is equal to its expected value, rather than
   * not equal to one of countless unexpected values.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.equal(2); // Not recommended
   *
   * `.equal` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.equal(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.equal(2);
   *
   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @param {Mixed} val
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertEqual(val, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object");
        if (flag(this, "deep")) {
            var prevLockSsfi = flag(this, "lockSsfi");
            flag(this, "lockSsfi", true);
            this.eql(val);
            flag(this, "lockSsfi", prevLockSsfi);
        } else this.assert(val === obj, "expected #{this} to equal #{exp}", "expected #{this} to not equal #{exp}", val, this._obj, true);
    }
    Assertion.addMethod("equal", assertEqual);
    Assertion.addMethod("equals", assertEqual);
    Assertion.addMethod("eq", assertEqual);
    /**
   * ### .eql(obj[, msg])
   *
   * Asserts that the target is deeply equal to the given `obj`. See the
   * `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target object is deeply (but not strictly) equal to {a: 1}
   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});
   *
   *     // Target array is deeply (but not strictly) equal to [1, 2]
   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);
   *
   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best
   * to assert that the target is deeply equal to its expected value, rather
   * than not deeply equal to one of countless unexpected values.
   *
   *     expect({a: 1}).to.eql({a: 1}); // Recommended
   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended
   *
   * `.eql` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});
   *
   * The alias `.eqls` can be used interchangeably with `.eql`.
   *
   * The `.deep.equal` assertion is almost identical to `.eql` but with one
   * difference: `.deep.equal` causes deep equality comparisons to also be used
   * for any other assertions that follow in the chain.
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} obj
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertEql(obj, msg) {
        if (msg) flag(this, "message", msg);
        this.assert(_.eql(obj, flag(this, "object")), "expected #{this} to deeply equal #{exp}", "expected #{this} to not deeply equal #{exp}", obj, this._obj, true);
    }
    Assertion.addMethod("eql", assertEql);
    Assertion.addMethod("eqls", assertEql);
    /**
   * ### .above(n[, msg])
   *
   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.above(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.above(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.above`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(1).to.not.be.above(2); // Not recommended
   *
   * `.above` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.above(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.above(2);
   *
   * The aliases `.gt` and `.greaterThan` can be used interchangeably with
   * `.above`.
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertAbove(n, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
        if (doLength && objType !== "map" && objType !== "set") new Assertion(obj, flagMsg, ssfi, true).to.have.property("length");
        if (!doLength && objType === "date" && nType !== "date") errorMessage = msgPrefix + "the argument to above must be a date";
        else if (nType !== "number" && (doLength || objType === "number")) errorMessage = msgPrefix + "the argument to above must be a number";
        else if (!doLength && objType !== "date" && objType !== "number") {
            var printObj = objType === "string" ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
        } else shouldThrow = false;
        if (shouldThrow) throw new AssertionError(errorMessage, undefined, ssfi);
        if (doLength) {
            var descriptor = "length", itemsCount;
            if (objType === "map" || objType === "set") {
                descriptor = "size";
                itemsCount = obj.size;
            } else itemsCount = obj.length;
            this.assert(itemsCount > n, "expected #{this} to have a " + descriptor + " above #{exp} but got #{act}", "expected #{this} to not have a " + descriptor + " above #{exp}", n, itemsCount);
        } else this.assert(obj > n, "expected #{this} to be above #{exp}", "expected #{this} to be at most #{exp}", n);
    }
    Assertion.addMethod("above", assertAbove);
    Assertion.addMethod("gt", assertAbove);
    Assertion.addMethod("greaterThan", assertAbove);
    /**
   * ### .least(n[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `n` respectively. However, it's often best to assert that the target is equal to
   * its expected value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.at.least(1); // Not recommended
   *     expect(2).to.be.at.least(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than or equal to the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.least`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.at.least(2); // Not recommended
   *
   * `.least` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.at.least(2, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.at.least(2);
   *
   * The aliases `.gte` and `.greaterThanOrEqual` can be used interchangeably with
   * `.least`.
   *
   * @name least
   * @alias gte
   * @alias greaterThanOrEqual
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertLeast(n, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
        if (doLength && objType !== "map" && objType !== "set") new Assertion(obj, flagMsg, ssfi, true).to.have.property("length");
        if (!doLength && objType === "date" && nType !== "date") errorMessage = msgPrefix + "the argument to least must be a date";
        else if (nType !== "number" && (doLength || objType === "number")) errorMessage = msgPrefix + "the argument to least must be a number";
        else if (!doLength && objType !== "date" && objType !== "number") {
            var printObj = objType === "string" ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
        } else shouldThrow = false;
        if (shouldThrow) throw new AssertionError(errorMessage, undefined, ssfi);
        if (doLength) {
            var descriptor = "length", itemsCount;
            if (objType === "map" || objType === "set") {
                descriptor = "size";
                itemsCount = obj.size;
            } else itemsCount = obj.length;
            this.assert(itemsCount >= n, "expected #{this} to have a " + descriptor + " at least #{exp} but got #{act}", "expected #{this} to have a " + descriptor + " below #{exp}", n, itemsCount);
        } else this.assert(obj >= n, "expected #{this} to be at least #{exp}", "expected #{this} to be below #{exp}", n);
    }
    Assertion.addMethod("least", assertLeast);
    Assertion.addMethod("gte", assertLeast);
    Assertion.addMethod("greaterThanOrEqual", assertLeast);
    /**
   * ### .below(n[, msg])
   *
   * Asserts that the target is a number or a date less than the given number or date `n` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.below(2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is less than the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.below(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.length(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.below`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.below(1); // Not recommended
   *
   * `.below` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.below(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.below(1);
   *
   * The aliases `.lt` and `.lessThan` can be used interchangeably with
   * `.below`.
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertBelow(n, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
        if (doLength && objType !== "map" && objType !== "set") new Assertion(obj, flagMsg, ssfi, true).to.have.property("length");
        if (!doLength && objType === "date" && nType !== "date") errorMessage = msgPrefix + "the argument to below must be a date";
        else if (nType !== "number" && (doLength || objType === "number")) errorMessage = msgPrefix + "the argument to below must be a number";
        else if (!doLength && objType !== "date" && objType !== "number") {
            var printObj = objType === "string" ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
        } else shouldThrow = false;
        if (shouldThrow) throw new AssertionError(errorMessage, undefined, ssfi);
        if (doLength) {
            var descriptor = "length", itemsCount;
            if (objType === "map" || objType === "set") {
                descriptor = "size";
                itemsCount = obj.size;
            } else itemsCount = obj.length;
            this.assert(itemsCount < n, "expected #{this} to have a " + descriptor + " below #{exp} but got #{act}", "expected #{this} to not have a " + descriptor + " below #{exp}", n, itemsCount);
        } else this.assert(obj < n, "expected #{this} to be below #{exp}", "expected #{this} to be at least #{exp}", n);
    }
    Assertion.addMethod("below", assertBelow);
    Assertion.addMethod("lt", assertBelow);
    Assertion.addMethod("lessThan", assertBelow);
    /**
   * ### .most(n[, msg])
   *
   * Asserts that the target is a number or a date less than or equal to the given number
   * or date `n` respectively. However, it's often best to assert that the target is equal to its
   * expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.at.most(2); // Not recommended
   *     expect(1).to.be.at.most(1); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is less than or equal to the given number `n`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.most`.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.not.be.at.most(1); // Not recommended
   *
   * `.most` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(2).to.be.at.most(1, 'nooo why fail??');
   *     expect(2, 'nooo why fail??').to.be.at.most(1);
   *
   * The aliases `.lte` and `.lessThanOrEqual` can be used interchangeably with
   * `.most`.
   *
   * @name most
   * @alias lte
   * @alias lessThanOrEqual
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertMost(n, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _.type(obj).toLowerCase(), nType = _.type(n).toLowerCase(), errorMessage, shouldThrow = true;
        if (doLength && objType !== "map" && objType !== "set") new Assertion(obj, flagMsg, ssfi, true).to.have.property("length");
        if (!doLength && objType === "date" && nType !== "date") errorMessage = msgPrefix + "the argument to most must be a date";
        else if (nType !== "number" && (doLength || objType === "number")) errorMessage = msgPrefix + "the argument to most must be a number";
        else if (!doLength && objType !== "date" && objType !== "number") {
            var printObj = objType === "string" ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
        } else shouldThrow = false;
        if (shouldThrow) throw new AssertionError(errorMessage, undefined, ssfi);
        if (doLength) {
            var descriptor = "length", itemsCount;
            if (objType === "map" || objType === "set") {
                descriptor = "size";
                itemsCount = obj.size;
            } else itemsCount = obj.length;
            this.assert(itemsCount <= n, "expected #{this} to have a " + descriptor + " at most #{exp} but got #{act}", "expected #{this} to have a " + descriptor + " above #{exp}", n, itemsCount);
        } else this.assert(obj <= n, "expected #{this} to be at most #{exp}", "expected #{this} to be above #{exp}", n);
    }
    Assertion.addMethod("most", assertMost);
    Assertion.addMethod("lte", assertMost);
    Assertion.addMethod("lessThanOrEqual", assertMost);
    /**
   * ### .within(start, finish[, msg])
   *
   * Asserts that the target is a number or a date greater than or equal to the given
   * number or date `start`, and less than or equal to the given number or date `finish` respectively.
   * However, it's often best to assert that the target is equal to its expected
   * value.
   *
   *     expect(2).to.equal(2); // Recommended
   *     expect(2).to.be.within(1, 3); // Not recommended
   *     expect(2).to.be.within(2, 3); // Not recommended
   *     expect(2).to.be.within(1, 2); // Not recommended
   *
   * Add `.lengthOf` earlier in the chain to assert that the target's `length`
   * or `size` is greater than or equal to the given number `start`, and less
   * than or equal to the given number `finish`.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.within`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.within(2, 4); // Not recommended
   *
   * `.within` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(4).to.be.within(1, 3, 'nooo why fail??');
   *     expect(4, 'nooo why fail??').to.be.within(1, 3);
   *
   * @name within
   * @param {Number} start lower bound inclusive
   * @param {Number} finish upper bound inclusive
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ Assertion.addMethod("within", function(start, finish, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), doLength = flag(this, "doLength"), flagMsg = flag(this, "message"), msgPrefix = flagMsg ? flagMsg + ": " : "", ssfi = flag(this, "ssfi"), objType = _.type(obj).toLowerCase(), startType = _.type(start).toLowerCase(), finishType = _.type(finish).toLowerCase(), errorMessage, shouldThrow = true, range = startType === "date" && finishType === "date" ? start.toISOString() + ".." + finish.toISOString() : start + ".." + finish;
        if (doLength && objType !== "map" && objType !== "set") new Assertion(obj, flagMsg, ssfi, true).to.have.property("length");
        if (!doLength && objType === "date" && (startType !== "date" || finishType !== "date")) errorMessage = msgPrefix + "the arguments to within must be dates";
        else if ((startType !== "number" || finishType !== "number") && (doLength || objType === "number")) errorMessage = msgPrefix + "the arguments to within must be numbers";
        else if (!doLength && objType !== "date" && objType !== "number") {
            var printObj = objType === "string" ? "'" + obj + "'" : obj;
            errorMessage = msgPrefix + "expected " + printObj + " to be a number or a date";
        } else shouldThrow = false;
        if (shouldThrow) throw new AssertionError(errorMessage, undefined, ssfi);
        if (doLength) {
            var descriptor = "length", itemsCount;
            if (objType === "map" || objType === "set") {
                descriptor = "size";
                itemsCount = obj.size;
            } else itemsCount = obj.length;
            this.assert(itemsCount >= start && itemsCount <= finish, "expected #{this} to have a " + descriptor + " within " + range, "expected #{this} to not have a " + descriptor + " within " + range);
        } else this.assert(obj >= start && obj <= finish, "expected #{this} to be within " + range, "expected #{this} to not be within " + range);
    });
    /**
   * ### .instanceof(constructor[, msg])
   *
   * Asserts that the target is an instance of the given `constructor`.
   *
   *     function Cat () { }
   *
   *     expect(new Cat()).to.be.an.instanceof(Cat);
   *     expect([1, 2]).to.be.an.instanceof(Array);
   *
   * Add `.not` earlier in the chain to negate `.instanceof`.
   *
   *     expect({a: 1}).to.not.be.an.instanceof(Array);
   *
   * `.instanceof` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);
   *
   * Due to limitations in ES5, `.instanceof` may not always work as expected
   * when using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing built-in object such as
   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} msg _optional_
   * @alias instanceOf
   * @namespace BDD
   * @api public
   */ function assertInstanceOf(constructor, msg) {
        if (msg) flag(this, "message", msg);
        var target = flag(this, "object");
        var ssfi = flag(this, "ssfi");
        var flagMsg = flag(this, "message");
        try {
            var isInstanceOf = target instanceof constructor;
        } catch (err) {
            if (err instanceof TypeError) {
                flagMsg = flagMsg ? flagMsg + ": " : "";
                throw new AssertionError(flagMsg + "The instanceof assertion needs a constructor but " + _.type(constructor) + " was given.", undefined, ssfi);
            }
            throw err;
        }
        var name = _.getName(constructor);
        if (name === null) name = "an unnamed constructor";
        this.assert(isInstanceOf, "expected #{this} to be an instance of " + name, "expected #{this} to not be an instance of " + name);
    }
    Assertion.addMethod("instanceof", assertInstanceOf);
    Assertion.addMethod("instanceOf", assertInstanceOf);
    /**
   * ### .property(name[, val[, msg]])
   *
   * Asserts that the target has a property with the given key `name`.
   *
   *     expect({a: 1}).to.have.property('a');
   *
   * When `val` is provided, `.property` also asserts that the property's value
   * is equal to the given `val`.
   *
   *     expect({a: 1}).to.have.property('a', 1);
   *
   * By default, strict (`===`) equality is used. Add `.deep` earlier in the
   * chain to use deep equality instead. See the `deep-eql` project page for
   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.
   *
   *     // Target object deeply (but not strictly) has property `x: {a: 1}`
   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});
   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});
   *
   * The target's enumerable and non-enumerable properties are always included
   * in the search. By default, both own and inherited properties are included.
   * Add `.own` earlier in the chain to exclude inherited properties from the
   * search.
   *
   *     Object.prototype.b = 2;
   *
   *     expect({a: 1}).to.have.own.property('a');
   *     expect({a: 1}).to.have.own.property('a', 1);
   *     expect({a: 1}).to.have.property('b');
   *     expect({a: 1}).to.not.have.own.property('b');
   *
   * `.deep` and `.own` can be combined.
   *
   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});
   *
   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when
   * referencing nested properties.
   *
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');
   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');
   *
   * If `.` or `[]` are part of an actual property name, they can be escaped by
   * adding two backslashes before them.
   *
   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\.a.\\[b\\]');
   *
   * `.deep` and `.nested` can be combined.
   *
   *     expect({a: {b: [{c: 3}]}})
   *       .to.have.deep.nested.property('a.b[0]', {c: 3});
   *
   * `.own` and `.nested` cannot be combined.
   *
   * Add `.not` earlier in the chain to negate `.property`.
   *
   *     expect({a: 1}).to.not.have.property('b');
   *
   * However, it's dangerous to negate `.property` when providing `val`. The
   * problem is that it creates uncertain expectations by asserting that the
   * target either doesn't have a property with the given key `name`, or that it
   * does have a property with the given key `name` but its value isn't equal to
   * the given `val`. It's often best to identify the exact output that's
   * expected, and then write an assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property with the given key
   * `name`, it's often best to assert exactly that.
   *
   *     expect({b: 2}).to.not.have.property('a'); // Recommended
   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended
   *
   * When the target is expected to have a property with the given key `name`,
   * it's often best to assert that the property has its expected value, rather
   * than asserting that it doesn't have one of many unexpected values.
   *
   *     expect({a: 3}).to.have.property('a', 3); // Recommended
   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended
   *
   * `.property` changes the target of any assertions that follow in the chain
   * to be the value of the property from the original target object.
   *
   *     expect({a: 1}).to.have.property('a').that.is.a('number');
   *
   * `.property` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing `val`, only use the
   * second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');
   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);
   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');
   *
   *     // Not recommended
   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');
   *
   * The above assertion isn't the same thing as not providing `val`. Instead,
   * it's asserting that the target object has a `b` property that's equal to
   * `undefined`.
   *
   * The assertions `.ownProperty` and `.haveOwnProperty` can be used
   * interchangeably with `.own.property`.
   *
   * @name property
   * @param {String} name
   * @param {Mixed} val (optional)
   * @param {String} msg _optional_
   * @returns value of property for chaining
   * @namespace BDD
   * @api public
   */ function assertProperty(name, val, msg) {
        if (msg) flag(this, "message", msg);
        var isNested = flag(this, "nested"), isOwn = flag(this, "own"), flagMsg = flag(this, "message"), obj = flag(this, "object"), ssfi = flag(this, "ssfi"), nameType = typeof name;
        flagMsg = flagMsg ? flagMsg + ": " : "";
        if (isNested) {
            if (nameType !== "string") throw new AssertionError(flagMsg + "the argument to property must be a string when using nested syntax", undefined, ssfi);
        } else {
            if (nameType !== "string" && nameType !== "number" && nameType !== "symbol") throw new AssertionError(flagMsg + "the argument to property must be a string, number, or symbol", undefined, ssfi);
        }
        if (isNested && isOwn) throw new AssertionError(flagMsg + 'The "nested" and "own" flags cannot be combined.', undefined, ssfi);
        if (obj === null || obj === undefined) throw new AssertionError(flagMsg + "Target cannot be null or undefined.", undefined, ssfi);
        var isDeep = flag(this, "deep"), negate = flag(this, "negate"), pathInfo = isNested ? _.getPathInfo(obj, name) : null, value = isNested ? pathInfo.value : obj[name];
        var descriptor = "";
        if (isDeep) descriptor += "deep ";
        if (isOwn) descriptor += "own ";
        if (isNested) descriptor += "nested ";
        descriptor += "property ";
        var hasProperty;
        if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);
        else if (isNested) hasProperty = pathInfo.exists;
        else hasProperty = _.hasProperty(obj, name);
        // When performing a negated assertion for both name and val, merely having
        // a property with the given name isn't enough to cause the assertion to
        // fail. It must both have a property with the given name, and the value of
        // that property must equal the given val. Therefore, skip this assertion in
        // favor of the next.
        if (!negate || arguments.length === 1) this.assert(hasProperty, "expected #{this} to have " + descriptor + _.inspect(name), "expected #{this} to not have " + descriptor + _.inspect(name));
        if (arguments.length > 1) this.assert(hasProperty && (isDeep ? _.eql(val, value) : val === value), "expected #{this} to have " + descriptor + _.inspect(name) + " of #{exp}, but got #{act}", "expected #{this} to not have " + descriptor + _.inspect(name) + " of #{act}", val, value);
        flag(this, "object", value);
    }
    Assertion.addMethod("property", assertProperty);
    function assertOwnProperty(name, value, msg) {
        flag(this, "own", true);
        assertProperty.apply(this, arguments);
    }
    Assertion.addMethod("ownProperty", assertOwnProperty);
    Assertion.addMethod("haveOwnProperty", assertOwnProperty);
    /**
   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])
   *
   * Asserts that the target has its own property descriptor with the given key
   * `name`. Enumerable and non-enumerable properties are included in the
   * search.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');
   *
   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that
   * the property's descriptor is deeply equal to the given `descriptor`. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.
   *
   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');
   *
   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing
   * a `descriptor`. The problem is that it creates uncertain expectations by
   * asserting that the target either doesn't have a property descriptor with
   * the given key `name`, or that it does have a property descriptor with the
   * given key `name` but it’s not deeply equal to the given `descriptor`. It's
   * often best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to have a property descriptor with the given
   * key `name`, it's often best to assert exactly that.
   *
   *     // Recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');
   *
   *     // Not recommended
   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * When the target is expected to have a property descriptor with the given
   * key `name`, it's often best to assert that the property has its expected
   * descriptor, rather than asserting that it doesn't have one of many
   * unexpected descriptors.
   *
   *     // Recommended
   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 3,
   *     });
   *
   *     // Not recommended
   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 1,
   *     });
   *
   * `.ownPropertyDescriptor` changes the target of any assertions that follow
   * in the chain to be the value of the property descriptor from the original
   * target object.
   *
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')
   *       .that.has.property('enumerable', true);
   *
   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a
   * custom error message to show when the assertion fails. The message can also
   * be given as the second argument to `expect`. When not providing
   * `descriptor`, only use the second form.
   *
   *     // Recommended
   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     }, 'nooo why fail??');
   *
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {
   *       configurable: true,
   *       enumerable: true,
   *       writable: true,
   *       value: 2,
   *     });
   *
   *     // Recommended
   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');
   *
   *     // Not recommended
   *     expect({a: 1})
   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');
   *
   * The above assertion isn't the same thing as not providing `descriptor`.
   * Instead, it's asserting that the target object has a `b` property
   * descriptor that's deeply equal to `undefined`.
   *
   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with
   * `.ownPropertyDescriptor`.
   *
   * @name ownPropertyDescriptor
   * @alias haveOwnPropertyDescriptor
   * @param {String} name
   * @param {Object} descriptor _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertOwnPropertyDescriptor(name, descriptor, msg) {
        if (typeof descriptor === "string") {
            msg = descriptor;
            descriptor = null;
        }
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object");
        var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
        if (actualDescriptor && descriptor) this.assert(_.eql(descriptor, actualDescriptor), "expected the own property descriptor for " + _.inspect(name) + " on #{this} to match " + _.inspect(descriptor) + ", got " + _.inspect(actualDescriptor), "expected the own property descriptor for " + _.inspect(name) + " on #{this} to not match " + _.inspect(descriptor), descriptor, actualDescriptor, true);
        else this.assert(actualDescriptor, "expected #{this} to have an own property descriptor for " + _.inspect(name), "expected #{this} to not have an own property descriptor for " + _.inspect(name));
        flag(this, "object", actualDescriptor);
    }
    Assertion.addMethod("ownPropertyDescriptor", assertOwnPropertyDescriptor);
    Assertion.addMethod("haveOwnPropertyDescriptor", assertOwnPropertyDescriptor);
    /**
   * ### .lengthOf(n[, msg])
   *
   * Asserts that the target's `length` or `size` is equal to the given number
   * `n`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *     expect('foo').to.have.lengthOf(3);
   *     expect(new Set([1, 2, 3])).to.have.lengthOf(3);
   *     expect(new Map([['a', 1], ['b', 2], ['c', 3]])).to.have.lengthOf(3);
   *
   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often
   * best to assert that the target's `length` property is equal to its expected
   * value, rather than not equal to one of many unexpected values.
   *
   *     expect('foo').to.have.lengthOf(3); // Recommended
   *     expect('foo').to.not.have.lengthOf(4); // Not recommended
   *
   * `.lengthOf` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');
   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);
   *
   * `.lengthOf` can also be used as a language chain, causing all `.above`,
   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the
   * chain to use the target's `length` property as the target. However, it's
   * often best to assert that the target's `length` property is equal to its
   * expected length, rather than asserting that its `length` property falls
   * within some range of values.
   *
   *     // Recommended
   *     expect([1, 2, 3]).to.have.lengthOf(3);
   *
   *     // Not recommended
   *     expect([1, 2, 3]).to.have.lengthOf.above(2);
   *     expect([1, 2, 3]).to.have.lengthOf.below(4);
   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);
   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);
   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);
   *
   * Due to a compatibility issue, the alias `.length` can't be chained directly
   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used
   * interchangeably with `.lengthOf` in every situation. It's recommended to
   * always use `.lengthOf` instead of `.length`.
   *
   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error
   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected
   *
   * @name lengthOf
   * @alias length
   * @param {Number} n
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertLengthChain() {
        flag(this, "doLength", true);
    }
    function assertLength(n, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), objType = _.type(obj).toLowerCase(), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi"), descriptor = "length", itemsCount;
        switch(objType){
            case "map":
            case "set":
                descriptor = "size";
                itemsCount = obj.size;
                break;
            default:
                new Assertion(obj, flagMsg, ssfi, true).to.have.property("length");
                itemsCount = obj.length;
        }
        this.assert(itemsCount == n, "expected #{this} to have a " + descriptor + " of #{exp} but got #{act}", "expected #{this} to not have a " + descriptor + " of #{act}", n, itemsCount);
    }
    Assertion.addChainableMethod("length", assertLength, assertLengthChain);
    Assertion.addChainableMethod("lengthOf", assertLength, assertLengthChain);
    /**
   * ### .match(re[, msg])
   *
   * Asserts that the target matches the given regular expression `re`.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * Add `.not` earlier in the chain to negate `.match`.
   *
   *     expect('foobar').to.not.match(/taco/);
   *
   * `.match` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect('foobar').to.match(/taco/, 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.match(/taco/);
   *
   * The alias `.matches` can be used interchangeably with `.match`.
   *
   * @name match
   * @alias matches
   * @param {RegExp} re
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertMatch(re, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object");
        this.assert(re.exec(obj), "expected #{this} to match " + re, "expected #{this} not to match " + re);
    }
    Assertion.addMethod("match", assertMatch);
    Assertion.addMethod("matches", assertMatch);
    /**
   * ### .string(str[, msg])
   *
   * Asserts that the target string contains the given substring `str`.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * Add `.not` earlier in the chain to negate `.string`.
   *
   *     expect('foobar').to.not.have.string('taco');
   *
   * `.string` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect('foobar').to.have.string('taco', 'nooo why fail??');
   *     expect('foobar', 'nooo why fail??').to.have.string('taco');
   *
   * @name string
   * @param {String} str
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ Assertion.addMethod("string", function(str, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
        new Assertion(obj, flagMsg, ssfi, true).is.a("string");
        this.assert(~obj.indexOf(str), "expected #{this} to contain " + _.inspect(str), "expected #{this} to not contain " + _.inspect(str));
    });
    /**
   * ### .keys(key1[, key2[, ...]])
   *
   * Asserts that the target object, array, map, or set has the given keys. Only
   * the target's own inherited properties are included in the search.
   *
   * When the target is an object or array, keys can be provided as one or more
   * string arguments, a single array argument, or a single object argument. In
   * the latter case, only the keys in the given object matter; the values are
   * ignored.
   *
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *     expect(['x', 'y']).to.have.all.keys(0, 1);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);
   *     expect(['x', 'y']).to.have.all.keys([0, 1]);
   *
   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5
   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5
   *
   * When the target is a map or set, each key must be provided as a separate
   * argument.
   *
   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');
   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');
   *
   * Because `.keys` does different things based on the target's type, it's
   * important to check the target's type before using `.keys`. See the `.a` doc
   * for info on testing a target's type.
   *
   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');
   *
   * By default, strict (`===`) equality is used to compare keys of maps and
   * sets. Add `.deep` earlier in the chain to use deep equality instead. See
   * the `deep-eql` project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target set deeply (but not strictly) has key `{a: 1}`
   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);
   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);
   *
   * By default, the target must have all of the given keys and no more. Add
   * `.any` earlier in the chain to only require that the target have at least
   * one of the given keys. Also, add `.not` earlier in the chain to negate
   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use
   * `.all` when asserting `.keys` without negation.
   *
   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts
   * exactly what's expected of the output, whereas `.not.all.keys` creates
   * uncertain expectations.
   *
   *     // Recommended; asserts that target doesn't have any of the given keys
   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');
   *
   *     // Not recommended; asserts that target doesn't have all of the given
   *     // keys but may or may not have some of them
   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');
   *
   * When asserting `.keys` without negation, `.all` is preferred because
   * `.all.keys` asserts exactly what's expected of the output, whereas
   * `.any.keys` creates uncertain expectations.
   *
   *     // Recommended; asserts that target has all the given keys
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');
   *
   *     // Not recommended; asserts that target has at least one of the given
   *     // keys but may or may not have more of them
   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');
   *
   * Note that `.all` is used by default when neither `.all` nor `.any` appear
   * earlier in the chain. However, it's often best to add `.all` anyway because
   * it improves readability.
   *
   *     // Both assertions are identical
   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended
   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended
   *
   * Add `.include` earlier in the chain to require that the target's keys be a
   * superset of the expected keys, rather than identical sets.
   *
   *     // Target object's keys are a superset of ['a', 'b'] but not identical
   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');
   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');
   *
   * However, if `.any` and `.include` are combined, only the `.any` takes
   * effect. The `.include` is ignored in this case.
   *
   *     // Both assertions are identical
   *     expect({a: 1}).to.have.any.keys('a', 'b');
   *     expect({a: 1}).to.include.any.keys('a', 'b');
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');
   *
   * The alias `.key` can be used interchangeably with `.keys`.
   *
   * @name keys
   * @alias key
   * @param {...String|Array|Object} keys
   * @namespace BDD
   * @api public
   */ function assertKeys(keys) {
        var obj = flag(this, "object"), objType = _.type(obj), keysType = _.type(keys), ssfi = flag(this, "ssfi"), isDeep = flag(this, "deep"), str, deepStr = "", actual, ok = true, flagMsg = flag(this, "message");
        flagMsg = flagMsg ? flagMsg + ": " : "";
        var mixedArgsMsg = flagMsg + "when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments";
        if (objType === "Map" || objType === "Set") {
            deepStr = isDeep ? "deeply " : "";
            actual = [];
            // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.
            obj.forEach(function(val, key) {
                actual.push(key);
            });
            if (keysType !== "Array") keys = Array.prototype.slice.call(arguments);
        } else {
            actual = _.getOwnEnumerableProperties(obj);
            switch(keysType){
                case "Array":
                    if (arguments.length > 1) throw new AssertionError(mixedArgsMsg, undefined, ssfi);
                    break;
                case "Object":
                    if (arguments.length > 1) throw new AssertionError(mixedArgsMsg, undefined, ssfi);
                    keys = Object.keys(keys);
                    break;
                default:
                    keys = Array.prototype.slice.call(arguments);
            }
            // Only stringify non-Symbols because Symbols would become "Symbol()"
            keys = keys.map(function(val) {
                return typeof val === "symbol" ? val : String(val);
            });
        }
        if (!keys.length) throw new AssertionError(flagMsg + "keys required", undefined, ssfi);
        var len = keys.length, any = flag(this, "any"), all = flag(this, "all"), expected = keys;
        if (!any && !all) all = true;
        // Has any
        if (any) ok = expected.some(function(expectedKey) {
            return actual.some(function(actualKey) {
                if (isDeep) return _.eql(expectedKey, actualKey);
                else return expectedKey === actualKey;
            });
        });
        // Has all
        if (all) {
            ok = expected.every(function(expectedKey) {
                return actual.some(function(actualKey) {
                    if (isDeep) return _.eql(expectedKey, actualKey);
                    else return expectedKey === actualKey;
                });
            });
            if (!flag(this, "contains")) ok = ok && keys.length == actual.length;
        }
        // Key string
        if (len > 1) {
            keys = keys.map(function(key) {
                return _.inspect(key);
            });
            var last = keys.pop();
            if (all) str = keys.join(", ") + ", and " + last;
            if (any) str = keys.join(", ") + ", or " + last;
        } else str = _.inspect(keys[0]);
        // Form
        str = (len > 1 ? "keys " : "key ") + str;
        // Have / include
        str = (flag(this, "contains") ? "contain " : "have ") + str;
        // Assertion
        this.assert(ok, "expected #{this} to " + deepStr + str, "expected #{this} to not " + deepStr + str, expected.slice(0).sort(_.compareByInspect), actual.sort(_.compareByInspect), true);
    }
    Assertion.addMethod("keys", assertKeys);
    Assertion.addMethod("key", assertKeys);
    /**
   * ### .throw([errorLike], [errMsgMatcher], [msg])
   *
   * When no arguments are provided, `.throw` invokes the target function and
   * asserts that an error is thrown.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw();
   *
   * When one argument is provided, and it's an error constructor, `.throw`
   * invokes the target function and asserts that an error is thrown that's an
   * instance of that error constructor.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError);
   *
   * When one argument is provided, and it's an error instance, `.throw` invokes
   * the target function and asserts that an error is thrown that's strictly
   * (`===`) equal to that error instance.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(err);
   *
   * When one argument is provided, and it's a string, `.throw` invokes the
   * target function and asserts that an error is thrown with a message that
   * contains that string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw('salmon');
   *
   * When one argument is provided, and it's a regular expression, `.throw`
   * invokes the target function and asserts that an error is thrown with a
   * message that matches that regular expression.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(/salmon/);
   *
   * When two arguments are provided, and the first is an error instance or
   * constructor, and the second is a string or regular expression, `.throw`
   * invokes the function and asserts that an error is thrown that fulfills both
   * conditions as described above.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon');
   *     expect(badFn).to.throw(TypeError, /salmon/);
   *     expect(badFn).to.throw(err, 'salmon');
   *     expect(badFn).to.throw(err, /salmon/);
   *
   * Add `.not` earlier in the chain to negate `.throw`.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw();
   *
   * However, it's dangerous to negate `.throw` when providing any arguments.
   * The problem is that it creates uncertain expectations by asserting that the
   * target either doesn't throw an error, or that it throws an error but of a
   * different type than the given type, or that it throws an error of the given
   * type but with a message that doesn't include the given string. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to throw an error, it's often best to assert
   * exactly that.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.not.throw(); // Recommended
   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * When the target is expected to throw an error, it's often best to assert
   * that the error is of its expected type, and has a message that includes an
   * expected string, rather than asserting that it doesn't have one of many
   * unexpected types, and doesn't have a message that includes some string.
   *
   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };
   *
   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended
   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended
   *
   * `.throw` changes the target of any assertions that follow in the chain to
   * be the error object that's thrown.
   *
   *     var err = new TypeError('Illegal salmon!');
   *     err.code = 42;
   *     var badFn = function () { throw err; };
   *
   *     expect(badFn).to.throw(TypeError).with.property('code', 42);
   *
   * `.throw` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`. When not providing two arguments, always use
   * the second form.
   *
   *     var goodFn = function () {};
   *
   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');
   *     expect(goodFn, 'nooo why fail??').to.throw();
   *
   * Due to limitations in ES5, `.throw` may not always work as expected when
   * using a transpiler such as Babel or TypeScript. In particular, it may
   * produce unexpected results when subclassing the built-in `Error` object and
   * then passing the subclassed constructor to `.throw`. See your transpiler's
   * docs for details:
   *
   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))
   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))
   *
   * Beware of some common mistakes when using the `throw` assertion. One common
   * mistake is to accidentally invoke the function yourself instead of letting
   * the `throw` assertion invoke the function for you. For example, when
   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as
   * the target for the assertion.
   *
   *     expect(fn).to.throw();     // Good! Tests `fn` as desired
   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`
   *
   * If you need to assert that your function `fn` throws when passed certain
   * arguments, then wrap a call to `fn` inside of another function.
   *
   *     expect(function () { fn(42); }).to.throw();  // Function expression
   *     expect(() => fn(42)).to.throw();             // ES6 arrow function
   *
   * Another common mistake is to provide an object method (or any stand-alone
   * function that relies on `this`) as the target of the assertion. Doing so is
   * problematic because the `this` context will be lost when the function is
   * invoked by `.throw`; there's no way for it to know what `this` is supposed
   * to be. There are two ways around this problem. One solution is to wrap the
   * method or function call inside of another function. Another solution is to
   * use `bind`.
   *
   *     expect(function () { cat.meow(); }).to.throw();  // Function expression
   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function
   *     expect(cat.meow.bind(cat)).to.throw();           // Bind
   *
   * Finally, it's worth mentioning that it's a best practice in JavaScript to
   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,
   * `TypeError`, and user-defined objects that extend `Error`. No other type of
   * value will generate a stack trace when initialized. With that said, the
   * `throw` assertion does technically support any type of value being thrown,
   * not just `Error` and its derivatives.
   *
   * The aliases `.throws` and `.Throw` can be used interchangeably with
   * `.throw`.
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {Error|ErrorConstructor} errorLike
   * @param {String|RegExp} errMsgMatcher error message
   * @param {String} msg _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @namespace BDD
   * @api public
   */ function assertThrows(errorLike, errMsgMatcher, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), ssfi = flag(this, "ssfi"), flagMsg = flag(this, "message"), negate = flag(this, "negate") || false;
        new Assertion(obj, flagMsg, ssfi, true).is.a("function");
        if (errorLike instanceof RegExp || typeof errorLike === "string") {
            errMsgMatcher = errorLike;
            errorLike = null;
        }
        var caughtErr;
        try {
            obj();
        } catch (err) {
            caughtErr = err;
        }
        // If we have the negate flag enabled and at least one valid argument it means we do expect an error
        // but we want it to match a given set of criteria
        var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;
        // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible
        // See Issue #551 and PR #683@GitHub
        var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);
        var errorLikeFail = false;
        var errMsgMatcherFail = false;
        // Checking if error was thrown
        if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {
            // We need this to display results correctly according to their types
            var errorLikeString = "an error";
            if (errorLike instanceof Error) errorLikeString = "#{exp}";
            else if (errorLike) errorLikeString = _.checkError.getConstructorName(errorLike);
            this.assert(caughtErr, "expected #{this} to throw " + errorLikeString, "expected #{this} to not throw an error but #{act} was thrown", errorLike && errorLike.toString(), caughtErr instanceof Error ? caughtErr.toString() : typeof caughtErr === "string" ? caughtErr : caughtErr && _.checkError.getConstructorName(caughtErr));
        }
        if (errorLike && caughtErr) {
            // We should compare instances only if `errorLike` is an instance of `Error`
            if (errorLike instanceof Error) {
                var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);
                if (isCompatibleInstance === negate) {
                    // These checks were created to ensure we won't fail too soon when we've got both args and a negate
                    // See Issue #551 and PR #683@GitHub
                    if (everyArgIsDefined && negate) errorLikeFail = true;
                    else this.assert(negate, "expected #{this} to throw #{exp} but #{act} was thrown", "expected #{this} to not throw #{exp}" + (caughtErr && !negate ? " but #{act} was thrown" : ""), errorLike.toString(), caughtErr.toString());
                }
            }
            var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);
            if (isCompatibleConstructor === negate) {
                if (everyArgIsDefined && negate) errorLikeFail = true;
                else this.assert(negate, "expected #{this} to throw #{exp} but #{act} was thrown", "expected #{this} to not throw #{exp}" + (caughtErr ? " but #{act} was thrown" : ""), errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr));
            }
        }
        if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {
            // Here we check compatible messages
            var placeholder = "including";
            if (errMsgMatcher instanceof RegExp) placeholder = "matching";
            var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);
            if (isCompatibleMessage === negate) {
                if (everyArgIsDefined && negate) errMsgMatcherFail = true;
                else this.assert(negate, "expected #{this} to throw error " + placeholder + " #{exp} but got #{act}", "expected #{this} to throw error not " + placeholder + " #{exp}", errMsgMatcher, _.checkError.getMessage(caughtErr));
            }
        }
        // If both assertions failed and both should've matched we throw an error
        if (errorLikeFail && errMsgMatcherFail) this.assert(negate, "expected #{this} to throw #{exp} but #{act} was thrown", "expected #{this} to not throw #{exp}" + (caughtErr ? " but #{act} was thrown" : ""), errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike), caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr));
        flag(this, "object", caughtErr);
    }
    Assertion.addMethod("throw", assertThrows);
    Assertion.addMethod("throws", assertThrows);
    Assertion.addMethod("Throw", assertThrows);
    /**
   * ### .respondTo(method[, msg])
   *
   * When the target is a non-function object, `.respondTo` asserts that the
   * target has a method with the given name `method`. The method can be own or
   * inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.respondTo('meow');
   *
   * When the target is a function, `.respondTo` asserts that the target's
   * `prototype` property has a method with the given name `method`. Again, the
   * method can be own or inherited, and it can be enumerable or non-enumerable.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(Cat).to.respondTo('meow');
   *
   * Add `.itself` earlier in the chain to force `.respondTo` to treat the
   * target as a non-function object, even if it's a function. Thus, it asserts
   * that the target has a method with the given name `method`, rather than
   * asserting that the target's `prototype` property has a method with the
   * given name `method`.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * When not adding `.itself`, it's important to check the target's type before
   * using `.respondTo`. See the `.a` doc for info on checking a target's type.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *
   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');
   *
   * Add `.not` earlier in the chain to negate `.respondTo`.
   *
   *     function Dog () {}
   *     Dog.prototype.bark = function () {};
   *
   *     expect(new Dog()).to.not.respondTo('meow');
   *
   * `.respondTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect({}).to.respondTo('meow', 'nooo why fail??');
   *     expect({}, 'nooo why fail??').to.respondTo('meow');
   *
   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.
   *
   * @name respondTo
   * @alias respondsTo
   * @param {String} method
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function respondTo(method, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), itself = flag(this, "itself"), context = "function" === typeof obj && !itself ? obj.prototype[method] : obj[method];
        this.assert("function" === typeof context, "expected #{this} to respond to " + _.inspect(method), "expected #{this} to not respond to " + _.inspect(method));
    }
    Assertion.addMethod("respondTo", respondTo);
    Assertion.addMethod("respondsTo", respondTo);
    /**
   * ### .itself
   *
   * Forces all `.respondTo` assertions that follow in the chain to behave as if
   * the target is a non-function object, even if it's a function. Thus, it
   * causes `.respondTo` to assert that the target has a method with the given
   * name, rather than asserting that the target's `prototype` property has a
   * method with the given name.
   *
   *     function Cat () {}
   *     Cat.prototype.meow = function () {};
   *     Cat.hiss = function () {};
   *
   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');
   *
   * @name itself
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("itself", function() {
        flag(this, "itself", true);
    });
    /**
   * ### .satisfy(matcher[, msg])
   *
   * Invokes the given `matcher` function with the target being passed as the
   * first argument, and asserts that the value returned is truthy.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 0;
   *     });
   *
   * Add `.not` earlier in the chain to negate `.satisfy`.
   *
   *     expect(1).to.not.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * `.satisfy` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1).to.satisfy(function(num) {
   *       return num > 2;
   *     }, 'nooo why fail??');
   *
   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {
   *       return num > 2;
   *     });
   *
   * The alias `.satisfies` can be used interchangeably with `.satisfy`.
   *
   * @name satisfy
   * @alias satisfies
   * @param {Function} matcher
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function satisfy(matcher, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object");
        var result = matcher(obj);
        this.assert(result, "expected #{this} to satisfy " + _.objDisplay(matcher), "expected #{this} to not satisfy" + _.objDisplay(matcher), flag(this, "negate") ? false : true, result);
    }
    Assertion.addMethod("satisfy", satisfy);
    Assertion.addMethod("satisfies", satisfy);
    /**
   * ### .closeTo(expected, delta[, msg])
   *
   * Asserts that the target is a number that's within a given +/- `delta` range
   * of the given number `expected`. However, it's often best to assert that the
   * target is equal to its expected value.
   *
   *     // Recommended
   *     expect(1.5).to.equal(1.5);
   *
   *     // Not recommended
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *     expect(1.5).to.be.closeTo(2, 0.5);
   *     expect(1.5).to.be.closeTo(1, 1);
   *
   * Add `.not` earlier in the chain to negate `.closeTo`.
   *
   *     expect(1.5).to.equal(1.5); // Recommended
   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended
   *
   * `.closeTo` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');
   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);
   *
   * The alias `.approximately` can be used interchangeably with `.closeTo`.
   *
   * @name closeTo
   * @alias approximately
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function closeTo(expected, delta, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
        new Assertion(obj, flagMsg, ssfi, true).is.a("number");
        if (typeof expected !== "number" || typeof delta !== "number") {
            flagMsg = flagMsg ? flagMsg + ": " : "";
            var deltaMessage = delta === undefined ? ", and a delta is required" : "";
            throw new AssertionError(flagMsg + "the arguments to closeTo or approximately must be numbers" + deltaMessage, undefined, ssfi);
        }
        this.assert(Math.abs(obj - expected) <= delta, "expected #{this} to be close to " + expected + " +/- " + delta, "expected #{this} not to be close to " + expected + " +/- " + delta);
    }
    Assertion.addMethod("closeTo", closeTo);
    Assertion.addMethod("approximately", closeTo);
    // Note: Duplicates are ignored if testing for inclusion instead of sameness.
    function isSubsetOf(subset, superset, cmp, contains, ordered) {
        if (!contains) {
            if (subset.length !== superset.length) return false;
            superset = superset.slice();
        }
        return subset.every(function(elem, idx) {
            if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];
            if (!cmp) {
                var matchIdx = superset.indexOf(elem);
                if (matchIdx === -1) return false;
                // Remove match from superset so not counted twice if duplicate in subset.
                if (!contains) superset.splice(matchIdx, 1);
                return true;
            }
            return superset.some(function(elem2, matchIdx) {
                if (!cmp(elem, elem2)) return false;
                // Remove match from superset so not counted twice if duplicate in subset.
                if (!contains) superset.splice(matchIdx, 1);
                return true;
            });
        });
    }
    /**
   * ### .members(set[, msg])
   *
   * Asserts that the target array has the same members as the given array
   * `set`.
   *
   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);
   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);
   *
   * By default, members are compared using strict (`===`) equality. Add `.deep`
   * earlier in the chain to use deep equality instead. See the `deep-eql`
   * project page for info on the deep equality algorithm:
   * https://github.com/chaijs/deep-eql.
   *
   *     // Target array deeply (but not strictly) has member `{a: 1}`
   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);
   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);
   *
   * By default, order doesn't matter. Add `.ordered` earlier in the chain to
   * require that members appear in the same order.
   *
   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);
   *     expect([1, 2, 3]).to.have.members([2, 1, 3])
   *       .but.not.ordered.members([2, 1, 3]);
   *
   * By default, both arrays must be the same size. Add `.include` earlier in
   * the chain to require that the target's members be a superset of the
   * expected members. Note that duplicates are ignored in the subset when
   * `.include` is added.
   *
   *     // Target array is a superset of [1, 2] but not identical
   *     expect([1, 2, 3]).to.include.members([1, 2]);
   *     expect([1, 2, 3]).to.not.have.members([1, 2]);
   *
   *     // Duplicates in the subset are ignored
   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);
   *
   * `.deep`, `.ordered`, and `.include` can all be combined. However, if
   * `.include` and `.ordered` are combined, the ordering begins at the start of
   * both arrays.
   *
   *     expect([{a: 1}, {b: 2}, {c: 3}])
   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])
   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);
   *
   * Add `.not` earlier in the chain to negate `.members`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the target array doesn't have all of the same members as
   * the given array `set` but may or may not have some of them. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended
   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended
   *
   * `.members` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`.
   *
   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');
   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);
   *
   * @name members
   * @param {Array} set
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ Assertion.addMethod("members", function(subset, msg) {
        if (msg) flag(this, "message", msg);
        var obj = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
        new Assertion(obj, flagMsg, ssfi, true).to.be.an("array");
        new Assertion(subset, flagMsg, ssfi, true).to.be.an("array");
        var contains = flag(this, "contains");
        var ordered = flag(this, "ordered");
        var subject, failMsg, failNegateMsg;
        if (contains) {
            subject = ordered ? "an ordered superset" : "a superset";
            failMsg = "expected #{this} to be " + subject + " of #{exp}";
            failNegateMsg = "expected #{this} to not be " + subject + " of #{exp}";
        } else {
            subject = ordered ? "ordered members" : "members";
            failMsg = "expected #{this} to have the same " + subject + " as #{exp}";
            failNegateMsg = "expected #{this} to not have the same " + subject + " as #{exp}";
        }
        var cmp = flag(this, "deep") ? _.eql : undefined;
        this.assert(isSubsetOf(subset, obj, cmp, contains, ordered), failMsg, failNegateMsg, subset, obj, true);
    });
    /**
   * ### .oneOf(list[, msg])
   *
   * Asserts that the target is a member of the given array `list`. However,
   * it's often best to assert that the target is equal to its expected value.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended
   *
   * Comparisons are performed using strict (`===`) equality.
   *
   * Add `.not` earlier in the chain to negate `.oneOf`.
   *
   *     expect(1).to.equal(1); // Recommended
   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended
   *
   * It can also be chained with `.contain` or `.include`, which will work with
   * both arrays and strings:
   *
   *     expect('Today is sunny').to.contain.oneOf(['sunny', 'cloudy'])
   *     expect('Today is rainy').to.not.contain.oneOf(['sunny', 'cloudy'])
   *     expect([1,2,3]).to.contain.oneOf([3,4,5])
   *     expect([1,2,3]).to.not.contain.oneOf([4,5,6])
   *
   * `.oneOf` accepts an optional `msg` argument which is a custom error message
   * to show when the assertion fails. The message can also be given as the
   * second argument to `expect`.
   *
   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');
   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);
   *
   * @name oneOf
   * @param {Array<*>} list
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function oneOf(list, msg) {
        if (msg) flag(this, "message", msg);
        var expected = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi"), contains = flag(this, "contains"), isDeep = flag(this, "deep");
        new Assertion(list, flagMsg, ssfi, true).to.be.an("array");
        if (contains) this.assert(list.some(function(possibility) {
            return expected.indexOf(possibility) > -1;
        }), "expected #{this} to contain one of #{exp}", "expected #{this} to not contain one of #{exp}", list, expected);
        else if (isDeep) this.assert(list.some(function(possibility) {
            return _.eql(expected, possibility);
        }), "expected #{this} to deeply equal one of #{exp}", "expected #{this} to deeply equal one of #{exp}", list, expected);
        else this.assert(list.indexOf(expected) > -1, "expected #{this} to be one of #{exp}", "expected #{this} to not be one of #{exp}", list, expected);
    }
    Assertion.addMethod("oneOf", oneOf);
    /**
   * ### .change(subject[, prop[, msg]])
   *
   * When one argument is provided, `.change` asserts that the given function
   * `subject` returns a different value when it's invoked before the target
   * function compared to when it's invoked afterward. However, it's often best
   * to assert that `subject` is equal to its expected value.
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     // Recommended
   *     expect(getDots()).to.equal('');
   *     addDot();
   *     expect(getDots()).to.equal('.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(getDots);
   *
   * When two arguments are provided, `.change` asserts that the value of the
   * given object `subject`'s `prop` property is different before invoking the
   * target function compared to afterward.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     // Recommended
   *     expect(myObj).to.have.property('dots', '');
   *     addDot();
   *     expect(myObj).to.have.property('dots', '.');
   *
   *     // Not recommended
   *     expect(addDot).to.change(myObj, 'dots');
   *
   * Strict (`===`) equality is used to compare before and after values.
   *
   * Add `.not` earlier in the chain to negate `.change`.
   *
   *     var dots = ''
   *       , noop = function () {}
   *       , getDots = function () { return dots; };
   *
   *     expect(noop).to.not.change(getDots);
   *
   *     var myObj = {dots: ''}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'dots');
   *
   * `.change` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {dots: ''}
   *       , addDot = function () { myObj.dots += '.'; };
   *
   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');
   *
   *     var dots = ''
   *       , addDot = function () { dots += '.'; }
   *       , getDots = function () { return dots; };
   *
   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);
   *
   * `.change` also causes all `.by` assertions that follow in the chain to
   * assert how much a numeric subject was increased or decreased by. However,
   * it's dangerous to use `.change.by`. The problem is that it creates
   * uncertain expectations by asserting that the subject either increases by
   * the given delta, or that it decreases by the given delta. It's often best
   * to identify the exact output that's expected, and then write an assertion
   * that only accepts that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * The alias `.changes` can be used interchangeably with `.change`.
   *
   * @name change
   * @alias changes
   * @param {String} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertChanges(subject, prop, msg) {
        if (msg) flag(this, "message", msg);
        var fn = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
        new Assertion(fn, flagMsg, ssfi, true).is.a("function");
        var initial;
        if (!prop) {
            new Assertion(subject, flagMsg, ssfi, true).is.a("function");
            initial = subject();
        } else {
            new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
            initial = subject[prop];
        }
        fn();
        var final = prop === undefined || prop === null ? subject() : subject[prop];
        var msgObj = prop === undefined || prop === null ? initial : "." + prop;
        // This gets flagged because of the .by(delta) assertion
        flag(this, "deltaMsgObj", msgObj);
        flag(this, "initialDeltaValue", initial);
        flag(this, "finalDeltaValue", final);
        flag(this, "deltaBehavior", "change");
        flag(this, "realDelta", final !== initial);
        this.assert(initial !== final, "expected " + msgObj + " to change", "expected " + msgObj + " to not change");
    }
    Assertion.addMethod("change", assertChanges);
    Assertion.addMethod("changes", assertChanges);
    /**
   * ### .increase(subject[, prop[, msg]])
   *
   * When one argument is provided, `.increase` asserts that the given function
   * `subject` returns a greater number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.increase` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * greater of a number is returned. It's often best to assert that the return
   * value increased by the expected amount, rather than asserting it increased
   * by any amount.
   *
   *     var val = 1
   *       , addTwo = function () { val += 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(addTwo).to.increase(getVal).by(2); // Recommended
   *     expect(addTwo).to.increase(getVal); // Not recommended
   *
   * When two arguments are provided, `.increase` asserts that the value of the
   * given object `subject`'s `prop` property is greater after invoking the
   * target function compared to beforehand.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.increase`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either decreases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to decrease, it's often best to assert that it
   * decreased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended
   *
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended
   *
   * `.increase` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.increase(getVal);
   *
   * The alias `.increases` can be used interchangeably with `.increase`.
   *
   * @name increase
   * @alias increases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertIncreases(subject, prop, msg) {
        if (msg) flag(this, "message", msg);
        var fn = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
        new Assertion(fn, flagMsg, ssfi, true).is.a("function");
        var initial;
        if (!prop) {
            new Assertion(subject, flagMsg, ssfi, true).is.a("function");
            initial = subject();
        } else {
            new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
            initial = subject[prop];
        }
        // Make sure that the target is a number
        new Assertion(initial, flagMsg, ssfi, true).is.a("number");
        fn();
        var final = prop === undefined || prop === null ? subject() : subject[prop];
        var msgObj = prop === undefined || prop === null ? initial : "." + prop;
        flag(this, "deltaMsgObj", msgObj);
        flag(this, "initialDeltaValue", initial);
        flag(this, "finalDeltaValue", final);
        flag(this, "deltaBehavior", "increase");
        flag(this, "realDelta", final - initial);
        this.assert(final - initial > 0, "expected " + msgObj + " to increase", "expected " + msgObj + " to not increase");
    }
    Assertion.addMethod("increase", assertIncreases);
    Assertion.addMethod("increases", assertIncreases);
    /**
   * ### .decrease(subject[, prop[, msg]])
   *
   * When one argument is provided, `.decrease` asserts that the given function
   * `subject` returns a lesser number when it's invoked after invoking the
   * target function compared to when it's invoked beforehand. `.decrease` also
   * causes all `.by` assertions that follow in the chain to assert how much
   * lesser of a number is returned. It's often best to assert that the return
   * value decreased by the expected amount, rather than asserting it decreased
   * by any amount.
   *
   *     var val = 1
   *       , subtractTwo = function () { val -= 2; }
   *       , getVal = function () { return val; };
   *
   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended
   *     expect(subtractTwo).to.decrease(getVal); // Not recommended
   *
   * When two arguments are provided, `.decrease` asserts that the value of the
   * given object `subject`'s `prop` property is lesser after invoking the
   * target function compared to beforehand.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.decrease`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either increases, or that it stays the same.
   * It's often best to identify the exact output that's expected, and then
   * write an assertion that only accepts that exact output.
   *
   * When the subject is expected to increase, it's often best to assert that it
   * increased by the expected amount.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended
   *
   * When the subject is expected to stay the same, it's often best to assert
   * exactly that.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.not.change(myObj, 'val'); // Recommended
   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended
   *
   * `.decrease` accepts an optional `msg` argument which is a custom error
   * message to show when the assertion fails. The message can also be given as
   * the second argument to `expect`. When not providing two arguments, always
   * use the second form.
   *
   *     var myObj = {val: 1}
   *       , noop = function () {};
   *
   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');
   *
   *     var val = 1
   *       , noop = function () {}
   *       , getVal = function () { return val; };
   *
   *     expect(noop, 'nooo why fail??').to.decrease(getVal);
   *
   * The alias `.decreases` can be used interchangeably with `.decrease`.
   *
   * @name decrease
   * @alias decreases
   * @param {String|Function} subject
   * @param {String} prop name _optional_
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertDecreases(subject, prop, msg) {
        if (msg) flag(this, "message", msg);
        var fn = flag(this, "object"), flagMsg = flag(this, "message"), ssfi = flag(this, "ssfi");
        new Assertion(fn, flagMsg, ssfi, true).is.a("function");
        var initial;
        if (!prop) {
            new Assertion(subject, flagMsg, ssfi, true).is.a("function");
            initial = subject();
        } else {
            new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);
            initial = subject[prop];
        }
        // Make sure that the target is a number
        new Assertion(initial, flagMsg, ssfi, true).is.a("number");
        fn();
        var final = prop === undefined || prop === null ? subject() : subject[prop];
        var msgObj = prop === undefined || prop === null ? initial : "." + prop;
        flag(this, "deltaMsgObj", msgObj);
        flag(this, "initialDeltaValue", initial);
        flag(this, "finalDeltaValue", final);
        flag(this, "deltaBehavior", "decrease");
        flag(this, "realDelta", initial - final);
        this.assert(final - initial < 0, "expected " + msgObj + " to decrease", "expected " + msgObj + " to not decrease");
    }
    Assertion.addMethod("decrease", assertDecreases);
    Assertion.addMethod("decreases", assertDecreases);
    /**
   * ### .by(delta[, msg])
   *
   * When following an `.increase` assertion in the chain, `.by` asserts that
   * the subject of the `.increase` assertion increased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   * When following a `.decrease` assertion in the chain, `.by` asserts that the
   * subject of the `.decrease` assertion decreased by the given `delta`.
   *
   *     var myObj = {val: 1}
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);
   *
   * When following a `.change` assertion in the chain, `.by` asserts that the
   * subject of the `.change` assertion either increased or decreased by the
   * given `delta`. However, it's dangerous to use `.change.by`. The problem is
   * that it creates uncertain expectations. It's often best to identify the
   * exact output that's expected, and then write an assertion that only accepts
   * that exact output.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; }
   *       , subtractTwo = function () { myObj.val -= 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended
   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended
   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended
   *
   * Add `.not` earlier in the chain to negate `.by`. However, it's often best
   * to assert that the subject changed by its expected delta, rather than
   * asserting that it didn't change by one of countless unexpected deltas.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     // Recommended
   *     expect(addTwo).to.increase(myObj, 'val').by(2);
   *
   *     // Not recommended
   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);
   *
   * `.by` accepts an optional `msg` argument which is a custom error message to
   * show when the assertion fails. The message can also be given as the second
   * argument to `expect`.
   *
   *     var myObj = {val: 1}
   *       , addTwo = function () { myObj.val += 2; };
   *
   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');
   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);
   *
   * @name by
   * @param {Number} delta
   * @param {String} msg _optional_
   * @namespace BDD
   * @api public
   */ function assertDelta(delta, msg) {
        if (msg) flag(this, "message", msg);
        var msgObj = flag(this, "deltaMsgObj");
        var initial = flag(this, "initialDeltaValue");
        var final = flag(this, "finalDeltaValue");
        var behavior = flag(this, "deltaBehavior");
        var realDelta = flag(this, "realDelta");
        var expression;
        if (behavior === "change") expression = Math.abs(final - initial) === Math.abs(delta);
        else expression = realDelta === Math.abs(delta);
        this.assert(expression, "expected " + msgObj + " to " + behavior + " by " + delta, "expected " + msgObj + " to not " + behavior + " by " + delta);
    }
    Assertion.addMethod("by", assertDelta);
    /**
   * ### .extensible
   *
   * Asserts that the target is extensible, which means that new properties can
   * be added to it. Primitives are never extensible.
   *
   *     expect({a: 1}).to.be.extensible;
   *
   * Add `.not` earlier in the chain to negate `.extensible`.
   *
   *     var nonExtensibleObject = Object.preventExtensions({})
   *       , sealedObject = Object.seal({})
   *       , frozenObject = Object.freeze({});
   *
   *     expect(nonExtensibleObject).to.not.be.extensible;
   *     expect(sealedObject).to.not.be.extensible;
   *     expect(frozenObject).to.not.be.extensible;
   *     expect(1).to.not.be.extensible;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect(1, 'nooo why fail??').to.be.extensible;
   *
   * @name extensible
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("extensible", function() {
        var obj = flag(this, "object");
        // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
        // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible
        // The following provides ES6 behavior for ES5 environments.
        var isExtensible = obj === Object(obj) && Object.isExtensible(obj);
        this.assert(isExtensible, "expected #{this} to be extensible", "expected #{this} to not be extensible");
    });
    /**
   * ### .sealed
   *
   * Asserts that the target is sealed, which means that new properties can't be
   * added to it, and its existing properties can't be reconfigured or deleted.
   * However, it's possible that its existing properties can still be reassigned
   * to different values. Primitives are always sealed.
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     expect(sealedObject).to.be.sealed;
   *     expect(frozenObject).to.be.sealed;
   *     expect(1).to.be.sealed;
   *
   * Add `.not` earlier in the chain to negate `.sealed`.
   *
   *     expect({a: 1}).to.not.be.sealed;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;
   *
   * @name sealed
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("sealed", function() {
        var obj = flag(this, "object");
        // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
        // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.
        // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed
        // The following provides ES6 behavior for ES5 environments.
        var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;
        this.assert(isSealed, "expected #{this} to be sealed", "expected #{this} to not be sealed");
    });
    /**
   * ### .frozen
   *
   * Asserts that the target is frozen, which means that new properties can't be
   * added to it, and its existing properties can't be reassigned to different
   * values, reconfigured, or deleted. Primitives are always frozen.
   *
   *     var frozenObject = Object.freeze({});
   *
   *     expect(frozenObject).to.be.frozen;
   *     expect(1).to.be.frozen;
   *
   * Add `.not` earlier in the chain to negate `.frozen`.
   *
   *     expect({a: 1}).to.not.be.frozen;
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;
   *
   * @name frozen
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("frozen", function() {
        var obj = flag(this, "object");
        // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.
        // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.
        // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen
        // The following provides ES6 behavior for ES5 environments.
        var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;
        this.assert(isFrozen, "expected #{this} to be frozen", "expected #{this} to not be frozen");
    });
    /**
   * ### .finite
   *
   * Asserts that the target is a number, and isn't `NaN` or positive/negative
   * `Infinity`.
   *
   *     expect(1).to.be.finite;
   *
   * Add `.not` earlier in the chain to negate `.finite`. However, it's
   * dangerous to do so. The problem is that it creates uncertain expectations
   * by asserting that the subject either isn't a number, or that it's `NaN`, or
   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often
   * best to identify the exact output that's expected, and then write an
   * assertion that only accepts that exact output.
   *
   * When the target isn't expected to be a number, it's often best to assert
   * that it's the expected type, rather than asserting that it isn't one of
   * many unexpected types.
   *
   *     expect('foo').to.be.a('string'); // Recommended
   *     expect('foo').to.not.be.finite; // Not recommended
   *
   * When the target is expected to be `NaN`, it's often best to assert exactly
   * that.
   *
   *     expect(NaN).to.be.NaN; // Recommended
   *     expect(NaN).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be positive infinity, it's often best to
   * assert exactly that.
   *
   *     expect(Infinity).to.equal(Infinity); // Recommended
   *     expect(Infinity).to.not.be.finite; // Not recommended
   *
   * When the target is expected to be negative infinity, it's often best to
   * assert exactly that.
   *
   *     expect(-Infinity).to.equal(-Infinity); // Recommended
   *     expect(-Infinity).to.not.be.finite; // Not recommended
   *
   * A custom error message can be given as the second argument to `expect`.
   *
   *     expect('foo', 'nooo why fail??').to.be.finite;
   *
   * @name finite
   * @namespace BDD
   * @api public
   */ Assertion.addProperty("finite", function(msg) {
        var obj = flag(this, "object");
        this.assert(typeof obj === "number" && isFinite(obj), "expected #{this} to be a finite number", "expected #{this} to not be a finite number");
    });
};

},{}],"0Hf2q":[function(require,module,exports) {
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ module.exports = function(chai, util) {
    chai.expect = function(val, message) {
        return new chai.Assertion(val, message);
    };
    /**
   * ### .fail([message])
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure.
   *
   *     expect.fail();
   *     expect.fail("custom error message");
   *     expect.fail(1, 2);
   *     expect.fail(1, 2, "custom error message");
   *     expect.fail(1, 2, "custom error message", ">");
   *     expect.fail(1, 2, undefined, ">");
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace BDD
   * @api public
   */ chai.expect.fail = function(actual, expected, message, operator) {
        if (arguments.length < 2) {
            message = actual;
            actual = undefined;
        }
        message = message || "expect.fail()";
        throw new chai.AssertionError(message, {
            actual: actual,
            expected: expected,
            operator: operator
        }, chai.expect.fail);
    };
};

},{}],"abNfL":[function(require,module,exports) {
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ module.exports = function(chai, util) {
    var Assertion = chai.Assertion;
    function loadShould() {
        // explicitly define this method as function as to have it's name to include as `ssfi`
        function shouldGetter() {
            if (this instanceof String || this instanceof Number || this instanceof Boolean || typeof Symbol === "function" && this instanceof Symbol || typeof BigInt === "function" && this instanceof BigInt) return new Assertion(this.valueOf(), null, shouldGetter);
            return new Assertion(this, null, shouldGetter);
        }
        function shouldSetter(value) {
            // See https://github.com/chaijs/chai/issues/86: this makes
            // `whatever.should = someValue` actually set `someValue`, which is
            // especially useful for `global.should = require('chai').should()`.
            //
            // Note that we have to use [[DefineProperty]] instead of [[Put]]
            // since otherwise we would trigger this very setter!
            Object.defineProperty(this, "should", {
                value: value,
                enumerable: true,
                configurable: true,
                writable: true
            });
        }
        // modify Object.prototype to have `should`
        Object.defineProperty(Object.prototype, "should", {
            set: shouldSetter,
            get: shouldGetter,
            configurable: true
        });
        var should = {};
        /**
     * ### .fail([message])
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure.
     *
     *     should.fail();
     *     should.fail("custom error message");
     *     should.fail(1, 2);
     *     should.fail(1, 2, "custom error message");
     *     should.fail(1, 2, "custom error message", ">");
     *     should.fail(1, 2, undefined, ">");
     *
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @namespace BDD
     * @api public
     */ should.fail = function(actual, expected, message, operator) {
            if (arguments.length < 2) {
                message = actual;
                actual = undefined;
            }
            message = message || "should.fail()";
            throw new chai.AssertionError(message, {
                actual: actual,
                expected: expected,
                operator: operator
            }, should.fail);
        };
        /**
     * ### .equal(actual, expected, [message])
     *
     * Asserts non-strict equality (`==`) of `actual` and `expected`.
     *
     *     should.equal(3, '3', '== coerces values to strings');
     *
     * @name equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */ should.equal = function(val1, val2, msg) {
            new Assertion(val1, msg).to.equal(val2);
        };
        /**
     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])
     *
     * Asserts that `function` will throw an error that is an instance of
     * `constructor`, or alternately that it will throw an error with message
     * matching `regexp`.
     *
     *     should.throw(fn, 'function throws a reference error');
     *     should.throw(fn, /function throws a reference error/);
     *     should.throw(fn, ReferenceError);
     *     should.throw(fn, ReferenceError, 'function throws a reference error');
     *     should.throw(fn, ReferenceError, /function throws a reference error/);
     *
     * @name throw
     * @alias Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */ should.Throw = function(fn, errt, errs, msg) {
            new Assertion(fn, msg).to.Throw(errt, errs);
        };
        /**
     * ### .exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var foo = 'hi';
     *
     *     should.exist(foo, 'foo exists');
     *
     * @name exist
     * @namespace Should
     * @api public
     */ should.exist = function(val, msg) {
            new Assertion(val, msg).to.exist;
        };
        // negation
        should.not = {};
        /**
     * ### .not.equal(actual, expected, [message])
     *
     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
     *
     *     should.not.equal(3, 4, 'these numbers are not equal');
     *
     * @name not.equal
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @namespace Should
     * @api public
     */ should.not.equal = function(val1, val2, msg) {
            new Assertion(val1, msg).to.not.equal(val2);
        };
        /**
     * ### .throw(function, [constructor/regexp], [message])
     *
     * Asserts that `function` will _not_ throw an error that is an instance of
     * `constructor`, or alternately that it will not throw an error with message
     * matching `regexp`.
     *
     *     should.not.throw(fn, Error, 'function does not throw');
     *
     * @name not.throw
     * @alias not.Throw
     * @param {Function} function
     * @param {ErrorConstructor} constructor
     * @param {RegExp} regexp
     * @param {String} message
     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
     * @namespace Should
     * @api public
     */ should.not.Throw = function(fn, errt, errs, msg) {
            new Assertion(fn, msg).to.not.Throw(errt, errs);
        };
        /**
     * ### .not.exist
     *
     * Asserts that the target is neither `null` nor `undefined`.
     *
     *     var bar = null;
     *
     *     should.not.exist(bar, 'bar does not exist');
     *
     * @name not.exist
     * @namespace Should
     * @api public
     */ should.not.exist = function(val, msg) {
            new Assertion(val, msg).to.not.exist;
        };
        should["throw"] = should["Throw"];
        should.not["throw"] = should.not["Throw"];
        return should;
    }
    chai.should = loadShould;
    chai.Should = loadShould;
};

},{}],"RV2o7":[function(require,module,exports) {
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */ module.exports = function(chai, util) {
    /*!
   * Chai dependencies.
   */ var Assertion = chai.Assertion, flag = util.flag;
    /*!
   * Module export.
   */ /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @namespace Assert
   * @api public
   */ var assert = chai.assert = function(express, errmsg) {
        var test = new Assertion(null, null, chai.assert, true);
        test.assert(express, errmsg, "[ negation message unavailable ]");
    };
    /**
   * ### .fail([message])
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   *     assert.fail();
   *     assert.fail("custom error message");
   *     assert.fail(1, 2);
   *     assert.fail(1, 2, "custom error message");
   *     assert.fail(1, 2, "custom error message", ">");
   *     assert.fail(1, 2, undefined, ">");
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @namespace Assert
   * @api public
   */ assert.fail = function(actual, expected, message, operator) {
        if (arguments.length < 2) {
            // Comply with Node's fail([message]) interface
            message = actual;
            actual = undefined;
        }
        message = message || "assert.fail()";
        throw new chai.AssertionError(message, {
            actual: actual,
            expected: expected,
            operator: operator
        }, assert.fail);
    };
    /**
   * ### .isOk(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.isOk('everything', 'everything is ok');
   *     assert.isOk(false, 'this will fail');
   *
   * @name isOk
   * @alias ok
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isOk = function(val, msg) {
        new Assertion(val, msg, assert.isOk, true).is.ok;
    };
    /**
   * ### .isNotOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.isNotOk('everything', 'this will fail');
   *     assert.isNotOk(false, 'this will pass');
   *
   * @name isNotOk
   * @alias notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotOk = function(val, msg) {
        new Assertion(val, msg, assert.isNotOk, true).is.not.ok;
    };
    /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.equal = function(act, exp, msg) {
        var test = new Assertion(act, msg, assert.equal, true);
        test.assert(exp == flag(test, "object"), "expected #{this} to equal #{exp}", "expected #{this} to not equal #{act}", exp, act, true);
    };
    /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notEqual = function(act, exp, msg) {
        var test = new Assertion(act, msg, assert.notEqual, true);
        test.assert(exp != flag(test, "object"), "expected #{this} to not equal #{exp}", "expected #{this} to equal #{act}", exp, act, true);
    };
    /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.strictEqual = function(act, exp, msg) {
        new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);
    };
    /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notStrictEqual = function(act, exp, msg) {
        new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);
    };
    /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @alias deepStrictEqual
   * @namespace Assert
   * @api public
   */ assert.deepEqual = assert.deepStrictEqual = function(act, exp, msg) {
        new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);
    };
    /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notDeepEqual = function(act, exp, msg) {
        new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);
    };
    /**
   * ### .isAbove(valueToCheck, valueToBeAbove, [message])
   *
   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.
   *
   *     assert.isAbove(5, 2, '5 is strictly greater than 2');
   *
   * @name isAbove
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAbove
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isAbove = function(val, abv, msg) {
        new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);
    };
    /**
   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])
   *
   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.
   *
   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');
   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');
   *
   * @name isAtLeast
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAtLeast
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isAtLeast = function(val, atlst, msg) {
        new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);
    };
    /**
   * ### .isBelow(valueToCheck, valueToBeBelow, [message])
   *
   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.
   *
   *     assert.isBelow(3, 6, '3 is strictly less than 6');
   *
   * @name isBelow
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeBelow
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isBelow = function(val, blw, msg) {
        new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);
    };
    /**
   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])
   *
   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.
   *
   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');
   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');
   *
   * @name isAtMost
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAtMost
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isAtMost = function(val, atmst, msg) {
        new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);
    };
    /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isTrue = function(val, msg) {
        new Assertion(val, msg, assert.isTrue, true).is["true"];
    };
    /**
   * ### .isNotTrue(value, [message])
   *
   * Asserts that `value` is not true.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotTrue(tea, 'great, time for tea!');
   *
   * @name isNotTrue
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotTrue = function(val, msg) {
        new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);
    };
    /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isFalse = function(val, msg) {
        new Assertion(val, msg, assert.isFalse, true).is["false"];
    };
    /**
   * ### .isNotFalse(value, [message])
   *
   * Asserts that `value` is not false.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotFalse(tea, 'great, time for tea!');
   *
   * @name isNotFalse
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotFalse = function(val, msg) {
        new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);
    };
    /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNull = function(val, msg) {
        new Assertion(val, msg, assert.isNull, true).to.equal(null);
    };
    /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotNull = function(val, msg) {
        new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);
    };
    /**
   * ### .isNaN
   *
   * Asserts that value is NaN.
   *
   *     assert.isNaN(NaN, 'NaN is NaN');
   *
   * @name isNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNaN = function(val, msg) {
        new Assertion(val, msg, assert.isNaN, true).to.be.NaN;
    };
    /**
   * ### .isNotNaN
   *
   * Asserts that value is not NaN.
   *
   *     assert.isNotNaN(4, '4 is not NaN');
   *
   * @name isNotNaN
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotNaN = function(val, msg) {
        new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;
    };
    /**
   * ### .exists
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi';
   *
   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');
   *
   * @name exists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.exists = function(val, msg) {
        new Assertion(val, msg, assert.exists, true).to.exist;
    };
    /**
   * ### .notExists
   *
   * Asserts that the target is either `null` or `undefined`.
   *
   *     var bar = null
   *       , baz;
   *
   *     assert.notExists(bar);
   *     assert.notExists(baz, 'baz is either null or undefined');
   *
   * @name notExists
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notExists = function(val, msg) {
        new Assertion(val, msg, assert.notExists, true).to.not.exist;
    };
    /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isUndefined = function(val, msg) {
        new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);
    };
    /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isDefined = function(val, msg) {
        new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);
    };
    /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isFunction = function(val, msg) {
        new Assertion(val, msg, assert.isFunction, true).to.be.a("function");
    };
    /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotFunction = function(val, msg) {
        new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a("function");
    };
    /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).
   * _The assertion does not match subclassed objects._
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isObject = function(val, msg) {
        new Assertion(val, msg, assert.isObject, true).to.be.a("object");
    };
    /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).
   *
   *     var selection = 'chai'
   *     assert.isNotObject(selection, 'tea selection is not an object');
   *     assert.isNotObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotObject = function(val, msg) {
        new Assertion(val, msg, assert.isNotObject, true).to.not.be.a("object");
    };
    /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isArray = function(val, msg) {
        new Assertion(val, msg, assert.isArray, true).to.be.an("array");
    };
    /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotArray = function(val, msg) {
        new Assertion(val, msg, assert.isNotArray, true).to.not.be.an("array");
    };
    /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isString = function(val, msg) {
        new Assertion(val, msg, assert.isString, true).to.be.a("string");
    };
    /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotString = function(val, msg) {
        new Assertion(val, msg, assert.isNotString, true).to.not.be.a("string");
    };
    /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNumber = function(val, msg) {
        new Assertion(val, msg, assert.isNumber, true).to.be.a("number");
    };
    /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotNumber = function(val, msg) {
        new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a("number");
    };
    /**
   * ### .isFinite(value, [message])
   *
   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.
   *
   *     var cups = 2;
   *     assert.isFinite(cups, 'how many cups');
   *
   *     assert.isFinite(NaN); // throws
   *
   * @name isFinite
   * @param {Number} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isFinite = function(val, msg) {
        new Assertion(val, msg, assert.isFinite, true).to.be.finite;
    };
    /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isBoolean = function(val, msg) {
        new Assertion(val, msg, assert.isBoolean, true).to.be.a("boolean");
    };
    /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.isNotBoolean = function(val, msg) {
        new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a("boolean");
    };
    /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.typeOf = function(val, type, msg) {
        new Assertion(val, msg, assert.typeOf, true).to.be.a(type);
    };
    /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notTypeOf = function(val, type, msg) {
        new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);
    };
    /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.instanceOf = function(val, type, msg) {
        new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);
    };
    /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notInstanceOf = function(val, type, msg) {
        new Assertion(val, msg, assert.notInstanceOf, true).to.not.be.instanceOf(type);
    };
    /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.include([1,2,3], 2, 'array contains value');
   *     assert.include('foobar', 'foo', 'string contains substring');
   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');
   *
   * Strict equality (===) is used. When asserting the inclusion of a value in
   * an array, the array is searched for an element that's strictly equal to the
   * given value. When asserting a subset of properties in an object, the object
   * is searched for the given property keys, checking that each one is present
   * and strictly equal to the given property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.include([obj1, obj2], obj1);
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});
   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.include = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.include, true).include(inc);
    };
    /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array, a substring in a string, or a subset of
   * properties in an object.
   *
   *     assert.notInclude([1,2,3], 4, "array doesn't contain value");
   *     assert.notInclude('foobar', 'baz', "string doesn't contain substring");
   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');
   *
   * Strict equality (===) is used. When asserting the absence of a value in an
   * array, the array is searched to confirm the absence of an element that's
   * strictly equal to the given value. When asserting a subset of properties in
   * an object, the object is searched to confirm that at least one of the given
   * property keys is either not present or not strictly equal to the given
   * property value. For instance:
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notInclude([obj1, obj2], {a: 1});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.notInclude, true).not.include(inc);
    };
    /**
   * ### .deepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Can be used to assert the
   * inclusion of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.deepInclude([obj1, obj2], {a: 1});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});
   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});
   *
   * @name deepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.deepInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);
    };
    /**
   * ### .notDeepInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Can be used to assert
   * the absence of a value in an array or a subset of properties in an object.
   * Deep equality is used.
   *
   *     var obj1 = {a: 1}
   *       , obj2 = {b: 2};
   *     assert.notDeepInclude([obj1, obj2], {a: 9});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});
   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});
   *
   * @name notDeepInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notDeepInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);
    };
    /**
   * ### .nestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\.a.[b]': 'x'});
   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'x'});
   *
   * @name nestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.nestedInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);
    };
    /**
   * ### .notNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' does not include 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\.a.b': 'y'});
   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\[b\\]': 'y'});
   *
   * @name notNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notNestedInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.notNestedInclude, true).not.nested.include(inc);
    };
    /**
   * ### .deepNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});
   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {x: 1}});
   *
   * @name deepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.deepNestedInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.deepNestedInclude, true).deep.nested.include(inc);
    };
    /**
   * ### .notDeepNestedInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' does not include 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while checking for deep equality.
   * Enables the use of dot- and bracket-notation for referencing nested
   * properties.
   * '[]' and '.' in property names can be escaped using double backslashes.
   *
   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})
   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\.a.\\[b\\]': {y: 2}});
   *
   * @name notDeepNestedInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notDeepNestedInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.notDeepNestedInclude, true).not.deep.nested.include(inc);
    };
    /**
   * ### .ownInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while ignoring inherited properties.
   *
   *     assert.ownInclude({ a: 1 }, { a: 1 });
   *
   * @name ownInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.ownInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);
    };
    /**
   * ### .notOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while ignoring inherited properties.
   *
   *     Object.prototype.b = 2;
   *
   *     assert.notOwnInclude({ a: 1 }, { b: 2 });
   *
   * @name notOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notOwnInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);
    };
    /**
   * ### .deepOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the inclusion of a subset of properties in an
   * object while ignoring inherited properties and checking for deep equality.
   *
   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});
   *
   * @name deepOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.deepOwnInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.deepOwnInclude, true).deep.own.include(inc);
    };
    /**
   * ### .notDeepOwnInclude(haystack, needle, [message])
   *
   * Asserts that 'haystack' includes 'needle'.
   * Can be used to assert the absence of a subset of properties in an
   * object while ignoring inherited properties and checking for deep equality.
   *
   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});
   *
   * @name notDeepOwnInclude
   * @param {Object} haystack
   * @param {Object} needle
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notDeepOwnInclude = function(exp, inc, msg) {
        new Assertion(exp, msg, assert.notDeepOwnInclude, true).not.deep.own.include(inc);
    };
    /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.match = function(exp, re, msg) {
        new Assertion(exp, msg, assert.match, true).to.match(re);
    };
    /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notMatch = function(exp, re, msg) {
        new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);
    };
    /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *     assert.property({ tea: { green: 'matcha' }}, 'toString');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.property = function(obj, prop, msg) {
        new Assertion(obj, msg, assert.property, true).to.have.property(prop);
    };
    /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notProperty = function(obj, prop, msg) {
        new Assertion(obj, msg, assert.notProperty, true).to.not.have.property(prop);
    };
    /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.propertyVal = function(obj, prop, val, msg) {
        new Assertion(obj, msg, assert.propertyVal, true).to.have.property(prop, val);
    };
    /**
   * ### .notPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a strict equality check
   * (===).
   *
   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');
   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');
   *
   * @name notPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notPropertyVal = function(obj, prop, val, msg) {
        new Assertion(obj, msg, assert.notPropertyVal, true).to.not.have.property(prop, val);
    };
    /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property` with a value given by `value`. Uses a deep equality check.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.deepPropertyVal = function(obj, prop, val, msg) {
        new Assertion(obj, msg, assert.deepPropertyVal, true).to.have.deep.property(prop, val);
    };
    /**
   * ### .notDeepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct or inherited property named
   * by `property` with value given by `value`. Uses a deep equality check.
   *
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *
   * @name notDeepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notDeepPropertyVal = function(obj, prop, val, msg) {
        new Assertion(obj, msg, assert.notDeepPropertyVal, true).to.not.have.deep.property(prop, val);
    };
    /**
   * ### .ownProperty(object, property, [message])
   *
   * Asserts that `object` has a direct property named by `property`. Inherited
   * properties aren't checked.
   *
   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name ownProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */ assert.ownProperty = function(obj, prop, msg) {
        new Assertion(obj, msg, assert.ownProperty, true).to.have.own.property(prop);
    };
    /**
   * ### .notOwnProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by
   * `property`. Inherited properties aren't checked.
   *
   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');
   *     assert.notOwnProperty({}, 'toString');
   *
   * @name notOwnProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */ assert.notOwnProperty = function(obj, prop, msg) {
        new Assertion(obj, msg, assert.notOwnProperty, true).to.not.have.own.property(prop);
    };
    /**
   * ### .ownPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a strict equality check (===).
   * Inherited properties aren't checked.
   *
   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');
   *
   * @name ownPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */ assert.ownPropertyVal = function(obj, prop, value, msg) {
        new Assertion(obj, msg, assert.ownPropertyVal, true).to.have.own.property(prop, value);
    };
    /**
   * ### .notOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a strict equality check
   * (===). Inherited properties aren't checked.
   *
   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');
   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */ assert.notOwnPropertyVal = function(obj, prop, value, msg) {
        new Assertion(obj, msg, assert.notOwnPropertyVal, true).to.not.have.own.property(prop, value);
    };
    /**
   * ### .deepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a direct property named by `property` and a value
   * equal to the provided `value`. Uses a deep equality check. Inherited
   * properties aren't checked.
   *
   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });
   *
   * @name deepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */ assert.deepOwnPropertyVal = function(obj, prop, value, msg) {
        new Assertion(obj, msg, assert.deepOwnPropertyVal, true).to.have.deep.own.property(prop, value);
    };
    /**
   * ### .notDeepOwnPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a direct property named by `property`
   * with a value equal to the provided `value`. Uses a deep equality check.
   * Inherited properties aren't checked.
   *
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });
   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });
   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);
   *
   * @name notDeepOwnPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */ assert.notDeepOwnPropertyVal = function(obj, prop, value, msg) {
        new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true).to.not.have.deep.own.property(prop, value);
    };
    /**
   * ### .nestedProperty(object, property, [message])
   *
   * Asserts that `object` has a direct or inherited property named by
   * `property`, which can be a string using dot- and bracket-notation for
   * nested reference.
   *
   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name nestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.nestedProperty = function(obj, prop, msg) {
        new Assertion(obj, msg, assert.nestedProperty, true).to.have.nested.property(prop);
    };
    /**
   * ### .notNestedProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for nested reference. The
   * property cannot exist on the object nor anywhere in its prototype chain.
   *
   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notNestedProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notNestedProperty = function(obj, prop, msg) {
        new Assertion(obj, msg, assert.notNestedProperty, true).to.not.have.nested.property(prop);
    };
    /**
   * ### .nestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a strict equality check (===).
   *
   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name nestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.nestedPropertyVal = function(obj, prop, val, msg) {
        new Assertion(obj, msg, assert.nestedPropertyVal, true).to.have.nested.property(prop, val);
    };
    /**
   * ### .notNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a strict equality check (===).
   *
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');
   *
   * @name notNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notNestedPropertyVal = function(obj, prop, val, msg) {
        new Assertion(obj, msg, assert.notNestedPropertyVal, true).to.not.have.nested.property(prop, val);
    };
    /**
   * ### .deepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with a value given
   * by `value`. `property` can use dot- and bracket-notation for nested
   * reference. Uses a deep equality check.
   *
   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });
   *
   * @name deepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.deepNestedPropertyVal = function(obj, prop, val, msg) {
        new Assertion(obj, msg, assert.deepNestedPropertyVal, true).to.have.deep.nested.property(prop, val);
    };
    /**
   * ### .notDeepNestedPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property` with
   * value given by `value`. `property` can use dot- and bracket-notation for
   * nested reference. Uses a deep equality check.
   *
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });
   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });
   *
   * @name notDeepNestedPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notDeepNestedPropertyVal = function(obj, prop, val, msg) {
        new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true).to.not.have.deep.nested.property(prop, val);
    };
    /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` or `size` with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 6, 'string has length of 6');
   *     assert.lengthOf(new Set([1,2,3]), 3, 'set has size of 3');
   *     assert.lengthOf(new Map([['a',1],['b',2],['c',3]]), 3, 'map has size of 3');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.lengthOf = function(exp, len, msg) {
        new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);
    };
    /**
   * ### .hasAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);
   *     assert.hasAnyKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337});
   *     assert.hasAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAnyKeys(new Set([{foo: 'bar'}, 'anotherKey']), [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAnyKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.hasAnyKeys = function(obj, keys, msg) {
        new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);
    };
    /**
   * ### .hasAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all and only all of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);
   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name hasAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.hasAllKeys = function(obj, keys, msg) {
        new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);
    };
    /**
   * ### .containsAllKeys(object, [keys], [message])
   *
   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});
   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);
   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);
   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);
   *
   * @name containsAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.containsAllKeys = function(obj, keys, msg) {
        new Assertion(obj, msg, assert.containsAllKeys, true).to.contain.all.keys(keys);
    };
    /**
   * ### .doesNotHaveAnyKeys(object, [keys], [message])
   *
   * Asserts that `object` has none of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAnyKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.doesNotHaveAnyKeys = function(obj, keys, msg) {
        new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true).to.not.have.any.keys(keys);
    };
    /**
   * ### .doesNotHaveAllKeys(object, [keys], [message])
   *
   * Asserts that `object` does not have at least one of the `keys` provided.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);
   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});
   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);
   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);
   *
   * @name doesNotHaveAllKeys
   * @param {Mixed} object
   * @param {String[]} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.doesNotHaveAllKeys = function(obj, keys, msg) {
        new Assertion(obj, msg, assert.doesNotHaveAllKeys, true).to.not.have.all.keys(keys);
    };
    /**
   * ### .hasAnyDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has at least one of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);
   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name hasAnyDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.hasAnyDeepKeys = function(obj, keys, msg) {
        new Assertion(obj, msg, assert.hasAnyDeepKeys, true).to.have.any.deep.keys(keys);
    };
    /**
   * ### .hasAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has all and only all of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});
   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});
   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name hasAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.hasAllDeepKeys = function(obj, keys, msg) {
        new Assertion(obj, msg, assert.hasAllDeepKeys, true).to.have.all.deep.keys(keys);
    };
    /**
   * ### .containsAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` contains all of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});
   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);
   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});
   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);
   *
   * @name containsAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.containsAllDeepKeys = function(obj, keys, msg) {
        new Assertion(obj, msg, assert.containsAllDeepKeys, true).to.contain.all.deep.keys(keys);
    };
    /**
   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` has none of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);
   *
   * @name doesNotHaveAnyDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.doesNotHaveAnyDeepKeys = function(obj, keys, msg) {
        new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true).to.not.have.any.deep.keys(keys);
    };
    /**
   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])
   *
   * Asserts that `object` does not have at least one of the `keys` provided.
   * Since Sets and Maps can have objects as keys you can use this assertion to perform
   * a deep comparison.
   * You can also provide a single object instead of a `keys` array and its keys
   * will be used as the expected set of keys.
   *
   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});
   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);
   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});
   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);
   *
   * @name doesNotHaveAllDeepKeys
   * @param {Mixed} object
   * @param {Array|Object} keys
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.doesNotHaveAllDeepKeys = function(obj, keys, msg) {
        new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true).to.not.have.all.deep.keys(keys);
    };
    /**
   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])
   *
   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an
   * instance of `errorLike`.
   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same
   * instance as `errorLike`.
   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a
   * message matching `errMsgMatcher`.
   *
   *     assert.throws(fn, 'Error thrown must have this msg');
   *     assert.throws(fn, /Error thrown must have a msg that matches this/);
   *     assert.throws(fn, ReferenceError);
   *     assert.throws(fn, errorInstance);
   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');
   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');
   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);
   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);
   *
   * @name throws
   * @alias throw
   * @alias Throw
   * @param {Function} fn
   * @param {ErrorConstructor|Error} errorLike
   * @param {RegExp|String} errMsgMatcher
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */ assert.throws = function(fn, errorLike, errMsgMatcher, msg) {
        if ("string" === typeof errorLike || errorLike instanceof RegExp) {
            errMsgMatcher = errorLike;
            errorLike = null;
        }
        var assertErr = new Assertion(fn, msg, assert.throws, true).to.throw(errorLike, errMsgMatcher);
        return flag(assertErr, "object");
    };
    /**
   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])
   *
   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an
   * instance of `errorLike`.
   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same
   * instance as `errorLike`.
   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a
   * message matching `errMsgMatcher`.
   *
   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');
   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);
   *     assert.doesNotThrow(fn, Error);
   *     assert.doesNotThrow(fn, errorInstance);
   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');
   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');
   *     assert.doesNotThrow(fn, Error, /Error must not match this/);
   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);
   *
   * @name doesNotThrow
   * @param {Function} fn
   * @param {ErrorConstructor} errorLike
   * @param {RegExp|String} errMsgMatcher
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @namespace Assert
   * @api public
   */ assert.doesNotThrow = function(fn, errorLike, errMsgMatcher, msg) {
        if ("string" === typeof errorLike || errorLike instanceof RegExp) {
            errMsgMatcher = errorLike;
            errorLike = null;
        }
        new Assertion(fn, msg, assert.doesNotThrow, true).to.not.throw(errorLike, errMsgMatcher);
    };
    /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.operator = function(val, operator, val2, msg) {
        var ok;
        switch(operator){
            case "==":
                ok = val == val2;
                break;
            case "===":
                ok = val === val2;
                break;
            case ">":
                ok = val > val2;
                break;
            case ">=":
                ok = val >= val2;
                break;
            case "<":
                ok = val < val2;
                break;
            case "<=":
                ok = val <= val2;
                break;
            case "!=":
                ok = val != val2;
                break;
            case "!==":
                ok = val !== val2;
                break;
            default:
                msg = msg ? msg + ": " : msg;
                throw new chai.AssertionError(msg + 'Invalid operator "' + operator + '"', undefined, assert.operator);
        }
        var test = new Assertion(ok, msg, assert.operator, true);
        test.assert(true === flag(test, "object"), "expected " + util.inspect(val) + " to be " + operator + " " + util.inspect(val2), "expected " + util.inspect(val) + " to not be " + operator + " " + util.inspect(val2));
    };
    /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.closeTo = function(act, exp, delta, msg) {
        new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);
    };
    /**
   * ### .approximately(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');
   *
   * @name approximately
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.approximately = function(act, exp, delta, msg) {
        new Assertion(act, msg, assert.approximately, true).to.be.approximately(exp, delta);
    };
    /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * strict equality check (===).
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.sameMembers = function(set1, set2, msg) {
        new Assertion(set1, msg, assert.sameMembers, true).to.have.same.members(set2);
    };
    /**
   * ### .notSameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a strict equality check (===).
   *
   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');
   *
   * @name notSameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notSameMembers = function(set1, set2, msg) {
        new Assertion(set1, msg, assert.notSameMembers, true).to.not.have.same.members(set2);
    };
    /**
   * ### .sameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in any order. Uses a
   * deep equality check.
   *
   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');
   *
   * @name sameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.sameDeepMembers = function(set1, set2, msg) {
        new Assertion(set1, msg, assert.sameDeepMembers, true).to.have.same.deep.members(set2);
    };
    /**
   * ### .notSameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in any order.
   * Uses a deep equality check.
   *
   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');
   *
   * @name notSameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notSameDeepMembers = function(set1, set2, msg) {
        new Assertion(set1, msg, assert.notSameDeepMembers, true).to.not.have.same.deep.members(set2);
    };
    /**
   * ### .sameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a strict equality check (===).
   *
   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');
   *
   * @name sameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.sameOrderedMembers = function(set1, set2, msg) {
        new Assertion(set1, msg, assert.sameOrderedMembers, true).to.have.same.ordered.members(set2);
    };
    /**
   * ### .notSameOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a strict equality check (===).
   *
   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');
   *
   * @name notSameOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notSameOrderedMembers = function(set1, set2, msg) {
        new Assertion(set1, msg, assert.notSameOrderedMembers, true).to.not.have.same.ordered.members(set2);
    };
    /**
   * ### .sameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members in the same order.
   * Uses a deep equality check.
   *
   *     assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');
   *
   * @name sameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.sameDeepOrderedMembers = function(set1, set2, msg) {
        new Assertion(set1, msg, assert.sameDeepOrderedMembers, true).to.have.same.deep.ordered.members(set2);
    };
    /**
   * ### .notSameDeepOrderedMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` don't have the same members in the same
   * order. Uses a deep equality check.
   *
   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');
   *     assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');
   *
   * @name notSameDeepOrderedMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notSameDeepOrderedMembers = function(set1, set2, msg) {
        new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true).to.not.have.same.deep.ordered.members(set2);
    };
    /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.includeMembers = function(superset, subset, msg) {
        new Assertion(superset, msg, assert.includeMembers, true).to.include.members(subset);
    };
    /**
   * ### .notIncludeMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * strict equality check (===). Duplicates are ignored.
   *
   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');
   *
   * @name notIncludeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notIncludeMembers = function(superset, subset, msg) {
        new Assertion(superset, msg, assert.notIncludeMembers, true).to.not.include.members(subset);
    };
    /**
   * ### .includeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in any order. Uses a deep
   * equality check. Duplicates are ignored.
   *
   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');
   *
   * @name includeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.includeDeepMembers = function(superset, subset, msg) {
        new Assertion(superset, msg, assert.includeDeepMembers, true).to.include.deep.members(subset);
    };
    /**
   * ### .notIncludeDeepMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in any order. Uses a
   * deep equality check. Duplicates are ignored.
   *
   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');
   *
   * @name notIncludeDeepMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notIncludeDeepMembers = function(superset, subset, msg) {
        new Assertion(superset, msg, assert.notIncludeDeepMembers, true).to.not.include.deep.members(subset);
    };
    /**
   * ### .includeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');
   *
   * @name includeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.includeOrderedMembers = function(superset, subset, msg) {
        new Assertion(superset, msg, assert.includeOrderedMembers, true).to.include.ordered.members(subset);
    };
    /**
   * ### .notIncludeOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a strict equality
   * check (===).
   *
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');
   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');
   *
   * @name notIncludeOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notIncludeOrderedMembers = function(superset, subset, msg) {
        new Assertion(superset, msg, assert.notIncludeOrderedMembers, true).to.not.include.ordered.members(subset);
    };
    /**
   * ### .includeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');
   *
   * @name includeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.includeDeepOrderedMembers = function(superset, subset, msg) {
        new Assertion(superset, msg, assert.includeDeepOrderedMembers, true).to.include.deep.ordered.members(subset);
    };
    /**
   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])
   *
   * Asserts that `subset` isn't included in `superset` in the same order
   * beginning with the first element in `superset`. Uses a deep equality
   * check.
   *
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');
   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');
   *
   * @name notIncludeDeepOrderedMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.notIncludeDeepOrderedMembers = function(superset, subset, msg) {
        new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true).to.not.include.deep.ordered.members(subset);
    };
    /**
   * ### .oneOf(inList, list, [message])
   *
   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.
   *
   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');
   *
   * @name oneOf
   * @param {*} inList
   * @param {Array<*>} list
   * @param {String} message
   * @namespace Assert
   * @api public
   */ assert.oneOf = function(inList, list, msg) {
        new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);
    };
    /**
   * ### .changes(function, object, property, [message])
   *
   * Asserts that a function changes the value of a property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 22 };
   *     assert.changes(fn, obj, 'val');
   *
   * @name changes
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.changes = function(fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === "function") {
            msg = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);
    };
    /**
   * ### .changesBy(function, object, property, delta, [message])
   *
   * Asserts that a function changes the value of a property by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 2 };
   *     assert.changesBy(fn, obj, 'val', 2);
   *
   * @name changesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.changesBy = function(fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === "function") {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        } else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.changesBy, true).to.change(obj, prop).by(delta);
    };
    /**
   * ### .doesNotChange(function, object, property, [message])
   *
   * Asserts that a function does not change the value of a property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { console.log('foo'); };
   *     assert.doesNotChange(fn, obj, 'val');
   *
   * @name doesNotChange
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.doesNotChange = function(fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === "function") {
            msg = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.doesNotChange, true).to.not.change(obj, prop);
    };
    /**
   * ### .changesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.changesButNotBy(fn, obj, 'val', 5);
   *
   * @name changesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.changesButNotBy = function(fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === "function") {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        } else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.changesButNotBy, true).to.change(obj, prop).but.not.by(delta);
    };
    /**
   * ### .increases(function, object, property, [message])
   *
   * Asserts that a function increases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 13 };
   *     assert.increases(fn, obj, 'val');
   *
   * @name increases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.increases = function(fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === "function") {
            msg = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.increases, true).to.increase(obj, prop);
    };
    /**
   * ### .increasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 10 };
   *     assert.increasesBy(fn, obj, 'val', 10);
   *
   * @name increasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.increasesBy = function(fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === "function") {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        } else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.increasesBy, true).to.increase(obj, prop).by(delta);
    };
    /**
   * ### .doesNotIncrease(function, object, property, [message])
   *
   * Asserts that a function does not increase a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 8 };
   *     assert.doesNotIncrease(fn, obj, 'val');
   *
   * @name doesNotIncrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.doesNotIncrease = function(fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === "function") {
            msg = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.doesNotIncrease, true).to.not.increase(obj, prop);
    };
    /**
   * ### .increasesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.increasesButNotBy(fn, obj, 'val', 10);
   *
   * @name increasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.increasesButNotBy = function(fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === "function") {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        } else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.increasesButNotBy, true).to.increase(obj, prop).but.not.by(delta);
    };
    /**
   * ### .decreases(function, object, property, [message])
   *
   * Asserts that a function decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreases(fn, obj, 'val');
   *
   * @name decreases
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.decreases = function(fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === "function") {
            msg = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.decreases, true).to.decrease(obj, prop);
    };
    /**
   * ### .decreasesBy(function, object, property, delta, [message])
   *
   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val -= 5 };
   *     assert.decreasesBy(fn, obj, 'val', 5);
   *
   * @name decreasesBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.decreasesBy = function(fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === "function") {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        } else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.decreasesBy, true).to.decrease(obj, prop).by(delta);
    };
    /**
   * ### .doesNotDecrease(function, object, property, [message])
   *
   * Asserts that a function does not decreases a numeric object property.
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.doesNotDecrease(fn, obj, 'val');
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.doesNotDecrease = function(fn, obj, prop, msg) {
        if (arguments.length === 3 && typeof obj === "function") {
            msg = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.doesNotDecrease, true).to.not.decrease(obj, prop);
    };
    /**
   * ### .doesNotDecreaseBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);
   *
   * @name doesNotDecreaseBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.doesNotDecreaseBy = function(fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === "function") {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        } else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        return new Assertion(fn, msg, assert.doesNotDecreaseBy, true).to.not.decrease(obj, prop).by(delta);
    };
    /**
   * ### .decreasesButNotBy(function, object, property, delta, [message])
   *
   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreasesButNotBy(fn, obj, 'val', 1);
   *
   * @name decreasesButNotBy
   * @param {Function} modifier function
   * @param {Object} object or getter function
   * @param {String} property name _optional_
   * @param {Number} change amount (delta)
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.decreasesButNotBy = function(fn, obj, prop, delta, msg) {
        if (arguments.length === 4 && typeof obj === "function") {
            var tmpMsg = delta;
            delta = prop;
            msg = tmpMsg;
        } else if (arguments.length === 3) {
            delta = prop;
            prop = null;
        }
        new Assertion(fn, msg, assert.decreasesButNotBy, true).to.decrease(obj, prop).but.not.by(delta);
    };
    /*!
   * ### .ifError(object)
   *
   * Asserts if value is not a false value, and throws if it is a true value.
   * This is added to allow for chai to be a drop-in replacement for Node's
   * assert class.
   *
   *     var err = new Error('I am a custom error');
   *     assert.ifError(err); // Rethrows err!
   *
   * @name ifError
   * @param {Object} object
   * @namespace Assert
   * @api public
   */ assert.ifError = function(val) {
        if (val) throw val;
    };
    /**
   * ### .isExtensible(object)
   *
   * Asserts that `object` is extensible (can have new properties added to it).
   *
   *     assert.isExtensible({});
   *
   * @name isExtensible
   * @alias extensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.isExtensible = function(obj, msg) {
        new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;
    };
    /**
   * ### .isNotExtensible(object)
   *
   * Asserts that `object` is _not_ extensible.
   *
   *     var nonExtensibleObject = Object.preventExtensions({});
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     assert.isNotExtensible(nonExtensibleObject);
   *     assert.isNotExtensible(sealedObject);
   *     assert.isNotExtensible(frozenObject);
   *
   * @name isNotExtensible
   * @alias notExtensible
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.isNotExtensible = function(obj, msg) {
        new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;
    };
    /**
   * ### .isSealed(object)
   *
   * Asserts that `object` is sealed (cannot have new properties added to it
   * and its existing properties cannot be removed).
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.seal({});
   *
   *     assert.isSealed(sealedObject);
   *     assert.isSealed(frozenObject);
   *
   * @name isSealed
   * @alias sealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.isSealed = function(obj, msg) {
        new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;
    };
    /**
   * ### .isNotSealed(object)
   *
   * Asserts that `object` is _not_ sealed.
   *
   *     assert.isNotSealed({});
   *
   * @name isNotSealed
   * @alias notSealed
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.isNotSealed = function(obj, msg) {
        new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;
    };
    /**
   * ### .isFrozen(object)
   *
   * Asserts that `object` is frozen (cannot have new properties added to it
   * and its existing properties cannot be modified).
   *
   *     var frozenObject = Object.freeze({});
   *     assert.frozen(frozenObject);
   *
   * @name isFrozen
   * @alias frozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.isFrozen = function(obj, msg) {
        new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;
    };
    /**
   * ### .isNotFrozen(object)
   *
   * Asserts that `object` is _not_ frozen.
   *
   *     assert.isNotFrozen({});
   *
   * @name isNotFrozen
   * @alias notFrozen
   * @param {Object} object
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.isNotFrozen = function(obj, msg) {
        new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;
    };
    /**
   * ### .isEmpty(target)
   *
   * Asserts that the target does not contain any values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isEmpty([]);
   *     assert.isEmpty('');
   *     assert.isEmpty(new Map);
   *     assert.isEmpty({});
   *
   * @name isEmpty
   * @alias empty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.isEmpty = function(val, msg) {
        new Assertion(val, msg, assert.isEmpty, true).to.be.empty;
    };
    /**
   * ### .isNotEmpty(target)
   *
   * Asserts that the target contains values.
   * For arrays and strings, it checks the `length` property.
   * For `Map` and `Set` instances, it checks the `size` property.
   * For non-function objects, it gets the count of own
   * enumerable string keys.
   *
   *     assert.isNotEmpty([1, 2]);
   *     assert.isNotEmpty('34');
   *     assert.isNotEmpty(new Set([5, 6]));
   *     assert.isNotEmpty({ key: 7 });
   *
   * @name isNotEmpty
   * @alias notEmpty
   * @param {Object|Array|String|Map|Set} target
   * @param {String} message _optional_
   * @namespace Assert
   * @api public
   */ assert.isNotEmpty = function(val, msg) {
        new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;
    };
    /*!
   * Aliases.
   */ (function alias(name, as) {
        assert[as] = assert[name];
        return alias;
    })("isOk", "ok")("isNotOk", "notOk")("throws", "throw")("throws", "Throw")("isExtensible", "extensible")("isNotExtensible", "notExtensible")("isSealed", "sealed")("isNotSealed", "notSealed")("isFrozen", "frozen")("isNotFrozen", "notFrozen")("isEmpty", "empty")("isNotEmpty", "notEmpty");
};

},{}]},["1DRQe","kaksi"], "kaksi", "parcelRequire94c2")

//# sourceMappingURL=main.8e3a5060.js.map
